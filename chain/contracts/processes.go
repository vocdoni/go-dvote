// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ProcessesABI is the input ABI used to generate the binding from.
const ProcessesABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"predecessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"namespace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resultsAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenStorageProof\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ethereumChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"procPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Activated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"successor\",\"type\":\"address\"}],\"name\":\"ActivatedSuccessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"namespace\",\"type\":\"uint32\"}],\"name\":\"CensusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"namespace\",\"type\":\"uint32\"}],\"name\":\"NewProcess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"processPrice\",\"type\":\"uint256\"}],\"name\":\"ProcessPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"namespace\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newIndex\",\"type\":\"uint8\"}],\"name\":\"QuestionIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"namespace\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"enumIProcessStore.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"successor\",\"type\":\"address\"}],\"name\":\"activateSuccessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"mode_envelopeType_censusOrigin\",\"type\":\"uint8[3]\"},{\"internalType\":\"address\",\"name\":\"entityAddress\",\"type\":\"address\"},{\"internalType\":\"string[3]\",\"name\":\"metadata_censusRoot_censusUri\",\"type\":\"string[3]\"},{\"internalType\":\"uint32[2]\",\"name\":\"startBlock_blockCount\",\"type\":\"uint32[2]\"},{\"internalType\":\"enumIProcessStore.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8[5]\",\"name\":\"questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites\",\"type\":\"uint8[5]\"},{\"internalType\":\"uint16[2]\",\"name\":\"maxTotalCost_costExponent\",\"type\":\"uint16[2]\"},{\"internalType\":\"uint256\",\"name\":\"evmBlockHeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getCreationInstance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entityAddress\",\"type\":\"address\"}],\"name\":\"getEntityProcessCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entityAddress\",\"type\":\"address\"}],\"name\":\"getNextProcessId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getParamsSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entityAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"processCountIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"namespaceIdNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"ethereumChainId\",\"type\":\"uint32\"}],\"name\":\"getProcessId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"incrementQuestionIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"namespaceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"namespaceId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"mode_envelopeType_censusOrigin\",\"type\":\"uint8[3]\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"string[3]\",\"name\":\"metadata_censusRoot_censusUri\",\"type\":\"string[3]\"},{\"internalType\":\"uint32[2]\",\"name\":\"startBlock_blockCount\",\"type\":\"uint32[2]\"},{\"internalType\":\"uint8[4]\",\"name\":\"questionCount_maxCount_maxValue_maxVoteOverwrites\",\"type\":\"uint8[4]\"},{\"internalType\":\"uint16[2]\",\"name\":\"maxTotalCost_costExponent\",\"type\":\"uint16[2]\"},{\"internalType\":\"uint256\",\"name\":\"evmBlockHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"paramsSignature\",\"type\":\"bytes32\"}],\"name\":\"newProcess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predecessorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resultsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"censusRoot\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"censusUri\",\"type\":\"string\"}],\"name\":\"setCensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setProcessPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"internalType\":\"enumIProcessStore.Status\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"successorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStorageProofAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ProcessesBin is the compiled bytecode used for deploying new contracts.
var ProcessesBin = "0x60806040523480156200001157600080fd5b5060405162003e6338038062003e6383398101604081905262000034916200037d565b60008054336001600160a01b03199091161790556200005f866200020b602090811b620018e017901c565b62000075856200032160201b620019d71760201c565b6200009d5760405162461bcd60e51b815260040162000094906200041e565b60405180910390fd5b620000b3846200032160201b620019d71760201c565b620000d25760405162461bcd60e51b81526004016200009490620004ab565b620000e8836200032160201b620019d71760201c565b620001075760405162461bcd60e51b8152600401620000949062000528565b846001600160a01b0316631aa3a0086040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200014357600080fd5b505af115801562000158573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017e9190620003f9565b60048054600580546001600160a01b03199081166001600160a01b03998a1617909155600680549091169688169690961790955563ffffffff60201b1990941664010000000063ffffffff9283160217600160401b600160e01b0319166801000000000000000096909516959095029390931763ffffffff19169316929092179091556007555062000596565b6000546001600160a01b03163314620002385760405162461bcd60e51b8152600401620000949062000449565b6001546001600160a01b031615620002645760405162461bcd60e51b815260040162000094906200055f565b60035415620002875760405162461bcd60e51b81526004016200009490620004fd565b6001600160a01b0381161562000319576001600160a01b038116301415620002c35760405162461bcd60e51b81526004016200009490620004d4565b620002d9816200032160201b620019d71760201c565b620002f85760405162461bcd60e51b8152600401620000949062000474565b600180546001600160a01b0319166001600160a01b0383161790556200031e565b436003555b50565b6000806001600160a01b0383166200033e57600091505062000345565b5050803b15155b919050565b80516001600160a01b03811681146200036257600080fd5b92915050565b805163ffffffff811681146200036257600080fd5b60008060008060008060c0878903121562000396578182fd5b620003a288886200034a565b9550620003b388602089016200034a565b9450620003c488604089016200034a565b9350620003d588606089016200034a565b9250620003e6886080890162000368565b915060a087015190509295509295509295565b6000602082840312156200040b578081fd5b62000417838362000368565b9392505050565b602080825260119082015270496e76616c6964206e616d65737061636560781b604082015260600190565b60208082526011908201527037b7363ca1b7b73a3930b1ba27bbb732b960791b604082015260600190565b60208082526013908201527f496e76616c6964207072656465636573736f7200000000000000000000000000604082015260600190565b6020808252600f908201526e496e76616c696420726573756c747360881b604082015260600190565b6020808252600f908201526e21b0b713ba1031329034ba39b2b63360891b604082015260600190565b602080825260119082015270105b1c9958591e481858dd1a5d985d1959607a1b604082015260600190565b60208082526019908201527f496e76616c696420746f6b656e53746f7261676550726f6f6600000000000000604082015260600190565b60208082526019908201527f416c7265616479206861732061207072656465636573736f7200000000000000604082015260600190565b6138bd80620005a66000396000f3fe6080604052600436106101405760003560e01c806374da4adb116100b6578063c876091f1161006f578063c876091f14610353578063cab7f4f614610368578063ec4696ca14610388578063f2bcb15e1461039b578063f3fef3a3146103bb578063f630cd63146103db57610140565b806374da4adb1461028a57806380faa3d2146102aa57806381c0de75146102bf5780638de654ba146102df5780638eaa6ac0146102ff578063ac17d1f41461033357610140565b8063317daac511610108578063317daac5146101de57806334a2cdbc146101fe57806334e088d614610213578063433278721461023557806368141f2c146102555780636ca886f21461027557610140565b806308ffce24146101455780630f15f4c0146101705780631795010d146101875780631d88c05b146101a7578063270cd753146101bc575b600080fd5b34801561015157600080fd5b5061015a6103f0565b6040516101679190612dee565b60405180910390f35b34801561017c57600080fd5b506101856103ff565b005b34801561019357600080fd5b506101856101a2366004612c58565b610490565b3480156101b357600080fd5b5061015a61074a565b3480156101c857600080fd5b506101d1610759565b6040516101679190612eb8565b3480156101ea57600080fd5b506101d16101f9366004612bf9565b61075f565b34801561020a57600080fd5b5061015a61084d565b34801561021f57600080fd5b50610228610863565b604051610167919061378f565b34801561024157600080fd5b5061015a610250366004612bf9565b610876565b34801561026157600080fd5b506101d161027036600461292a565b61094a565b34801561028157600080fd5b5061015a610980565b34801561029657600080fd5b506101856102a5366004612bf9565b61098f565b3480156102b657600080fd5b506101d1610c2d565b3480156102cb57600080fd5b506101856102da36600461292a565b610c33565b3480156102eb57600080fd5b506101856102fa366004612c29565b610da7565b34801561030b57600080fd5b5061031f61031a366004612bf9565b611178565b604051610167989796959493929190612e1b565b34801561033f57600080fd5b506101d161034e36600461298d565b611581565b34801561035f57600080fd5b5061015a6115bb565b34801561037457600080fd5b50610185610383366004612bf9565b6115ca565b6101856103963660046129df565b611644565b3480156103a757600080fd5b506101d16103b636600461292a565b61174f565b3480156103c757600080fd5b506101856103d6366004612962565b6117f3565b3480156103e757600080fd5b506102286118d4565b6001546001600160a01b031681565b6001546001600160a01b031633146104325760405162461bcd60e51b815260040161042990612fca565b60405180910390fd5b600354156104525760405162461bcd60e51b815260040161042990613494565b4360038190556040517f3ec796be1be7d03bff3a62b9fa594a60e947c1809bced06d929f145308ae57ce9161048691612eb8565b60405180910390a1565b60006003541180156104ab57506002546001600160a01b0316155b6104c75760405162461bcd60e51b815260040161042990613349565b60008251116104e85760405162461bcd60e51b81526004016104299061336b565b60008151116105095760405162461bcd60e51b8152600401610429906135b8565b600083815260096020526040902054630100000090046001600160a01b031661056c576001546001600160a01b03166105545760405162461bcd60e51b815260040161042990613041565b60405162461bcd60e51b8152600401610429906134bc565b600083815260096020526040902054630100000090046001600160a01b031633146105a95760405162461bcd60e51b815260040161042990613140565b600083815260096020526040812060049081015460ff16908111156105ca57fe5b14806105f657506003600084815260096020526040902060049081015460ff16908111156105f457fe5b145b6106125760405162461bcd60e51b8152600401610429906132e8565b6000838152600960205260409020546004166106405760405162461bcd60e51b8152600401610429906134f3565b60008381526009602052604090205462010000900460ff16600181600f81111561066657fe5b148061067d5750600281600f81111561067b57fe5b145b806106935750600381600f81111561069157fe5b145b6106af5760405162461bcd60e51b81526004016104299061367b565b600084815260096020908152604090912084516106d492600290920191860190612496565b50600084815260096020908152604090912083516106fa92600390920191850190612496565b506004546040517fb290b721dc95d65b8ca629743f4f2e385523708862c8237aa6601dd9a99c238e9161073c918791600160201b900463ffffffff1690612ec1565b60405180910390a150505050565b6002546001600160a01b031681565b60075481565b600081815260096020526040812054630100000090046001600160a01b0316610834576001546001600160a01b03166107aa5760405162461bcd60e51b815260040161042990613041565b60015460405163317daac560e01b81526001600160a01b0390911690819063317daac5906107dc908690600401612eb8565b60206040518083038186803b1580156107f457600080fd5b505afa158015610808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190612c11565b915050610848565b506000818152600960205260409020600601545b919050565b600454600160401b90046001600160a01b031681565b600454600160201b900463ffffffff1681565b600081815260096020526040812054630100000090046001600160a01b0316610943576001546001600160a01b03166108c15760405162461bcd60e51b815260040161042990613041565b6001546040516321993c3960e11b81526001600160a01b039091169081906343327872906108f3908690600401612eb8565b60206040518083038186803b15801561090b57600080fd5b505afa15801561091f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190612946565b5030919050565b6000806109568361174f565b600454909150610979908490839063ffffffff600160201b820481169116611581565b9392505050565b6005546001600160a01b031681565b600081815260096020526040902054630100000090046001600160a01b03166109da576001546001600160a01b03166105545760405162461bcd60e51b815260040161042990613041565b600081815260096020526040902054630100000090046001600160a01b03163314610a175760405162461bcd60e51b815260040161042990613140565b600081815260096020526040812060049081015460ff1690811115610a3857fe5b14610a555760405162461bcd60e51b8152600401610429906135df565b6000818152600960205260409020546101009004600116610a885760405162461bcd60e51b815260040161042990613092565b60008181526009602052604090205462010000900460ff16600181600f811115610aae57fe5b1480610ac55750600281600f811115610ac357fe5b145b80610adb5750600381600f811115610ad957fe5b145b610af75760405162461bcd60e51b81526004016104299061367b565b600082815260096020526040812060040154610b1c90610100900460ff1660016119fa565b60008481526009602052604090206004015490915060ff6201000090910481169082161015610bb957600083815260096020526040908190206004908101805461ff00191661010060ff8616021790555490517fc3c879bd28e24bfa8df84d17ef3cae71077c3610e6167d435cc7e669e4a6b97c91610bac918691600160201b900463ffffffff16908590612ef5565b60405180910390a1610c28565b600083815260096020526040902060040180546001919060ff1916828002179055506004546040517f55ab39d22f8c4c97fce480c015b739838aa5b8a4ad0a528159669842a7087b0191610c1f918691600160201b900463ffffffff1690600190612ed5565b60405180910390a15b505050565b60035481565b6000546001600160a01b03163314610c5d5760405162461bcd60e51b815260040161042990612ff0565b600060035411610c7f5760405162461bcd60e51b8152600401610429906136ec565b6002546001600160a01b031615610ca85760405162461bcd60e51b8152600401610429906130e8565b6001600160a01b038116301415610cd15760405162461bcd60e51b815260040161042990613275565b610cda816119d7565b610cf65760405162461bcd60e51b815260040161042990613421565b6000819050806001600160a01b0316630f15f4c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d3657600080fd5b505af1158015610d4a573d6000803e3d6000fd5b5050600280546001600160a01b0319166001600160a01b03861617905550506040517f1f8bdb9825a71b7560200e2279fd4b503ac6814e369318e761928502882ee11a90610d9b9043908590613778565b60405180910390a15050565b600082815260096020526040902054630100000090046001600160a01b0316610df2576001546001600160a01b03166105545760405162461bcd60e51b815260040161042990613041565b60008281526009602052604090206004015460055460ff909116906001600160a01b0316331415610f22576002816004811115610e2b57fe5b1415610e495760405162461bcd60e51b815260040161042990613393565b6004816004811115610e5757fe5b1415610e755760405162461bcd60e51b81526004016104299061329e565b6004826004811115610e8357fe5b14610ea05760405162461bcd60e51b815260040161042990613112565b600083815260096020526040902060049081018054849260ff19909116906001908490811115610ecc57fe5b02179055506004546040517f55ab39d22f8c4c97fce480c015b739838aa5b8a4ad0a528159669842a7087b0191610f14918691600160201b900463ffffffff16908690612ed5565b60405180910390a150611174565b600083815260096020526040902054630100000090046001600160a01b03163314610f5f5760405162461bcd60e51b815260040161042990613140565b6003826004811115610f6d57fe5b60ff161115610f8e5760405162461bcd60e51b815260040161042990613714565b60008381526009602052604090205462010000900460ff16600181600f811115610fb457fe5b1480610fcb5750600281600f811115610fc957fe5b145b80610fe15750600381600f811115610fdf57fe5b145b610ffd5760405162461bcd60e51b81526004016104299061367b565b600082600481111561100b57fe5b141580156110255750600382600481111561102257fe5b14155b156110425760405162461bcd60e51b8152600401610429906132e8565b600382600481111561105057fe5b141561109c5760008481526009602052604090205460021661109757600083600481111561107a57fe5b146110975760405162461bcd60e51b81526004016104299061318d565b6110ca565b6000848152600960205260409020546002166110ca5760405162461bcd60e51b81526004016104299061318d565b8160048111156110d657fe5b8360048111156110e257fe5b14156111005760405162461bcd60e51b81526004016104299061360a565b600084815260096020526040902060049081018054859260ff1990911690600190849081111561112c57fe5b02179055506004546040517f55ab39d22f8c4c97fce480c015b739838aa5b8a4ad0a528159669842a7087b019161073c918791600160201b900463ffffffff16908790612ed5565b5050565b611180612514565b600061118a612532565b611192612559565b600061119c612577565b6111a4612559565b600088815260096020526040812054630100000090046001600160a01b031661128b576001546001600160a01b03166111ef5760405162461bcd60e51b815260040161042990613041565b60015460405163023aa9ab60e61b81526001600160a01b03909116908190638eaa6ac090611221908d90600401612eb8565b60006040518083038186803b15801561123957600080fd5b505afa15801561124d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112759190810190612ad7565b9850985098509850985098509850985050611576565b6000898152600960209081526040918290208251606081018452815460ff80821683526101008204811694830194909452919390929083019162010000900416600f8111156112d657fe5b60ff169052815460408051600180860180546020600261010094831615949094026000190190911692909204601f81018390049092028301608090810190945260608301828152959e5063010000009094046001600160a01b03169c5090938493909290919084018282801561138d5780601f106113625761010080835404028352916020019161138d565b820191906000526020600020905b81548152906001019060200180831161137057829003601f168201915b5050509183525050600283810180546040805160206001841615610100026000190190931694909404601f8101839004830285018301909152808452938101939083018282801561141f5780601f106113f45761010080835404028352916020019161141f565b820191906000526020600020905b81548152906001019060200180831161140257829003601f168201915b505050918352505060038301805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156114b35780601f10611488576101008083540402835291602001916114b3565b820191906000526020600020905b81548152906001019060200180831161149657829003601f168201915b505050919092525050604080518082018252835463ffffffff600160b81b820481168352600160d81b909104166020808301919091526004850154835160a081018552610100820460ff908116825262010000830481168285015263010000008304811682870152600160201b83048116606083015265010000000000830481166080830152855180870190965261ffff600160301b840481168752600160401b84041693860193909352600590960154949b5091995016965091945090925090505b919395975091939597565b60008484848460405160200161159a9493929190612daa565b6040516020818303038152906040528051906020012090505b949350505050565b6006546001600160a01b031681565b6000546001600160a01b031633146115f45760405162461bcd60e51b815260040161042990612ff0565b60075481141561160357611641565b60078190556040517f340b7835e5cad9e69cc8bf06b0b3c3e729f0fe4fd314932f4e4284d6ffc03a7190611638908390612eb8565b60405180910390a15b50565b600060035411801561165f57506002546001600160a01b0316155b61167b5760405162461bcd60e51b815260040161042990613349565b60075434101561169d5760405162461bcd60e51b81526004016104299061321c565b604088015160009060ff16600f8111156116b357fe5b9050600181600f8111156116c357fe5b14806116da5750600281600f8111156116d857fe5b145b806116f05750600381600f8111156116ee57fe5b145b1561170857611703898888888887611a2e565b611744565b600b81600f81111561171657fe5b141561172c5761170389888a8989898989611e7c565b60405162461bcd60e51b8152600401610429906131e5565b505050505050505050565b6001600160a01b0381166000908152600860205260408120546117b6576001546001600160a01b031661178457506000610848565b60015460405163795e58af60e11b81526001600160a01b0390911690819063f2bcb15e906107dc908690600401612dee565b6001600160a01b0382166000908152600860205260409020805460001981019081106117de57fe5b60009182526020909120015460010192915050565b6000546001600160a01b0316331461181d5760405162461bcd60e51b815260040161042990612ff0565b8061182757611174565b8047116118465760405162461bcd60e51b8152600401610429906130be565b6001600160a01b03821661186c5760405162461bcd60e51b815260040161042990612f77565b6040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156118a2573d6000803e3d6000fd5b507f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648282604051610d9b929190612e02565b60045463ffffffff1681565b6000546001600160a01b0316331461190a5760405162461bcd60e51b815260040161042990612ff0565b6001546001600160a01b0316156119335760405162461bcd60e51b815260040161042990613741565b600354156119535760405162461bcd60e51b81526004016104299061355e565b6001600160a01b038116156119d0576001600160a01b03811630141561198b5760405162461bcd60e51b815260040161042990613275565b611994816119d7565b6119b05760405162461bcd60e51b8152600401610429906131b8565b600180546001600160a01b0319166001600160a01b038316179055611641565b4360035550565b6000806001600160a01b0383166119f2576000915050610848565b50503b151590565b600082820160ff8085169082161015611a255760405162461bcd60e51b81526004016104299061362f565b90505b92915050565b85516001811615611a5d57845163ffffffff16611a5d5760405162461bcd60e51b81526004016104299061351d565b60028116611a8c57602085015163ffffffff16611a8c5760405162461bcd60e51b815260040161042990613314565b855151611aab5760405162461bcd60e51b815260040161042990613168565b602086015151611acd5760405162461bcd60e51b8152600401610429906133fa565b604086015151611aef5760405162461bcd60e51b81526004016104299061301b565b835160ff16611b105760405162461bcd60e51b815260040161042990612fa0565b602084015160ff1615801590611b3157506064846001602002015160ff1611155b611b4d5760405162461bcd60e51b815260040161042990613651565b604084015160ff16611b715760405162461bcd60e51b8152600401610429906132c3565b6000611b7c3361174f565b3360009081526008602052604081208054600181018083559394509283908110611ba257fe5b6000918252602082200184815591506001851615611bc257506000611bc6565b5060035b600454600090611be9903390879063ffffffff600160201b820481169116611581565b60008181526009602052604081209192508d906020020151815460ff191660ff9091161781558c60016020020151815460ff9091166101000261ff00199091161781558c6002602002015160ff16600f811115611c4257fe5b8154829062ff000019166201000083600f811115611c5c57fe5b021790555080548b516020808e015163ffffffff908116600160d81b029216600160b81b026301000000600160b81b0319909316336301000000021763ffffffff60b81b19169290921763ffffffff60d81b19161782558c518051611cc79260018501920190612496565b506020808d01518051611ce09260028501920190612496565b5060408c01518051611cfc916003840191602090910190612496565b50828160040160006101000a81548160ff02191690836004811115611d1d57fe5b0217905550896000602002015160048201805460ff909216620100000262ff000019909216919091179055896001602002015160048201805460ff90921663010000000263ff00000019909216919091179055896002602002015160048201805460ff909216600160201b0264ff0000000019909216919091179055896003602002015160048201805460ff909216650100000000000265ff000000000019909216919091179055886000602002015160048201805461ffff909216600160301b0267ffff0000000000001990921691909117905588600160200201516004808301805461ffff909316600160401b0261ffff60401b199093169290921790915560068201899055546040517f3b1cc0fc696cbe654bd83494847cc7890f2ae0e05a79dfbd6c1892061fbf340491611e6591859163ffffffff600160201b9091041690612ec1565b60405180910390a150505050505050505050505050565b875160018116611e9e5760405162461bcd60e51b8152600401610429906133b5565b6002811615611ebf5760405162461bcd60e51b8152600401610429906136a2565b855163ffffffff16611ee35760405162461bcd60e51b815260040161042990613248565b602086015163ffffffff16611f0a5760405162461bcd60e51b815260040161042990612f4b565b6040890151600f60ff9091161115611f345760405162461bcd60e51b815260040161042990612f14565b6004811615611f555760405162461bcd60e51b815260040161042990613449565b6001600160a01b0387163314801590611f7657506001600160a01b03871615155b611f925760405162461bcd60e51b815260040161042990613589565b60065460405163c3c5a54760e01b81526001600160a01b039091169063c3c5a54790611fc2908a90600401612dee565b60206040518083038186803b158015611fda57600080fd5b505afa158015611fee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120129190612bd9565b61202e5760405162461bcd60e51b815260040161042990613064565b6040516370a0823160e01b81526000906001600160a01b038916906370a082319061205d903390600401612dee565b60206040518083038186803b15801561207557600080fd5b505afa158015612089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ad9190612c11565b9050600081116120cf5760405162461bcd60e51b81526004016104299061321c565b8851516120ee5760405162461bcd60e51b815260040161042990613168565b6020890151516121105760405162461bcd60e51b8152600401610429906133fa565b855160ff166121315760405162461bcd60e51b815260040161042990612fa0565b602086015160ff161580159061215257506064866001602002015160ff1611155b61216e5760405162461bcd60e51b815260040161042990613651565b604086015160ff166121925760405162461bcd60e51b8152600401610429906132c3565b600061219d8961174f565b6001600160a01b038a16600090815260086020526040812080546001810180835593945092839081106121cc57fe5b600091825260208220018481556004549092506121fc908d90869063ffffffff600160201b820481169116611581565b60008181526009602052604081209192508f906020020151815460ff191660ff9091161781558e60016020020151815460ff9091166101000261ff00199091161781558e6002602002015160ff16600f81111561225557fe5b8154829062ff000019166201000083600f81111561226f57fe5b02179055506020808f0151805161228c9260028501920190612496565b5080546301000000600160b81b03191663010000006001600160a01b038f16021781558b60006020020151815463ffffffff909116600160b81b0263ffffffff60b81b199091161781558b60016020020151815463ffffffff909116600160d81b0263ffffffff60d81b199091161781558d6000602002015181600101908051906020019061231c929190612496565b506004810180546000919060ff191660018302179055508a6000602002015160048201805460ff909216620100000262ff0000199092169190911790558a6001602002015160048201805460ff90921663010000000263ff000000199092169190911790558a6002602002015160048201805460ff909216600160201b0264ff00000000199092169190911790558a6003602002015160048201805460ff909216650100000000000265ff000000000019909216919091179055896000602002015160048201805461ffff909216600160301b0267ffff0000000000001990921691909117905589600160200201516004808301805461ffff909316600160401b0261ffff60401b1990931692909217909155600582018a905560068201899055546040517f3b1cc0fc696cbe654bd83494847cc7890f2ae0e05a79dfbd6c1892061fbf34049161247d91859163ffffffff600160201b9091041690612ec1565b60405180910390a1505050505050505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106124d757805160ff1916838001178555612504565b82800160010185558215612504579182015b828111156125045782518255916020019190600101906124e9565b50612510929150612595565b5090565b60405180606001604052806003906020820280368337509192915050565b60405180606001604052806003905b60608152602001906001900390816125415790505090565b60405180604001604052806002906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b5b808211156125105760008155600101612596565b8035611a2881613834565b8051611a2881613834565b600082601f8301126125d0578081fd5b6125da60606137a0565b9050808260005b600381101561260c576125f786833587016128d1565b835260209283019291909101906001016125e1565b50505092915050565b6000601f8381840112612626578182fd5b61263060606137a0565b9150818360005b60038110156126a05781518601878582011261265257600080fd5b8051612665612660826137e4565b6137a0565b81815260208a8184860101111561267b57600080fd5b61268a83828401838701613808565b9086529485019493909301925050600101612637565b5050505092915050565b600082601f8301126126ba578081fd5b6126c460406137a0565b90508082846040850111156126d857600080fd5b60005b600281101561260c5781356126ef81613856565b835260209283019291909101906001016126db565b600082601f830112612714578081fd5b61271e60406137a0565b905080828460408501111561273257600080fd5b60005b600281101561260c57815161274981613856565b83526020928301929190910190600101612735565b600082601f83011261276e578081fd5b61277860406137a0565b905080828460408501111561278c57600080fd5b60005b600281101561260c5781356127a381613866565b8352602092830192919091019060010161278f565b600082601f8301126127c8578081fd5b6127d260406137a0565b90508082846040850111156127e657600080fd5b60005b600281101561260c5781516127fd81613866565b835260209283019291909101906001016127e9565b600082601f830112612822578081fd5b61282c60806137a0565b905080828460808501111561284057600080fd5b60005b600481101561260c57813561285781613878565b83526020928301929190910190600101612843565b600082601f83011261287c578081fd5b61288660a06137a0565b905080828460a08501111561289a57600080fd5b60005b600581101561260c5781516128b181613878565b8352602092830192919091019060010161289d565b8051611a2881613849565b600082601f8301126128e1578081fd5b81356128ef612660826137e4565b915080825283602082850101111561290657600080fd5b8060208401602084013760009082016020015292915050565b8051611a2881613878565b60006020828403121561293b578081fd5b8135611a2581613834565b600060208284031215612957578081fd5b8151611a2581613834565b60008060408385031215612974578081fd5b823561297f81613834565b946020939093013593505050565b600080600080608085870312156129a2578182fd5b84356129ad81613834565b93506020850135925060408501356129c481613866565b915060608501356129d481613866565b939692955090935050565b6000806000806000806000806101e0898b0312156129fb578586fd5b89601f8a0112612a09578586fd5b612a1360606137a0565b808a60608c018d811115612a2557898afd5b895b6003811015612a50578235612a3b81613878565b85526020948501949290920191600101612a27565b50829b50612a5e8e826125aa565b9a5050505050608089013567ffffffffffffffff811115612a7d578687fd5b612a898b828c016125c0565b965050612a998a60a08b0161275e565b9450612aa88a60e08b01612812565b9350612ab88a6101608b016126aa565b92506101a089013591506101c089013590509295985092959890939650565b600080600080600080600080610200898b031215612af3578182fd5b89601f8a0112612b01578182fd5b612b0e61266060036137c7565b808a60608c018d811115612b20578586fd5b855b6003811015612b4a57612b358f8461291f565b85526020948501949290920191600101612b22565b50829b50612b588e826125b5565b9a5050505050608089015167ffffffffffffffff811115612b77578283fd5b612b838b828c01612615565b965050612b938a60a08b016127b8565b9450612ba28a60e08b016128c6565b9350612bb28a6101008b0161286c565b9250612bc28a6101a08b01612704565b91506101e089015190509295985092959890939650565b600060208284031215612bea578081fd5b81518015158114611a25578182fd5b600060208284031215612c0a578081fd5b5035919050565b600060208284031215612c22578081fd5b5051919050565b60008060408385031215612c3b578182fd5b823591506020830135612c4d81613849565b809150509250929050565b600080600060608486031215612c6c578081fd5b83359250602084013567ffffffffffffffff80821115612c8a578283fd5b612c96878388016128d1565b93506040860135915080821115612cab578283fd5b50612cb8868287016128d1565b9150509250925092565b6000826060810183835b6003811015612d15578383038752815180518085526020612cf282828801838601613808565b98890198601f91909101601f191694909401840193929092019150600101612ccc565b509095945050505050565b8060005b6002811015612d4757815161ffff16845260209384019390910190600101612d24565b50505050565b8060005b6002811015612d4757815163ffffffff16845260209384019390910190600101612d51565b8060005b6005811015612d4757815160ff16845260209384019390910190600101612d7a565b60058110612da657fe5b9052565b60609490941b6bffffffffffffffffffffffff19168452601484019290925260e090811b6001600160e01b0319908116603485015291901b166038820152603c0190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000610200828b835b6003811015612e4657815160ff16835260209283019290910190600101612e24565b5050506001600160a01b038a16606084015260808301819052612e6b8184018a612cc2565b915050612e7b60a0830188612d4d565b612e8860e0830187612d9c565b612e96610100830186612d76565b612ea46101a0830185612d20565b826101e08301529998505050505050505050565b90815260200190565b91825263ffffffff16602082015260400190565b83815263ffffffff83166020820152606081016115b36040830184612d9c565b92835263ffffffff91909116602083015260ff16604082015260600190565b6020808252601b908201527f496e76616c69642063656e737573206f726967696e2076616c75650000000000604082015260600190565b602080825260129082015271125b9d985b1a5908189b1bd8dad0dbdd5b9d60721b604082015260600190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b60208082526010908201526f139bc81c5d595cdd1a5bdb90dbdd5b9d60821b604082015260600190565b6020808252600c908201526b155b985d5d1a1bdc9a5e995960a21b604082015260600190565b60208082526011908201527037b7363ca1b7b73a3930b1ba27bbb732b960791b604082015260600190565b6020808252600c908201526b4e6f2063656e73757355726960a01b604082015260600190565b602080825260099082015268139bdd08199bdd5b9960ba1b604082015260600190565b602080825260149082015273151bdad95b881b9bdd081c9959da5cdd195c995960621b604082015260600190565b602080825260129082015271141c9bd8d95cdcc81b9bdd081cd95c9a585b60721b604082015260600190565b60208082526010908201526f4e6f7420656e6f7567682066756e647360801b604082015260600190565b60208082526010908201526f416c726561647920696e61637469766560801b604082015260600190565b602080825260149082015273139bdd081c995cdd5b1d1cc818dbdb9d1c9858dd60621b604082015260600190565b6020808252600e908201526d496e76616c696420656e7469747960901b604082015260600190565b6020808252600b908201526a4e6f206d6574616461746160a81b604082015260600190565b6020808252601190820152704e6f7420696e7465727275707469626c6560781b604082015260600190565b60208082526013908201527224b73b30b634b210383932b232b1b2b9b9b7b960691b604082015260600190565b60208082526019908201527f556e737570706f727465642063656e737573206f726967696e00000000000000604082015260600190565b602080825260129082015271496e73756666696369656e742066756e647360701b604082015260600190565b602080825260139082015272496e76616c696420737461727420626c6f636b60681b604082015260600190565b6020808252600f908201526e21b0b713ba1031329034ba39b2b63360891b604082015260600190565b6020808252600b908201526a105b1c9958591e481cd95d60aa1b604082015260600190565b6020808252600b908201526a4e6f206d617856616c756560a81b604082015260600190565b602080825260129082015271141c9bd8d95cdcc81d195c9b5a5b985d195960721b604082015260600190565b6020808252818101527f556e696e7465727275707469626c65206e6565647320626c6f636b436f756e74604082015260600190565b602080825260089082015267496e61637469766560c01b604082015260600190565b6020808252600e908201526d139bc810d95b9cdd5cc8149bdbdd60921b604082015260600190565b60208082526008908201526710d85b98d95b195960c21b604082015260600190565b60208082526025908201527f4175746f207374617274206973206e6565646564206f6e2045564d2070726f63604082015264657373657360d81b606082015260800190565b6020808252600d908201526c139bc818d95b9cdd5cd49bdbdd609a1b604082015260600190565b6020808252600e908201526d139bdd08184818dbdb9d1c9858dd60921b604082015260600190565b6020808252602b908201527f44796e616d69632063656e737573206e6f7420616c6c6f776564206f6e20455660408201526a4d2070726f63657373657360a81b606082015260800190565b6020808252600e908201526d416c72656164792061637469766560901b604082015260600190565b6020808252601d908201527f4e6f7420666f756e643a20547279206f6e207072656465636573736f72000000604082015260600190565b60208082526010908201526f526561642d6f6e6c792063656e73757360801b604082015260600190565b60208082526021908201527f4175746f207374617274207265717569726573206120737461727420626c6f636040820152606b60f81b606082015260800190565b602080825260119082015270105b1c9958591e481858dd1a5d985d1959607a1b604082015260600190565b602080825260159082015274496e76616c696420746f6b656e206164647265737360581b604082015260600190565b6020808252600d908201526c4e6f2043656e7375732055524960981b604082015260600190565b60208082526011908201527050726f63657373206e6f7420726561647960781b604082015260600190565b6020808252600b908201526a26bab9ba103234b33332b960a91b604082015260600190565b6020808252600890820152676f766572666c6f7760c01b604082015260600190565b60208082526010908201526f125b9d985b1a59081b585e10dbdd5b9d60821b604082015260600190565b6020808252600d908201526c2737ba1037b33316b1b430b4b760991b604082015260600190565b6020808252602a908201527f496e7465727275707469626c65206e6f7420616c6c6f776564206f6e2045564d6040820152692070726f63657373657360b01b606082015260800190565b6020808252600e908201526d4d7573742062652061637469766560901b604082015260600190565b602080825260139082015272496e76616c69642073746174757320636f646560681b604082015260600190565b60208082526019908201527f416c7265616479206861732061207072656465636573736f7200000000000000604082015260600190565b9182526001600160a01b0316602082015260400190565b63ffffffff91909116815260200190565b60405181810167ffffffffffffffff811182821017156137bf57600080fd5b604052919050565b600067ffffffffffffffff8211156137dd578081fd5b5060200290565b600067ffffffffffffffff8211156137fa578081fd5b50601f01601f191660200190565b60005b8381101561382357818101518382015260200161380b565b83811115612d475750506000910152565b6001600160a01b038116811461164157600080fd5b6005811061164157600080fd5b61ffff8116811461164157600080fd5b63ffffffff8116811461164157600080fd5b60ff8116811461164157600080fdfea2646970667358221220172d20b7d44bb49af8832ee93daf3b008bb3b31dafc10bb98f988310889d1fd164736f6c634300060c0033"

// DeployProcesses deploys a new Ethereum contract, binding an instance of Processes to it.
func DeployProcesses(auth *bind.TransactOpts, backend bind.ContractBackend, predecessor common.Address, namespace common.Address, resultsAddr common.Address, tokenStorageProof common.Address, ethereumChainId uint32, procPrice *big.Int) (common.Address, *types.Transaction, *Processes, error) {
	parsed, err := abi.JSON(strings.NewReader(ProcessesABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ProcessesBin), backend, predecessor, namespace, resultsAddr, tokenStorageProof, ethereumChainId, procPrice)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Processes{ProcessesCaller: ProcessesCaller{contract: contract}, ProcessesTransactor: ProcessesTransactor{contract: contract}, ProcessesFilterer: ProcessesFilterer{contract: contract}}, nil
}

// Processes is an auto generated Go binding around an Ethereum contract.
type Processes struct {
	ProcessesCaller     // Read-only binding to the contract
	ProcessesTransactor // Write-only binding to the contract
	ProcessesFilterer   // Log filterer for contract events
}

// ProcessesCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProcessesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProcessesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProcessesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProcessesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProcessesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProcessesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProcessesSession struct {
	Contract     *Processes        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProcessesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProcessesCallerSession struct {
	Contract *ProcessesCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ProcessesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProcessesTransactorSession struct {
	Contract     *ProcessesTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ProcessesRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProcessesRaw struct {
	Contract *Processes // Generic contract binding to access the raw methods on
}

// ProcessesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProcessesCallerRaw struct {
	Contract *ProcessesCaller // Generic read-only contract binding to access the raw methods on
}

// ProcessesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProcessesTransactorRaw struct {
	Contract *ProcessesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProcesses creates a new instance of Processes, bound to a specific deployed contract.
func NewProcesses(address common.Address, backend bind.ContractBackend) (*Processes, error) {
	contract, err := bindProcesses(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Processes{ProcessesCaller: ProcessesCaller{contract: contract}, ProcessesTransactor: ProcessesTransactor{contract: contract}, ProcessesFilterer: ProcessesFilterer{contract: contract}}, nil
}

// NewProcessesCaller creates a new read-only instance of Processes, bound to a specific deployed contract.
func NewProcessesCaller(address common.Address, caller bind.ContractCaller) (*ProcessesCaller, error) {
	contract, err := bindProcesses(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProcessesCaller{contract: contract}, nil
}

// NewProcessesTransactor creates a new write-only instance of Processes, bound to a specific deployed contract.
func NewProcessesTransactor(address common.Address, transactor bind.ContractTransactor) (*ProcessesTransactor, error) {
	contract, err := bindProcesses(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProcessesTransactor{contract: contract}, nil
}

// NewProcessesFilterer creates a new log filterer instance of Processes, bound to a specific deployed contract.
func NewProcessesFilterer(address common.Address, filterer bind.ContractFilterer) (*ProcessesFilterer, error) {
	contract, err := bindProcesses(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProcessesFilterer{contract: contract}, nil
}

// bindProcesses binds a generic wrapper to an already deployed contract.
func bindProcesses(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProcessesABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Processes *ProcessesRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Processes.Contract.ProcessesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Processes *ProcessesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Processes.Contract.ProcessesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Processes *ProcessesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Processes.Contract.ProcessesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Processes *ProcessesCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Processes.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Processes *ProcessesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Processes.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Processes *ProcessesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Processes.Contract.contract.Transact(opts, method, params...)
}

// ActivationBlock is a free data retrieval call binding the contract method 0x80faa3d2.
//
// Solidity: function activationBlock() view returns(uint256)
func (_Processes *ProcessesCaller) ActivationBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "activationBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ActivationBlock is a free data retrieval call binding the contract method 0x80faa3d2.
//
// Solidity: function activationBlock() view returns(uint256)
func (_Processes *ProcessesSession) ActivationBlock() (*big.Int, error) {
	return _Processes.Contract.ActivationBlock(&_Processes.CallOpts)
}

// ActivationBlock is a free data retrieval call binding the contract method 0x80faa3d2.
//
// Solidity: function activationBlock() view returns(uint256)
func (_Processes *ProcessesCallerSession) ActivationBlock() (*big.Int, error) {
	return _Processes.Contract.ActivationBlock(&_Processes.CallOpts)
}

// EthChainId is a free data retrieval call binding the contract method 0xf630cd63.
//
// Solidity: function ethChainId() view returns(uint32)
func (_Processes *ProcessesCaller) EthChainId(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "ethChainId")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// EthChainId is a free data retrieval call binding the contract method 0xf630cd63.
//
// Solidity: function ethChainId() view returns(uint32)
func (_Processes *ProcessesSession) EthChainId() (uint32, error) {
	return _Processes.Contract.EthChainId(&_Processes.CallOpts)
}

// EthChainId is a free data retrieval call binding the contract method 0xf630cd63.
//
// Solidity: function ethChainId() view returns(uint32)
func (_Processes *ProcessesCallerSession) EthChainId() (uint32, error) {
	return _Processes.Contract.EthChainId(&_Processes.CallOpts)
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 processId) view returns(uint8[3] mode_envelopeType_censusOrigin, address entityAddress, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8 status, uint8[5] questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[2] maxTotalCost_costExponent, uint256 evmBlockHeight)
func (_Processes *ProcessesCaller) Get(opts *bind.CallOpts, processId [32]byte) (struct {
	ModeEnvelopeTypeCensusOrigin                                [3]uint8
	EntityAddress                                               common.Address
	MetadataCensusRootCensusUri                                 [3]string
	StartBlockBlockCount                                        [2]uint32
	Status                                                      uint8
	QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites [5]uint8
	MaxTotalCostCostExponent                                    [2]uint16
	EvmBlockHeight                                              *big.Int
}, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "get", processId)

	outstruct := new(struct {
		ModeEnvelopeTypeCensusOrigin                                [3]uint8
		EntityAddress                                               common.Address
		MetadataCensusRootCensusUri                                 [3]string
		StartBlockBlockCount                                        [2]uint32
		Status                                                      uint8
		QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites [5]uint8
		MaxTotalCostCostExponent                                    [2]uint16
		EvmBlockHeight                                              *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ModeEnvelopeTypeCensusOrigin = *abi.ConvertType(out[0], new([3]uint8)).(*[3]uint8)
	outstruct.EntityAddress = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.MetadataCensusRootCensusUri = *abi.ConvertType(out[2], new([3]string)).(*[3]string)
	outstruct.StartBlockBlockCount = *abi.ConvertType(out[3], new([2]uint32)).(*[2]uint32)
	outstruct.Status = *abi.ConvertType(out[4], new(uint8)).(*uint8)
	outstruct.QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites = *abi.ConvertType(out[5], new([5]uint8)).(*[5]uint8)
	outstruct.MaxTotalCostCostExponent = *abi.ConvertType(out[6], new([2]uint16)).(*[2]uint16)
	outstruct.EvmBlockHeight = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 processId) view returns(uint8[3] mode_envelopeType_censusOrigin, address entityAddress, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8 status, uint8[5] questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[2] maxTotalCost_costExponent, uint256 evmBlockHeight)
func (_Processes *ProcessesSession) Get(processId [32]byte) (struct {
	ModeEnvelopeTypeCensusOrigin                                [3]uint8
	EntityAddress                                               common.Address
	MetadataCensusRootCensusUri                                 [3]string
	StartBlockBlockCount                                        [2]uint32
	Status                                                      uint8
	QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites [5]uint8
	MaxTotalCostCostExponent                                    [2]uint16
	EvmBlockHeight                                              *big.Int
}, error) {
	return _Processes.Contract.Get(&_Processes.CallOpts, processId)
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 processId) view returns(uint8[3] mode_envelopeType_censusOrigin, address entityAddress, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8 status, uint8[5] questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[2] maxTotalCost_costExponent, uint256 evmBlockHeight)
func (_Processes *ProcessesCallerSession) Get(processId [32]byte) (struct {
	ModeEnvelopeTypeCensusOrigin                                [3]uint8
	EntityAddress                                               common.Address
	MetadataCensusRootCensusUri                                 [3]string
	StartBlockBlockCount                                        [2]uint32
	Status                                                      uint8
	QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites [5]uint8
	MaxTotalCostCostExponent                                    [2]uint16
	EvmBlockHeight                                              *big.Int
}, error) {
	return _Processes.Contract.Get(&_Processes.CallOpts, processId)
}

// GetCreationInstance is a free data retrieval call binding the contract method 0x43327872.
//
// Solidity: function getCreationInstance(bytes32 processId) view returns(address)
func (_Processes *ProcessesCaller) GetCreationInstance(opts *bind.CallOpts, processId [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getCreationInstance", processId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetCreationInstance is a free data retrieval call binding the contract method 0x43327872.
//
// Solidity: function getCreationInstance(bytes32 processId) view returns(address)
func (_Processes *ProcessesSession) GetCreationInstance(processId [32]byte) (common.Address, error) {
	return _Processes.Contract.GetCreationInstance(&_Processes.CallOpts, processId)
}

// GetCreationInstance is a free data retrieval call binding the contract method 0x43327872.
//
// Solidity: function getCreationInstance(bytes32 processId) view returns(address)
func (_Processes *ProcessesCallerSession) GetCreationInstance(processId [32]byte) (common.Address, error) {
	return _Processes.Contract.GetCreationInstance(&_Processes.CallOpts, processId)
}

// GetEntityProcessCount is a free data retrieval call binding the contract method 0xf2bcb15e.
//
// Solidity: function getEntityProcessCount(address entityAddress) view returns(uint256)
func (_Processes *ProcessesCaller) GetEntityProcessCount(opts *bind.CallOpts, entityAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getEntityProcessCount", entityAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEntityProcessCount is a free data retrieval call binding the contract method 0xf2bcb15e.
//
// Solidity: function getEntityProcessCount(address entityAddress) view returns(uint256)
func (_Processes *ProcessesSession) GetEntityProcessCount(entityAddress common.Address) (*big.Int, error) {
	return _Processes.Contract.GetEntityProcessCount(&_Processes.CallOpts, entityAddress)
}

// GetEntityProcessCount is a free data retrieval call binding the contract method 0xf2bcb15e.
//
// Solidity: function getEntityProcessCount(address entityAddress) view returns(uint256)
func (_Processes *ProcessesCallerSession) GetEntityProcessCount(entityAddress common.Address) (*big.Int, error) {
	return _Processes.Contract.GetEntityProcessCount(&_Processes.CallOpts, entityAddress)
}

// GetNextProcessId is a free data retrieval call binding the contract method 0x68141f2c.
//
// Solidity: function getNextProcessId(address entityAddress) view returns(bytes32)
func (_Processes *ProcessesCaller) GetNextProcessId(opts *bind.CallOpts, entityAddress common.Address) ([32]byte, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getNextProcessId", entityAddress)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetNextProcessId is a free data retrieval call binding the contract method 0x68141f2c.
//
// Solidity: function getNextProcessId(address entityAddress) view returns(bytes32)
func (_Processes *ProcessesSession) GetNextProcessId(entityAddress common.Address) ([32]byte, error) {
	return _Processes.Contract.GetNextProcessId(&_Processes.CallOpts, entityAddress)
}

// GetNextProcessId is a free data retrieval call binding the contract method 0x68141f2c.
//
// Solidity: function getNextProcessId(address entityAddress) view returns(bytes32)
func (_Processes *ProcessesCallerSession) GetNextProcessId(entityAddress common.Address) ([32]byte, error) {
	return _Processes.Contract.GetNextProcessId(&_Processes.CallOpts, entityAddress)
}

// GetParamsSignature is a free data retrieval call binding the contract method 0x317daac5.
//
// Solidity: function getParamsSignature(bytes32 processId) view returns(bytes32)
func (_Processes *ProcessesCaller) GetParamsSignature(opts *bind.CallOpts, processId [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getParamsSignature", processId)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetParamsSignature is a free data retrieval call binding the contract method 0x317daac5.
//
// Solidity: function getParamsSignature(bytes32 processId) view returns(bytes32)
func (_Processes *ProcessesSession) GetParamsSignature(processId [32]byte) ([32]byte, error) {
	return _Processes.Contract.GetParamsSignature(&_Processes.CallOpts, processId)
}

// GetParamsSignature is a free data retrieval call binding the contract method 0x317daac5.
//
// Solidity: function getParamsSignature(bytes32 processId) view returns(bytes32)
func (_Processes *ProcessesCallerSession) GetParamsSignature(processId [32]byte) ([32]byte, error) {
	return _Processes.Contract.GetParamsSignature(&_Processes.CallOpts, processId)
}

// GetProcessId is a free data retrieval call binding the contract method 0xac17d1f4.
//
// Solidity: function getProcessId(address entityAddress, uint256 processCountIndex, uint32 namespaceIdNum, uint32 ethereumChainId) pure returns(bytes32)
func (_Processes *ProcessesCaller) GetProcessId(opts *bind.CallOpts, entityAddress common.Address, processCountIndex *big.Int, namespaceIdNum uint32, ethereumChainId uint32) ([32]byte, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getProcessId", entityAddress, processCountIndex, namespaceIdNum, ethereumChainId)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetProcessId is a free data retrieval call binding the contract method 0xac17d1f4.
//
// Solidity: function getProcessId(address entityAddress, uint256 processCountIndex, uint32 namespaceIdNum, uint32 ethereumChainId) pure returns(bytes32)
func (_Processes *ProcessesSession) GetProcessId(entityAddress common.Address, processCountIndex *big.Int, namespaceIdNum uint32, ethereumChainId uint32) ([32]byte, error) {
	return _Processes.Contract.GetProcessId(&_Processes.CallOpts, entityAddress, processCountIndex, namespaceIdNum, ethereumChainId)
}

// GetProcessId is a free data retrieval call binding the contract method 0xac17d1f4.
//
// Solidity: function getProcessId(address entityAddress, uint256 processCountIndex, uint32 namespaceIdNum, uint32 ethereumChainId) pure returns(bytes32)
func (_Processes *ProcessesCallerSession) GetProcessId(entityAddress common.Address, processCountIndex *big.Int, namespaceIdNum uint32, ethereumChainId uint32) ([32]byte, error) {
	return _Processes.Contract.GetProcessId(&_Processes.CallOpts, entityAddress, processCountIndex, namespaceIdNum, ethereumChainId)
}

// NamespaceAddress is a free data retrieval call binding the contract method 0x34a2cdbc.
//
// Solidity: function namespaceAddress() view returns(address)
func (_Processes *ProcessesCaller) NamespaceAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "namespaceAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NamespaceAddress is a free data retrieval call binding the contract method 0x34a2cdbc.
//
// Solidity: function namespaceAddress() view returns(address)
func (_Processes *ProcessesSession) NamespaceAddress() (common.Address, error) {
	return _Processes.Contract.NamespaceAddress(&_Processes.CallOpts)
}

// NamespaceAddress is a free data retrieval call binding the contract method 0x34a2cdbc.
//
// Solidity: function namespaceAddress() view returns(address)
func (_Processes *ProcessesCallerSession) NamespaceAddress() (common.Address, error) {
	return _Processes.Contract.NamespaceAddress(&_Processes.CallOpts)
}

// NamespaceId is a free data retrieval call binding the contract method 0x34e088d6.
//
// Solidity: function namespaceId() view returns(uint32)
func (_Processes *ProcessesCaller) NamespaceId(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "namespaceId")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NamespaceId is a free data retrieval call binding the contract method 0x34e088d6.
//
// Solidity: function namespaceId() view returns(uint32)
func (_Processes *ProcessesSession) NamespaceId() (uint32, error) {
	return _Processes.Contract.NamespaceId(&_Processes.CallOpts)
}

// NamespaceId is a free data retrieval call binding the contract method 0x34e088d6.
//
// Solidity: function namespaceId() view returns(uint32)
func (_Processes *ProcessesCallerSession) NamespaceId() (uint32, error) {
	return _Processes.Contract.NamespaceId(&_Processes.CallOpts)
}

// PredecessorAddress is a free data retrieval call binding the contract method 0x08ffce24.
//
// Solidity: function predecessorAddress() view returns(address)
func (_Processes *ProcessesCaller) PredecessorAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "predecessorAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PredecessorAddress is a free data retrieval call binding the contract method 0x08ffce24.
//
// Solidity: function predecessorAddress() view returns(address)
func (_Processes *ProcessesSession) PredecessorAddress() (common.Address, error) {
	return _Processes.Contract.PredecessorAddress(&_Processes.CallOpts)
}

// PredecessorAddress is a free data retrieval call binding the contract method 0x08ffce24.
//
// Solidity: function predecessorAddress() view returns(address)
func (_Processes *ProcessesCallerSession) PredecessorAddress() (common.Address, error) {
	return _Processes.Contract.PredecessorAddress(&_Processes.CallOpts)
}

// ProcessPrice is a free data retrieval call binding the contract method 0x270cd753.
//
// Solidity: function processPrice() view returns(uint256)
func (_Processes *ProcessesCaller) ProcessPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "processPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ProcessPrice is a free data retrieval call binding the contract method 0x270cd753.
//
// Solidity: function processPrice() view returns(uint256)
func (_Processes *ProcessesSession) ProcessPrice() (*big.Int, error) {
	return _Processes.Contract.ProcessPrice(&_Processes.CallOpts)
}

// ProcessPrice is a free data retrieval call binding the contract method 0x270cd753.
//
// Solidity: function processPrice() view returns(uint256)
func (_Processes *ProcessesCallerSession) ProcessPrice() (*big.Int, error) {
	return _Processes.Contract.ProcessPrice(&_Processes.CallOpts)
}

// ResultsAddress is a free data retrieval call binding the contract method 0x6ca886f2.
//
// Solidity: function resultsAddress() view returns(address)
func (_Processes *ProcessesCaller) ResultsAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "resultsAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ResultsAddress is a free data retrieval call binding the contract method 0x6ca886f2.
//
// Solidity: function resultsAddress() view returns(address)
func (_Processes *ProcessesSession) ResultsAddress() (common.Address, error) {
	return _Processes.Contract.ResultsAddress(&_Processes.CallOpts)
}

// ResultsAddress is a free data retrieval call binding the contract method 0x6ca886f2.
//
// Solidity: function resultsAddress() view returns(address)
func (_Processes *ProcessesCallerSession) ResultsAddress() (common.Address, error) {
	return _Processes.Contract.ResultsAddress(&_Processes.CallOpts)
}

// SuccessorAddress is a free data retrieval call binding the contract method 0x1d88c05b.
//
// Solidity: function successorAddress() view returns(address)
func (_Processes *ProcessesCaller) SuccessorAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "successorAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SuccessorAddress is a free data retrieval call binding the contract method 0x1d88c05b.
//
// Solidity: function successorAddress() view returns(address)
func (_Processes *ProcessesSession) SuccessorAddress() (common.Address, error) {
	return _Processes.Contract.SuccessorAddress(&_Processes.CallOpts)
}

// SuccessorAddress is a free data retrieval call binding the contract method 0x1d88c05b.
//
// Solidity: function successorAddress() view returns(address)
func (_Processes *ProcessesCallerSession) SuccessorAddress() (common.Address, error) {
	return _Processes.Contract.SuccessorAddress(&_Processes.CallOpts)
}

// TokenStorageProofAddress is a free data retrieval call binding the contract method 0xc876091f.
//
// Solidity: function tokenStorageProofAddress() view returns(address)
func (_Processes *ProcessesCaller) TokenStorageProofAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "tokenStorageProofAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenStorageProofAddress is a free data retrieval call binding the contract method 0xc876091f.
//
// Solidity: function tokenStorageProofAddress() view returns(address)
func (_Processes *ProcessesSession) TokenStorageProofAddress() (common.Address, error) {
	return _Processes.Contract.TokenStorageProofAddress(&_Processes.CallOpts)
}

// TokenStorageProofAddress is a free data retrieval call binding the contract method 0xc876091f.
//
// Solidity: function tokenStorageProofAddress() view returns(address)
func (_Processes *ProcessesCallerSession) TokenStorageProofAddress() (common.Address, error) {
	return _Processes.Contract.TokenStorageProofAddress(&_Processes.CallOpts)
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_Processes *ProcessesTransactor) Activate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "activate")
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_Processes *ProcessesSession) Activate() (*types.Transaction, error) {
	return _Processes.Contract.Activate(&_Processes.TransactOpts)
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_Processes *ProcessesTransactorSession) Activate() (*types.Transaction, error) {
	return _Processes.Contract.Activate(&_Processes.TransactOpts)
}

// ActivateSuccessor is a paid mutator transaction binding the contract method 0x81c0de75.
//
// Solidity: function activateSuccessor(address successor) returns()
func (_Processes *ProcessesTransactor) ActivateSuccessor(opts *bind.TransactOpts, successor common.Address) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "activateSuccessor", successor)
}

// ActivateSuccessor is a paid mutator transaction binding the contract method 0x81c0de75.
//
// Solidity: function activateSuccessor(address successor) returns()
func (_Processes *ProcessesSession) ActivateSuccessor(successor common.Address) (*types.Transaction, error) {
	return _Processes.Contract.ActivateSuccessor(&_Processes.TransactOpts, successor)
}

// ActivateSuccessor is a paid mutator transaction binding the contract method 0x81c0de75.
//
// Solidity: function activateSuccessor(address successor) returns()
func (_Processes *ProcessesTransactorSession) ActivateSuccessor(successor common.Address) (*types.Transaction, error) {
	return _Processes.Contract.ActivateSuccessor(&_Processes.TransactOpts, successor)
}

// IncrementQuestionIndex is a paid mutator transaction binding the contract method 0x74da4adb.
//
// Solidity: function incrementQuestionIndex(bytes32 processId) returns()
func (_Processes *ProcessesTransactor) IncrementQuestionIndex(opts *bind.TransactOpts, processId [32]byte) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "incrementQuestionIndex", processId)
}

// IncrementQuestionIndex is a paid mutator transaction binding the contract method 0x74da4adb.
//
// Solidity: function incrementQuestionIndex(bytes32 processId) returns()
func (_Processes *ProcessesSession) IncrementQuestionIndex(processId [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.IncrementQuestionIndex(&_Processes.TransactOpts, processId)
}

// IncrementQuestionIndex is a paid mutator transaction binding the contract method 0x74da4adb.
//
// Solidity: function incrementQuestionIndex(bytes32 processId) returns()
func (_Processes *ProcessesTransactorSession) IncrementQuestionIndex(processId [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.IncrementQuestionIndex(&_Processes.TransactOpts, processId)
}

// NewProcess is a paid mutator transaction binding the contract method 0xec4696ca.
//
// Solidity: function newProcess(uint8[3] mode_envelopeType_censusOrigin, address tokenContractAddress, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8[4] questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[2] maxTotalCost_costExponent, uint256 evmBlockHeight, bytes32 paramsSignature) payable returns()
func (_Processes *ProcessesTransactor) NewProcess(opts *bind.TransactOpts, mode_envelopeType_censusOrigin [3]uint8, tokenContractAddress common.Address, metadata_censusRoot_censusUri [3]string, startBlock_blockCount [2]uint32, questionCount_maxCount_maxValue_maxVoteOverwrites [4]uint8, maxTotalCost_costExponent [2]uint16, evmBlockHeight *big.Int, paramsSignature [32]byte) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "newProcess", mode_envelopeType_censusOrigin, tokenContractAddress, metadata_censusRoot_censusUri, startBlock_blockCount, questionCount_maxCount_maxValue_maxVoteOverwrites, maxTotalCost_costExponent, evmBlockHeight, paramsSignature)
}

// NewProcess is a paid mutator transaction binding the contract method 0xec4696ca.
//
// Solidity: function newProcess(uint8[3] mode_envelopeType_censusOrigin, address tokenContractAddress, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8[4] questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[2] maxTotalCost_costExponent, uint256 evmBlockHeight, bytes32 paramsSignature) payable returns()
func (_Processes *ProcessesSession) NewProcess(mode_envelopeType_censusOrigin [3]uint8, tokenContractAddress common.Address, metadata_censusRoot_censusUri [3]string, startBlock_blockCount [2]uint32, questionCount_maxCount_maxValue_maxVoteOverwrites [4]uint8, maxTotalCost_costExponent [2]uint16, evmBlockHeight *big.Int, paramsSignature [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.NewProcess(&_Processes.TransactOpts, mode_envelopeType_censusOrigin, tokenContractAddress, metadata_censusRoot_censusUri, startBlock_blockCount, questionCount_maxCount_maxValue_maxVoteOverwrites, maxTotalCost_costExponent, evmBlockHeight, paramsSignature)
}

// NewProcess is a paid mutator transaction binding the contract method 0xec4696ca.
//
// Solidity: function newProcess(uint8[3] mode_envelopeType_censusOrigin, address tokenContractAddress, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8[4] questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[2] maxTotalCost_costExponent, uint256 evmBlockHeight, bytes32 paramsSignature) payable returns()
func (_Processes *ProcessesTransactorSession) NewProcess(mode_envelopeType_censusOrigin [3]uint8, tokenContractAddress common.Address, metadata_censusRoot_censusUri [3]string, startBlock_blockCount [2]uint32, questionCount_maxCount_maxValue_maxVoteOverwrites [4]uint8, maxTotalCost_costExponent [2]uint16, evmBlockHeight *big.Int, paramsSignature [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.NewProcess(&_Processes.TransactOpts, mode_envelopeType_censusOrigin, tokenContractAddress, metadata_censusRoot_censusUri, startBlock_blockCount, questionCount_maxCount_maxValue_maxVoteOverwrites, maxTotalCost_costExponent, evmBlockHeight, paramsSignature)
}

// SetCensus is a paid mutator transaction binding the contract method 0x1795010d.
//
// Solidity: function setCensus(bytes32 processId, string censusRoot, string censusUri) returns()
func (_Processes *ProcessesTransactor) SetCensus(opts *bind.TransactOpts, processId [32]byte, censusRoot string, censusUri string) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "setCensus", processId, censusRoot, censusUri)
}

// SetCensus is a paid mutator transaction binding the contract method 0x1795010d.
//
// Solidity: function setCensus(bytes32 processId, string censusRoot, string censusUri) returns()
func (_Processes *ProcessesSession) SetCensus(processId [32]byte, censusRoot string, censusUri string) (*types.Transaction, error) {
	return _Processes.Contract.SetCensus(&_Processes.TransactOpts, processId, censusRoot, censusUri)
}

// SetCensus is a paid mutator transaction binding the contract method 0x1795010d.
//
// Solidity: function setCensus(bytes32 processId, string censusRoot, string censusUri) returns()
func (_Processes *ProcessesTransactorSession) SetCensus(processId [32]byte, censusRoot string, censusUri string) (*types.Transaction, error) {
	return _Processes.Contract.SetCensus(&_Processes.TransactOpts, processId, censusRoot, censusUri)
}

// SetProcessPrice is a paid mutator transaction binding the contract method 0xcab7f4f6.
//
// Solidity: function setProcessPrice(uint256 newPrice) returns()
func (_Processes *ProcessesTransactor) SetProcessPrice(opts *bind.TransactOpts, newPrice *big.Int) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "setProcessPrice", newPrice)
}

// SetProcessPrice is a paid mutator transaction binding the contract method 0xcab7f4f6.
//
// Solidity: function setProcessPrice(uint256 newPrice) returns()
func (_Processes *ProcessesSession) SetProcessPrice(newPrice *big.Int) (*types.Transaction, error) {
	return _Processes.Contract.SetProcessPrice(&_Processes.TransactOpts, newPrice)
}

// SetProcessPrice is a paid mutator transaction binding the contract method 0xcab7f4f6.
//
// Solidity: function setProcessPrice(uint256 newPrice) returns()
func (_Processes *ProcessesTransactorSession) SetProcessPrice(newPrice *big.Int) (*types.Transaction, error) {
	return _Processes.Contract.SetProcessPrice(&_Processes.TransactOpts, newPrice)
}

// SetStatus is a paid mutator transaction binding the contract method 0x8de654ba.
//
// Solidity: function setStatus(bytes32 processId, uint8 newStatus) returns()
func (_Processes *ProcessesTransactor) SetStatus(opts *bind.TransactOpts, processId [32]byte, newStatus uint8) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "setStatus", processId, newStatus)
}

// SetStatus is a paid mutator transaction binding the contract method 0x8de654ba.
//
// Solidity: function setStatus(bytes32 processId, uint8 newStatus) returns()
func (_Processes *ProcessesSession) SetStatus(processId [32]byte, newStatus uint8) (*types.Transaction, error) {
	return _Processes.Contract.SetStatus(&_Processes.TransactOpts, processId, newStatus)
}

// SetStatus is a paid mutator transaction binding the contract method 0x8de654ba.
//
// Solidity: function setStatus(bytes32 processId, uint8 newStatus) returns()
func (_Processes *ProcessesTransactorSession) SetStatus(processId [32]byte, newStatus uint8) (*types.Transaction, error) {
	return _Processes.Contract.SetStatus(&_Processes.TransactOpts, processId, newStatus)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address to, uint256 amount) returns()
func (_Processes *ProcessesTransactor) Withdraw(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "withdraw", to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address to, uint256 amount) returns()
func (_Processes *ProcessesSession) Withdraw(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Processes.Contract.Withdraw(&_Processes.TransactOpts, to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address to, uint256 amount) returns()
func (_Processes *ProcessesTransactorSession) Withdraw(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Processes.Contract.Withdraw(&_Processes.TransactOpts, to, amount)
}

// ProcessesActivatedIterator is returned from FilterActivated and is used to iterate over the raw logs and unpacked data for Activated events raised by the Processes contract.
type ProcessesActivatedIterator struct {
	Event *ProcessesActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesActivated represents a Activated event raised by the Processes contract.
type ProcessesActivated struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterActivated is a free log retrieval operation binding the contract event 0x3ec796be1be7d03bff3a62b9fa594a60e947c1809bced06d929f145308ae57ce.
//
// Solidity: event Activated(uint256 blockNumber)
func (_Processes *ProcessesFilterer) FilterActivated(opts *bind.FilterOpts) (*ProcessesActivatedIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "Activated")
	if err != nil {
		return nil, err
	}
	return &ProcessesActivatedIterator{contract: _Processes.contract, event: "Activated", logs: logs, sub: sub}, nil
}

// WatchActivated is a free log subscription operation binding the contract event 0x3ec796be1be7d03bff3a62b9fa594a60e947c1809bced06d929f145308ae57ce.
//
// Solidity: event Activated(uint256 blockNumber)
func (_Processes *ProcessesFilterer) WatchActivated(opts *bind.WatchOpts, sink chan<- *ProcessesActivated) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "Activated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesActivated)
				if err := _Processes.contract.UnpackLog(event, "Activated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseActivated is a log parse operation binding the contract event 0x3ec796be1be7d03bff3a62b9fa594a60e947c1809bced06d929f145308ae57ce.
//
// Solidity: event Activated(uint256 blockNumber)
func (_Processes *ProcessesFilterer) ParseActivated(log types.Log) (*ProcessesActivated, error) {
	event := new(ProcessesActivated)
	if err := _Processes.contract.UnpackLog(event, "Activated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesActivatedSuccessorIterator is returned from FilterActivatedSuccessor and is used to iterate over the raw logs and unpacked data for ActivatedSuccessor events raised by the Processes contract.
type ProcessesActivatedSuccessorIterator struct {
	Event *ProcessesActivatedSuccessor // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesActivatedSuccessorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesActivatedSuccessor)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesActivatedSuccessor)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesActivatedSuccessorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesActivatedSuccessorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesActivatedSuccessor represents a ActivatedSuccessor event raised by the Processes contract.
type ProcessesActivatedSuccessor struct {
	BlockNumber *big.Int
	Successor   common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterActivatedSuccessor is a free log retrieval operation binding the contract event 0x1f8bdb9825a71b7560200e2279fd4b503ac6814e369318e761928502882ee11a.
//
// Solidity: event ActivatedSuccessor(uint256 blockNumber, address successor)
func (_Processes *ProcessesFilterer) FilterActivatedSuccessor(opts *bind.FilterOpts) (*ProcessesActivatedSuccessorIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "ActivatedSuccessor")
	if err != nil {
		return nil, err
	}
	return &ProcessesActivatedSuccessorIterator{contract: _Processes.contract, event: "ActivatedSuccessor", logs: logs, sub: sub}, nil
}

// WatchActivatedSuccessor is a free log subscription operation binding the contract event 0x1f8bdb9825a71b7560200e2279fd4b503ac6814e369318e761928502882ee11a.
//
// Solidity: event ActivatedSuccessor(uint256 blockNumber, address successor)
func (_Processes *ProcessesFilterer) WatchActivatedSuccessor(opts *bind.WatchOpts, sink chan<- *ProcessesActivatedSuccessor) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "ActivatedSuccessor")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesActivatedSuccessor)
				if err := _Processes.contract.UnpackLog(event, "ActivatedSuccessor", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseActivatedSuccessor is a log parse operation binding the contract event 0x1f8bdb9825a71b7560200e2279fd4b503ac6814e369318e761928502882ee11a.
//
// Solidity: event ActivatedSuccessor(uint256 blockNumber, address successor)
func (_Processes *ProcessesFilterer) ParseActivatedSuccessor(log types.Log) (*ProcessesActivatedSuccessor, error) {
	event := new(ProcessesActivatedSuccessor)
	if err := _Processes.contract.UnpackLog(event, "ActivatedSuccessor", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesCensusUpdatedIterator is returned from FilterCensusUpdated and is used to iterate over the raw logs and unpacked data for CensusUpdated events raised by the Processes contract.
type ProcessesCensusUpdatedIterator struct {
	Event *ProcessesCensusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesCensusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesCensusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesCensusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesCensusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesCensusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesCensusUpdated represents a CensusUpdated event raised by the Processes contract.
type ProcessesCensusUpdated struct {
	ProcessId [32]byte
	Namespace uint32
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCensusUpdated is a free log retrieval operation binding the contract event 0xb290b721dc95d65b8ca629743f4f2e385523708862c8237aa6601dd9a99c238e.
//
// Solidity: event CensusUpdated(bytes32 processId, uint32 namespace)
func (_Processes *ProcessesFilterer) FilterCensusUpdated(opts *bind.FilterOpts) (*ProcessesCensusUpdatedIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "CensusUpdated")
	if err != nil {
		return nil, err
	}
	return &ProcessesCensusUpdatedIterator{contract: _Processes.contract, event: "CensusUpdated", logs: logs, sub: sub}, nil
}

// WatchCensusUpdated is a free log subscription operation binding the contract event 0xb290b721dc95d65b8ca629743f4f2e385523708862c8237aa6601dd9a99c238e.
//
// Solidity: event CensusUpdated(bytes32 processId, uint32 namespace)
func (_Processes *ProcessesFilterer) WatchCensusUpdated(opts *bind.WatchOpts, sink chan<- *ProcessesCensusUpdated) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "CensusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesCensusUpdated)
				if err := _Processes.contract.UnpackLog(event, "CensusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCensusUpdated is a log parse operation binding the contract event 0xb290b721dc95d65b8ca629743f4f2e385523708862c8237aa6601dd9a99c238e.
//
// Solidity: event CensusUpdated(bytes32 processId, uint32 namespace)
func (_Processes *ProcessesFilterer) ParseCensusUpdated(log types.Log) (*ProcessesCensusUpdated, error) {
	event := new(ProcessesCensusUpdated)
	if err := _Processes.contract.UnpackLog(event, "CensusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesNewProcessIterator is returned from FilterNewProcess and is used to iterate over the raw logs and unpacked data for NewProcess events raised by the Processes contract.
type ProcessesNewProcessIterator struct {
	Event *ProcessesNewProcess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesNewProcessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesNewProcess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesNewProcess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesNewProcessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesNewProcessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesNewProcess represents a NewProcess event raised by the Processes contract.
type ProcessesNewProcess struct {
	ProcessId [32]byte
	Namespace uint32
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewProcess is a free log retrieval operation binding the contract event 0x3b1cc0fc696cbe654bd83494847cc7890f2ae0e05a79dfbd6c1892061fbf3404.
//
// Solidity: event NewProcess(bytes32 processId, uint32 namespace)
func (_Processes *ProcessesFilterer) FilterNewProcess(opts *bind.FilterOpts) (*ProcessesNewProcessIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "NewProcess")
	if err != nil {
		return nil, err
	}
	return &ProcessesNewProcessIterator{contract: _Processes.contract, event: "NewProcess", logs: logs, sub: sub}, nil
}

// WatchNewProcess is a free log subscription operation binding the contract event 0x3b1cc0fc696cbe654bd83494847cc7890f2ae0e05a79dfbd6c1892061fbf3404.
//
// Solidity: event NewProcess(bytes32 processId, uint32 namespace)
func (_Processes *ProcessesFilterer) WatchNewProcess(opts *bind.WatchOpts, sink chan<- *ProcessesNewProcess) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "NewProcess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesNewProcess)
				if err := _Processes.contract.UnpackLog(event, "NewProcess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewProcess is a log parse operation binding the contract event 0x3b1cc0fc696cbe654bd83494847cc7890f2ae0e05a79dfbd6c1892061fbf3404.
//
// Solidity: event NewProcess(bytes32 processId, uint32 namespace)
func (_Processes *ProcessesFilterer) ParseNewProcess(log types.Log) (*ProcessesNewProcess, error) {
	event := new(ProcessesNewProcess)
	if err := _Processes.contract.UnpackLog(event, "NewProcess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesProcessPriceUpdatedIterator is returned from FilterProcessPriceUpdated and is used to iterate over the raw logs and unpacked data for ProcessPriceUpdated events raised by the Processes contract.
type ProcessesProcessPriceUpdatedIterator struct {
	Event *ProcessesProcessPriceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesProcessPriceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesProcessPriceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesProcessPriceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesProcessPriceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesProcessPriceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesProcessPriceUpdated represents a ProcessPriceUpdated event raised by the Processes contract.
type ProcessesProcessPriceUpdated struct {
	ProcessPrice *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterProcessPriceUpdated is a free log retrieval operation binding the contract event 0x340b7835e5cad9e69cc8bf06b0b3c3e729f0fe4fd314932f4e4284d6ffc03a71.
//
// Solidity: event ProcessPriceUpdated(uint256 processPrice)
func (_Processes *ProcessesFilterer) FilterProcessPriceUpdated(opts *bind.FilterOpts) (*ProcessesProcessPriceUpdatedIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "ProcessPriceUpdated")
	if err != nil {
		return nil, err
	}
	return &ProcessesProcessPriceUpdatedIterator{contract: _Processes.contract, event: "ProcessPriceUpdated", logs: logs, sub: sub}, nil
}

// WatchProcessPriceUpdated is a free log subscription operation binding the contract event 0x340b7835e5cad9e69cc8bf06b0b3c3e729f0fe4fd314932f4e4284d6ffc03a71.
//
// Solidity: event ProcessPriceUpdated(uint256 processPrice)
func (_Processes *ProcessesFilterer) WatchProcessPriceUpdated(opts *bind.WatchOpts, sink chan<- *ProcessesProcessPriceUpdated) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "ProcessPriceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesProcessPriceUpdated)
				if err := _Processes.contract.UnpackLog(event, "ProcessPriceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProcessPriceUpdated is a log parse operation binding the contract event 0x340b7835e5cad9e69cc8bf06b0b3c3e729f0fe4fd314932f4e4284d6ffc03a71.
//
// Solidity: event ProcessPriceUpdated(uint256 processPrice)
func (_Processes *ProcessesFilterer) ParseProcessPriceUpdated(log types.Log) (*ProcessesProcessPriceUpdated, error) {
	event := new(ProcessesProcessPriceUpdated)
	if err := _Processes.contract.UnpackLog(event, "ProcessPriceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesQuestionIndexUpdatedIterator is returned from FilterQuestionIndexUpdated and is used to iterate over the raw logs and unpacked data for QuestionIndexUpdated events raised by the Processes contract.
type ProcessesQuestionIndexUpdatedIterator struct {
	Event *ProcessesQuestionIndexUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesQuestionIndexUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesQuestionIndexUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesQuestionIndexUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesQuestionIndexUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesQuestionIndexUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesQuestionIndexUpdated represents a QuestionIndexUpdated event raised by the Processes contract.
type ProcessesQuestionIndexUpdated struct {
	ProcessId [32]byte
	Namespace uint32
	NewIndex  uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterQuestionIndexUpdated is a free log retrieval operation binding the contract event 0xc3c879bd28e24bfa8df84d17ef3cae71077c3610e6167d435cc7e669e4a6b97c.
//
// Solidity: event QuestionIndexUpdated(bytes32 processId, uint32 namespace, uint8 newIndex)
func (_Processes *ProcessesFilterer) FilterQuestionIndexUpdated(opts *bind.FilterOpts) (*ProcessesQuestionIndexUpdatedIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "QuestionIndexUpdated")
	if err != nil {
		return nil, err
	}
	return &ProcessesQuestionIndexUpdatedIterator{contract: _Processes.contract, event: "QuestionIndexUpdated", logs: logs, sub: sub}, nil
}

// WatchQuestionIndexUpdated is a free log subscription operation binding the contract event 0xc3c879bd28e24bfa8df84d17ef3cae71077c3610e6167d435cc7e669e4a6b97c.
//
// Solidity: event QuestionIndexUpdated(bytes32 processId, uint32 namespace, uint8 newIndex)
func (_Processes *ProcessesFilterer) WatchQuestionIndexUpdated(opts *bind.WatchOpts, sink chan<- *ProcessesQuestionIndexUpdated) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "QuestionIndexUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesQuestionIndexUpdated)
				if err := _Processes.contract.UnpackLog(event, "QuestionIndexUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseQuestionIndexUpdated is a log parse operation binding the contract event 0xc3c879bd28e24bfa8df84d17ef3cae71077c3610e6167d435cc7e669e4a6b97c.
//
// Solidity: event QuestionIndexUpdated(bytes32 processId, uint32 namespace, uint8 newIndex)
func (_Processes *ProcessesFilterer) ParseQuestionIndexUpdated(log types.Log) (*ProcessesQuestionIndexUpdated, error) {
	event := new(ProcessesQuestionIndexUpdated)
	if err := _Processes.contract.UnpackLog(event, "QuestionIndexUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesStatusUpdatedIterator is returned from FilterStatusUpdated and is used to iterate over the raw logs and unpacked data for StatusUpdated events raised by the Processes contract.
type ProcessesStatusUpdatedIterator struct {
	Event *ProcessesStatusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesStatusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesStatusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesStatusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesStatusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesStatusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesStatusUpdated represents a StatusUpdated event raised by the Processes contract.
type ProcessesStatusUpdated struct {
	ProcessId [32]byte
	Namespace uint32
	Status    uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStatusUpdated is a free log retrieval operation binding the contract event 0x55ab39d22f8c4c97fce480c015b739838aa5b8a4ad0a528159669842a7087b01.
//
// Solidity: event StatusUpdated(bytes32 processId, uint32 namespace, uint8 status)
func (_Processes *ProcessesFilterer) FilterStatusUpdated(opts *bind.FilterOpts) (*ProcessesStatusUpdatedIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "StatusUpdated")
	if err != nil {
		return nil, err
	}
	return &ProcessesStatusUpdatedIterator{contract: _Processes.contract, event: "StatusUpdated", logs: logs, sub: sub}, nil
}

// WatchStatusUpdated is a free log subscription operation binding the contract event 0x55ab39d22f8c4c97fce480c015b739838aa5b8a4ad0a528159669842a7087b01.
//
// Solidity: event StatusUpdated(bytes32 processId, uint32 namespace, uint8 status)
func (_Processes *ProcessesFilterer) WatchStatusUpdated(opts *bind.WatchOpts, sink chan<- *ProcessesStatusUpdated) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "StatusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesStatusUpdated)
				if err := _Processes.contract.UnpackLog(event, "StatusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStatusUpdated is a log parse operation binding the contract event 0x55ab39d22f8c4c97fce480c015b739838aa5b8a4ad0a528159669842a7087b01.
//
// Solidity: event StatusUpdated(bytes32 processId, uint32 namespace, uint8 status)
func (_Processes *ProcessesFilterer) ParseStatusUpdated(log types.Log) (*ProcessesStatusUpdated, error) {
	event := new(ProcessesStatusUpdated)
	if err := _Processes.contract.UnpackLog(event, "StatusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Processes contract.
type ProcessesWithdrawIterator struct {
	Event *ProcessesWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesWithdraw represents a Withdraw event raised by the Processes contract.
type ProcessesWithdraw struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address to, uint256 amount)
func (_Processes *ProcessesFilterer) FilterWithdraw(opts *bind.FilterOpts) (*ProcessesWithdrawIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &ProcessesWithdrawIterator{contract: _Processes.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address to, uint256 amount)
func (_Processes *ProcessesFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *ProcessesWithdraw) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesWithdraw)
				if err := _Processes.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address to, uint256 amount)
func (_Processes *ProcessesFilterer) ParseWithdraw(log types.Log) (*ProcessesWithdraw, error) {
	event := new(ProcessesWithdraw)
	if err := _Processes.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
