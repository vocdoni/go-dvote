// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ProcessesABI is the input ABI used to generate the binding from.
const ProcessesABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"predecessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"namespace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenStorageProof\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Activated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"successor\",\"type\":\"address\"}],\"name\":\"ActivatedSuccessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"namespace\",\"type\":\"uint16\"}],\"name\":\"CensusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"namespaceAddr\",\"type\":\"address\"}],\"name\":\"NamespaceAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"namespace\",\"type\":\"uint16\"}],\"name\":\"NewProcess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"namespace\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newIndex\",\"type\":\"uint8\"}],\"name\":\"QuestionIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"ResultsAvailable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"namespace\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"enumIProcessStore.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"successor\",\"type\":\"address\"}],\"name\":\"activateSuccessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"mode_envelopeType_censusOrigin\",\"type\":\"uint8[3]\"},{\"internalType\":\"address\",\"name\":\"entityAddress\",\"type\":\"address\"},{\"internalType\":\"string[3]\",\"name\":\"metadata_censusRoot_censusUri\",\"type\":\"string[3]\"},{\"internalType\":\"uint32[2]\",\"name\":\"startBlock_blockCount\",\"type\":\"uint32[2]\"},{\"internalType\":\"enumIProcessStore.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8[5]\",\"name\":\"questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites\",\"type\":\"uint8[5]\"},{\"internalType\":\"uint16[3]\",\"name\":\"maxTotalCost_costExponent_namespace\",\"type\":\"uint16[3]\"},{\"internalType\":\"uint256\",\"name\":\"evmBlockHeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getCreationInstance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entityAddress\",\"type\":\"address\"}],\"name\":\"getEntityProcessCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entityAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"namespace\",\"type\":\"uint16\"}],\"name\":\"getNextProcessId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getParamsSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entityAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"processCountIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"namespace\",\"type\":\"uint16\"}],\"name\":\"getProcessId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getResults\",\"outputs\":[{\"internalType\":\"uint32[][]\",\"name\":\"tally\",\"type\":\"uint32[][]\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"incrementQuestionIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"namespaceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"mode_envelopeType_censusOrigin\",\"type\":\"uint8[3]\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"string[3]\",\"name\":\"metadata_censusRoot_censusUri\",\"type\":\"string[3]\"},{\"internalType\":\"uint32[2]\",\"name\":\"startBlock_blockCount\",\"type\":\"uint32[2]\"},{\"internalType\":\"uint8[4]\",\"name\":\"questionCount_maxCount_maxValue_maxVoteOverwrites\",\"type\":\"uint8[4]\"},{\"internalType\":\"uint16[3]\",\"name\":\"maxTotalCost_costExponent_namespace\",\"type\":\"uint16[3]\"},{\"internalType\":\"uint256\",\"name\":\"evmBlockHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"paramsSignature\",\"type\":\"bytes32\"}],\"name\":\"newProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predecessorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"censusRoot\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"censusUri\",\"type\":\"string\"}],\"name\":\"setCensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"namespace\",\"type\":\"address\"}],\"name\":\"setNamespaceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32[][]\",\"name\":\"tally\",\"type\":\"uint32[][]\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"}],\"name\":\"setResults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"internalType\":\"enumIProcessStore.Status\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"successorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStorageProofAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ProcessesBin is the compiled bytecode used for deploying new contracts.
var ProcessesBin = "0x60806040523480156200001157600080fd5b50604051620041e7380380620041e7833981016040819052620000349162000244565b60008054336001600160a01b03199091161790556200005f8362000105602090811b620019b717901c565b62000075826200021b60201b62001aaf1760201c565b6200009d5760405162461bcd60e51b8152600401620000949062000297565b60405180910390fd5b620000b3816200021b60201b62001aaf1760201c565b620000d25760405162461bcd60e51b8152600401620000949062000378565b600480546001600160a01b039384166001600160a01b0319918216179091556005805492909316911617905550620003fc565b6000546001600160a01b03163314620001325760405162461bcd60e51b81526004016200009490620002c2565b6001546001600160a01b0316156200015e5760405162461bcd60e51b81526004016200009490620003af565b60035415620001815760405162461bcd60e51b815260040162000094906200034d565b6001600160a01b0381161562000213576001600160a01b038116301415620001bd5760405162461bcd60e51b8152600401620000949062000324565b620001d3816200021b60201b62001aaf1760201c565b620001f25760405162461bcd60e51b81526004016200009490620002ed565b600180546001600160a01b0319166001600160a01b03831617905562000218565b436003555b50565b6000806001600160a01b038316620002385760009150506200023f565b5050803b15155b919050565b60008060006060848603121562000259578283fd5b83516200026681620003e6565b60208501519093506200027981620003e6565b60408501519092506200028c81620003e6565b809150509250925092565b602080825260119082015270496e76616c6964206e616d65737061636560781b604082015260600190565b60208082526011908201527037b7363ca1b7b73a3930b1ba27bbb732b960791b604082015260600190565b60208082526013908201527f496e76616c6964207072656465636573736f7200000000000000000000000000604082015260600190565b6020808252600f908201526e21b0b713ba1031329034ba39b2b63360891b604082015260600190565b602080825260119082015270105b1c9958591e481858dd1a5d985d1959607a1b604082015260600190565b60208082526019908201527f496e76616c696420746f6b656e53746f7261676550726f6f6600000000000000604082015260600190565b60208082526019908201527f416c7265616479206861732061207072656465636573736f7200000000000000604082015260600190565b6001600160a01b03811681146200021857600080fd5b613ddb806200040c6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806374da4adb116100ad5780638de654ba116100715780638de654ba1461024a5780638eaa6ac01461025d578063c876091f14610284578063f2bcb15e1461028c578063ff5956ed1461029f5761012c565b806374da4adb146101f657806377882df41461020957806380faa3d21461021c57806381bc8d901461022457806381c0de75146102375761012c565b8063305097bb116100f4578063305097bb14610194578063317daac5146101a757806334a2cdbc146101ba57806343327872146101c257806346475c4c146101d55761012c565b806308ffce24146101315780630f15f4c01461014f5780631795010d146101595780631d88c05b1461016c5780631f49662314610174575b600080fd5b6101396102b2565b6040516101469190613251565b60405180910390f35b6101576102c1565b005b6101576101673660046130c8565b610352565b61013961061a565b610187610182366004612bd0565b610629565b604051610146919061339d565b6101876101a2366004612c08565b61064c565b6101876101b5366004612f67565b610682565b610139610770565b6101396101d0366004612f67565b61077f565b6101e86101e3366004612f67565b610853565b604051610146929190613265565b610157610204366004612f67565b610a16565b610157610217366004612b98565b610cab565b610187610d50565b610157610232366004612d4d565b610d56565b610157610245366004612b98565b610e3f565b6101576102583660046130a4565b610fb3565b61027061026b366004612f67565b611272565b604051610146989796959493929190613300565b610139611692565b61018761029a366004612b98565b6116a1565b6101576102ad366004612f97565b611745565b6001546001600160a01b031681565b6001546001600160a01b031633146102f45760405162461bcd60e51b81526004016102eb906134de565b60405180910390fd5b600354156103145760405162461bcd60e51b81526004016102eb90613962565b4360038190556040517f3ec796be1be7d03bff3a62b9fa594a60e947c1809bced06d929f145308ae57ce916103489161339d565b60405180910390a1565b600060035411801561036d57506002546001600160a01b0316155b6103895760405162461bcd60e51b81526004016102eb906137e0565b60008251116103aa5760405162461bcd60e51b81526004016102eb90613802565b60008151116103cb5760405162461bcd60e51b81526004016102eb90613a86565b600083815260076020526040902054630100000090046001600160a01b031661042e576001546001600160a01b03166104165760405162461bcd60e51b81526004016102eb90613555565b60405162461bcd60e51b81526004016102eb9061398a565b600083815260076020526040902054630100000090046001600160a01b0316331461046b5760405162461bcd60e51b81526004016102eb906135fc565b600083815260076020526040812060049081015460ff169081111561048c57fe5b14806104b857506003600084815260076020526040902060049081015460ff16908111156104b657fe5b145b6104d45760405162461bcd60e51b81526004016102eb9061377f565b6000838152600760205260409020546004166105025760405162461bcd60e51b81526004016102eb906139c1565b60008381526007602052604090205462010000900460ff16600181600f81111561052857fe5b148061053f5750600281600f81111561053d57fe5b145b806105555750600381600f81111561055357fe5b145b6105715760405162461bcd60e51b81526004016102eb90613b49565b600084815260076020908152604090912084516105969260029092019186019061258c565b50600084815260076020908152604090912083516105bc9260039092019185019061258c565b50600084815260076020526040908190206004015490517fe54b983ab80f8982da0bb83c59ca327de698b5d0780451eba9706b4ffe0692119161060c918791600160501b900461ffff16906133a6565b60405180910390a150505050565b6002546001600160a01b031681565b600080610635846116a1565b905061064284828561064c565b9150505b92915050565b60008383836040516020016106639392919061321a565b6040516020818303038152906040528051906020012090509392505050565b600081815260076020526040812054630100000090046001600160a01b0316610757576001546001600160a01b03166106cd5760405162461bcd60e51b81526004016102eb90613555565b60015460405163317daac560e01b81526001600160a01b0390911690819063317daac5906106ff90869060040161339d565b60206040518083038186803b15801561071757600080fd5b505afa15801561072b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074f9190612f7f565b91505061076b565b506000818152600760205260409020600601545b919050565b6004546001600160a01b031681565b600081815260076020526040812054630100000090046001600160a01b031661084c576001546001600160a01b03166107ca5760405162461bcd60e51b81526004016102eb90613555565b6001546040516321993c3960e11b81526001600160a01b039091169081906343327872906107fc90869060040161339d565b60206040518083038186803b15801561081457600080fd5b505afa158015610828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074f9190612bb4565b5030919050565b60008181526007602052604081205460609190630100000090046001600160a01b0316610932576001546001600160a01b03166108a25760405162461bcd60e51b81526004016102eb90613555565b600154604051631191d71360e21b81526001600160a01b039091169081906346475c4c906108d490879060040161339d565b60006040518083038186803b1580156108ec57600080fd5b505afa158015610900573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109289190810190612c49565b9250925050610a11565b60008381526007602081815260408084206008810154930180548251818502810185019093528083529094859463ffffffff16938592919084015b82821015610a05576000848152602090819020830180546040805182850281018501909152818152928301828280156109f157602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116109b45790505b50505050508152602001906001019061096d565b50505050915092509250505b915091565b600081815260076020526040902054630100000090046001600160a01b0316610a61576001546001600160a01b03166104165760405162461bcd60e51b81526004016102eb90613555565b600081815260076020526040902054630100000090046001600160a01b03163314610a9e5760405162461bcd60e51b81526004016102eb906135fc565b600081815260076020526040812060049081015460ff1690811115610abf57fe5b14610adc5760405162461bcd60e51b81526004016102eb90613aad565b6000818152600760205260409020546101009004600116610b0f5760405162461bcd60e51b81526004016102eb906135a6565b60008181526007602052604090205462010000900460ff16600181600f811115610b3557fe5b1480610b4c5750600281600f811115610b4a57fe5b145b80610b625750600381600f811115610b6057fe5b145b610b7e5760405162461bcd60e51b81526004016102eb90613b49565b600082815260076020526040812060040154610ba390610100900460ff166001611ad2565b60008481526007602052604090206004015490915060ff6201000090910481169082161015610c3d5760008381526007602052604090819020600401805461ff00191661010060ff851602179081905590517f2e4d6a3a868975a1e47c2ddc05451ebdececff07e59871dbc6cbaf9364aa06c691610c30918691600160501b900461ffff169085906133e1565b60405180910390a1610ca6565b600083815260076020526040908190206004018054600160ff1990911681179182905591517fe64955704069c81c54f3fcca4da180a400f40da1bac10b68a9b42c753aa7a7f892610c9d928792600160501b90910461ffff1691906133b8565b60405180910390a15b505050565b6000546001600160a01b03163314610cd55760405162461bcd60e51b81526004016102eb90613504565b610cde81611aaf565b610cfa5760405162461bcd60e51b81526004016102eb90613435565b600480546001600160a01b0319166001600160a01b0383161790556040517f215ba443e028811c105c1bb484176ce9d9eec24ea7fb85c67a6bff78a04302b390610d45908390613251565b60405180910390a150565b60035481565b6000600354118015610d7157506002546001600160a01b0316155b610d8d5760405162461bcd60e51b81526004016102eb906137e0565b604088015160009060ff16600f811115610da357fe5b9050600181600f811115610db357fe5b1480610dca5750600281600f811115610dc857fe5b145b80610de05750600381600f811115610dde57fe5b145b15610df857610df3898888888887611b04565b610e34565b600b81600f811115610e0657fe5b1415610e1c57610df389888a8989898989611f65565b60405162461bcd60e51b81526004016102eb906136a1565b505050505050505050565b6000546001600160a01b03163314610e695760405162461bcd60e51b81526004016102eb90613504565b600060035411610e8b5760405162461bcd60e51b81526004016102eb90613bba565b6002546001600160a01b031615610eb45760405162461bcd60e51b81526004016102eb906135d2565b6001600160a01b038116301415610edd5760405162461bcd60e51b81526004016102eb90613731565b610ee681611aaf565b610f025760405162461bcd60e51b81526004016102eb906138b8565b6000819050806001600160a01b0316630f15f4c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f4257600080fd5b505af1158015610f56573d6000803e3d6000fd5b5050600280546001600160a01b0319166001600160a01b03861617905550506040517f1f8bdb9825a71b7560200e2279fd4b503ac6814e369318e761928502882ee11a90610fa79043908590613c87565b60405180910390a15050565b6003816004811115610fc157fe5b60ff161115610fe25760405162461bcd60e51b81526004016102eb90613c06565b600082815260076020526040902054630100000090046001600160a01b031661102d576001546001600160a01b03166104165760405162461bcd60e51b81526004016102eb90613555565b600082815260076020526040902054630100000090046001600160a01b0316331461106a5760405162461bcd60e51b81526004016102eb906135fc565b60008281526007602052604090205462010000900460ff16600181600f81111561109057fe5b14806110a75750600281600f8111156110a557fe5b145b806110bd5750600381600f8111156110bb57fe5b145b6110d95760405162461bcd60e51b81526004016102eb90613b49565b60008381526007602052604081206004015460ff16908160048111156110fb57fe5b141580156111155750600381600481111561111257fe5b14155b156111325760405162461bcd60e51b81526004016102eb9061377f565b600381600481111561114057fe5b141561118c5760008481526007602052604090205460021661118757600083600481111561116a57fe5b146111875760405162461bcd60e51b81526004016102eb90613649565b6111ba565b6000848152600760205260409020546002166111ba5760405162461bcd60e51b81526004016102eb90613649565b8060048111156111c657fe5b8360048111156111d257fe5b14156111f05760405162461bcd60e51b81526004016102eb90613ad8565b600084815260076020526040902060049081018054859260ff1990911690600190849081111561121c57fe5b0217905550600084815260076020526040908190206004015490517fe64955704069c81c54f3fcca4da180a400f40da1bac10b68a9b42c753aa7a7f89161060c918791600160501b900461ffff169087906133b8565b61127a61260a565b6000611284612628565b61128c61264f565b600061129661266d565b61129e61260a565b600088815260076020526040812054630100000090046001600160a01b0316611385576001546001600160a01b03166112e95760405162461bcd60e51b81526004016102eb90613555565b60015460405163023aa9ab60e61b81526001600160a01b03909116908190638eaa6ac09061131b908d9060040161339d565b60006040518083038186803b15801561133357600080fd5b505afa158015611347573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261136f9190810190612e47565b9850985098509850985098509850985050611687565b6000898152600760209081526040918290208251606081018452815460ff80821683526101008204811694830194909452919390929083019162010000900416600f8111156113d057fe5b60ff169052815460408051600180860180546020600261010094831615949094026000190190911692909204601f81018390049092028301608090810190945260608301828152959e5063010000009094046001600160a01b03169c509093849390929091908401828280156114875780601f1061145c57610100808354040283529160200191611487565b820191906000526020600020905b81548152906001019060200180831161146a57829003601f168201915b5050509183525050600283810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156115195780601f106114ee57610100808354040283529160200191611519565b820191906000526020600020905b8154815290600101906020018083116114fc57829003601f168201915b505050918352505060038301805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156115ad5780601f10611582576101008083540402835291602001916115ad565b820191906000526020600020905b81548152906001019060200180831161159057829003601f168201915b505050919092525050604080518082018252835463ffffffff600160b81b820481168352600160d81b909104166020808301919091526004850154835160a081018552610100820460ff90811682526201000083048116828501526301000000830481168287015264010000000083048116606080840191909152650100000000008404821660808401528651908101875261ffff600160301b850481168252600160401b8504811695820195909552600160501b840490941695840195909552600590960154949b509199509116965091945090925090505b919395975091939597565b6005546001600160a01b031681565b6001600160a01b038116600090815260066020526040812054611708576001546001600160a01b03166116d65750600061076b565b60015460405163795e58af60e11b81526001600160a01b0390911690819063f2bcb15e906106ff908690600401613251565b6001600160a01b03821660009081526006602052604090208054600019810190811061173057fe5b60009182526020909120015460010192915050565b6004805460008581526007602052604090819020830154905163db246f2160e01b815286936001600160a01b0390931692839263db246f219261179792600160501b90920461ffff1691339101613c6a565b60206040518083038186803b1580156117af57600080fd5b505afa1580156117c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e79190612f47565b6118035760405162461bcd60e51b81526004016102eb90613be2565b60008363ffffffff16116118295760405162461bcd60e51b81526004016102eb9061382a565b600085815260076020526040902054630100000090046001600160a01b0316611874576001546001600160a01b03166104165760405162461bcd60e51b81526004016102eb90613555565b60008581526007602052604090206004015484516201000090910460ff16146118af5760405162461bcd60e51b81526004016102eb90613460565b6002600086815260076020526040902060049081015460ff16908111156118d257fe5b141580156118ff5750600085815260076020526040902060049081015460ff16818111156118fc57fe5b14155b61191b5760405162461bcd60e51b81526004016102eb9061392b565b600085815260076020818152604090922086516119409391909201919087019061268b565b50600085815260076020526040902060088101805463ffffffff191663ffffffff86161790556004908101805460ff191660018302179055507f5aff397e0d9bfad4e73dfd9c2da1d146ce7fe8cfd1a795dbf6b95b417236fa4c856040516119a8919061339d565b60405180910390a15050505050565b6000546001600160a01b031633146119e15760405162461bcd60e51b81526004016102eb90613504565b6001546001600160a01b031615611a0a5760405162461bcd60e51b81526004016102eb90613c33565b60035415611a2a5760405162461bcd60e51b81526004016102eb90613a2c565b6001600160a01b03811615611aa7576001600160a01b038116301415611a625760405162461bcd60e51b81526004016102eb90613731565b611a6b81611aaf565b611a875760405162461bcd60e51b81526004016102eb90613674565b600180546001600160a01b0319166001600160a01b038316179055611aac565b436003555b50565b6000806001600160a01b038316611aca57600091505061076b565b50503b151590565b600082820160ff8085169082161015611afd5760405162461bcd60e51b81526004016102eb90613afd565b9392505050565b85516001811615611b3357845163ffffffff16611b335760405162461bcd60e51b81526004016102eb906139eb565b60028116611b6257602085015163ffffffff16611b625760405162461bcd60e51b81526004016102eb906137ab565b855151611b815760405162461bcd60e51b81526004016102eb90613624565b602086015151611ba35760405162461bcd60e51b81526004016102eb90613891565b604086015151611bc55760405162461bcd60e51b81526004016102eb9061352f565b835160ff16611be65760405162461bcd60e51b81526004016102eb906134b4565b602084015160ff1615801590611c0757506064846001602002015160ff1611155b611c235760405162461bcd60e51b81526004016102eb90613b1f565b604084015160ff16611c475760405162461bcd60e51b81526004016102eb9061375a565b6000611c52336116a1565b3360009081526006602052604081208054600181018083559394509283908110611c7857fe5b6000918252602082200184815591506001851615611c9857506000611c9c565b5060035b6000611cb133868a60025b602002015161064c565b60008181526007602052604081209192508d906020020151815460ff191660ff9091161781558c60016020020151815460ff9091166101000261ff00199091161781558c6002602002015160ff16600f811115611d0a57fe5b8154829062ff000019166201000083600f811115611d2457fe5b021790555080548b516020808e015163ffffffff908116600160d81b029216600160b81b026301000000600160b81b0319909316336301000000021763ffffffff60b81b19169290921763ffffffff60d81b19161782558c518051611d8f926001850192019061258c565b506020808d01518051611da8926002850192019061258c565b5060408c01518051611dc491600384019160209091019061258c565b50828160040160006101000a81548160ff02191690836004811115611de557fe5b0217905550896000602002015160048201805460ff909216620100000262ff000019909216919091179055896001602002015160048201805460ff90921663010000000263ff00000019909216919091179055896002602002015160048201805460ff9092166401000000000264ff0000000019909216919091179055896003602002015160048201805460ff909216650100000000000265ff000000000019909216919091179055886000602002015160048201805461ffff909216600160301b0267ffff00000000000019909216919091179055886001602002015160048201805461ffff909216600160401b0261ffff60401b19909216919091179055886002602002015160048201805461ffff909216600160501b0261ffff60501b19909216919091179055600681018890557f2399440b5a42cbc7ba215c9c176f7cd16b511a8727c1f277635f3fce4649156e828a60026020020151604051611f4e9291906133a6565b60405180910390a150505050505050505050505050565b875160018116611f875760405162461bcd60e51b81526004016102eb9061384c565b6002811615611fa85760405162461bcd60e51b81526004016102eb90613b70565b855163ffffffff16611fcc5760405162461bcd60e51b81526004016102eb90613704565b602086015163ffffffff16611ff35760405162461bcd60e51b81526004016102eb90613488565b6040890151600f60ff909116111561201d5760405162461bcd60e51b81526004016102eb906133fe565b600481161561203e5760405162461bcd60e51b81526004016102eb906138e0565b6001600160a01b038716331480159061205f57506001600160a01b03871615155b61207b5760405162461bcd60e51b81526004016102eb90613a57565b60055460405163c3c5a54760e01b81526001600160a01b039091169063c3c5a547906120ab908a90600401613251565b60206040518083038186803b1580156120c357600080fd5b505afa1580156120d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fb9190612f47565b6121175760405162461bcd60e51b81526004016102eb90613578565b6040516370a0823160e01b81526000906001600160a01b038916906370a0823190612146903390600401613251565b60206040518083038186803b15801561215e57600080fd5b505afa158015612172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121969190612f7f565b9050600081116121b85760405162461bcd60e51b81526004016102eb906136d8565b8851516121d75760405162461bcd60e51b81526004016102eb90613624565b6020890151516121f95760405162461bcd60e51b81526004016102eb90613891565b855160ff1661221a5760405162461bcd60e51b81526004016102eb906134b4565b602086015160ff161580159061223b57506064866001602002015160ff1611155b6122575760405162461bcd60e51b81526004016102eb90613b1f565b604086015160ff1661227b5760405162461bcd60e51b81526004016102eb9061375a565b6000612286896116a1565b6001600160a01b038a16600090815260066020526040812080546001810180835593945092839081106122b557fe5b6000918252602082200184815591506122d18c858b6002611ca7565b60008181526007602052604081209192508f906020020151815460ff191660ff9091161781558e60016020020151815460ff9091166101000261ff00199091161781558e6002602002015160ff16600f81111561232a57fe5b8154829062ff000019166201000083600f81111561234457fe5b02179055506020808f01518051612361926002850192019061258c565b5080546301000000600160b81b03191663010000006001600160a01b038f16021781558b60006020020151815463ffffffff909116600160b81b0263ffffffff60b81b199091161781558b60016020020151815463ffffffff909116600160d81b0263ffffffff60d81b199091161781558d600060200201518160010190805190602001906123f192919061258c565b506004810180546000919060ff191660018302179055508a6000602002015160048201805460ff909216620100000262ff0000199092169190911790558a6001602002015160048201805460ff90921663010000000263ff000000199092169190911790558a6002602002015160048201805460ff9092166401000000000264ff00000000199092169190911790558a6003602002015160048201805460ff909216650100000000000265ff000000000019909216919091179055896000602002015160048201805461ffff909216600160301b0267ffff00000000000019909216919091179055896001602002015160048201805461ffff909216600160401b0261ffff60401b19909216919091179055896002602002015160048201805461ffff909216600160501b0261ffff60501b1990921691909117905560058101899055600681018890557f2399440b5a42cbc7ba215c9c176f7cd16b511a8727c1f277635f3fce4649156e828b600260200201516040516125739291906133a6565b60405180910390a1505050505050505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106125cd57805160ff19168380011785556125fa565b828001600101855582156125fa579182015b828111156125fa5782518255916020019190600101906125df565b506126069291506126e4565b5090565b60405180606001604052806003906020820280368337509192915050565b60405180606001604052806003905b60608152602001906001900390816126375790505090565b60405180604001604052806002906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b8280548282559060005260206000209081019282156126d8579160200282015b828111156126d857825180516126c89184916020909101906126f9565b50916020019190600101906126ab565b506126069291506127a4565b5b8082111561260657600081556001016126e5565b828054828255906000526020600020906007016008900481019282156127985791602002820160005b8382111561276657835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302612722565b80156127965782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612766565b505b506126069291506127c1565b808211156126065760006127b882826127dd565b506001016127a4565b5b8082111561260657805463ffffffff191681556001016127c2565b508054600082556007016008900490600052602060002090810190611aac91906126e4565b803561064681613d52565b805161064681613d52565b600082601f830112612828578081fd5b6128326060613c9e565b9050808260005b60038110156128645761284f8683358701612b29565b83526020928301929190910190600101612839565b50505092915050565b6000601f838184011261287e578182fd5b6128886060613c9e565b9150818360005b60038110156128f8578151860187858201126128aa57600080fd5b80516128bd6128b882613d02565b613c9e565b81815260208a818486010111156128d357600080fd5b6128e283828401838701613d26565b908652948501949390930192505060010161288f565b5050505092915050565b600082601f830112612912578081fd5b61291c6060613c9e565b905080828460608501111561293057600080fd5b60005b600381101561286457813561294781613d74565b83526020928301929190910190600101612933565b600082601f83011261296c578081fd5b6129766060613c9e565b905080828460608501111561298a57600080fd5b60005b60038110156128645781516129a181613d74565b8352602092830192919091019060010161298d565b600082601f8301126129c6578081fd5b6129d06040613c9e565b90508082846040850111156129e457600080fd5b60005b60028110156128645781356129fb81613d84565b835260209283019291909101906001016129e7565b600082601f830112612a20578081fd5b612a2a6040613c9e565b9050808284604085011115612a3e57600080fd5b60005b6002811015612864578151612a5581613d84565b83526020928301929190910190600101612a41565b600082601f830112612a7a578081fd5b612a846080613c9e565b9050808284608085011115612a9857600080fd5b60005b6004811015612864578135612aaf81613d96565b83526020928301929190910190600101612a9b565b600082601f830112612ad4578081fd5b612ade60a0613c9e565b905080828460a085011115612af257600080fd5b60005b6005811015612864578151612b0981613d96565b83526020928301929190910190600101612af5565b805161064681613d67565b600082601f830112612b39578081fd5b8135612b476128b882613d02565b9150808252836020828501011115612b5e57600080fd5b8060208401602084013760009082016020015292915050565b803561064681613d84565b805161064681613d84565b803561064681613d96565b600060208284031215612ba9578081fd5b8135611afd81613d52565b600060208284031215612bc5578081fd5b8151611afd81613d52565b60008060408385031215612be2578081fd5b8235612bed81613d52565b91506020830135612bfd81613d74565b809150509250929050565b600080600060608486031215612c1c578081fd5b8335612c2781613d52565b9250602084013591506040840135612c3e81613d74565b809150509250925092565b60008060408385031215612c5b578182fd5b825167ffffffffffffffff811115612c71578283fd5b8301601f81018513612c81578283fd5b8051612c8f6128b882613cc5565b818152602080820191908401865b84811015612d2e57815186018a603f820112612cb7578889fd5b6020810151612cc86128b882613cc5565b80828252602082019150604084018e6040602086028701011115612cea578c8dfd5b8c94505b83851015612d1557612d008f82612b82565b83526001949094019360209283019201612cee565b5087525050602094850194929092019150600101612c9d565b505080955050505050612d448460208501612b82565b90509250929050565b600080600080600080600080610200898b031215612d69578586fd5b89601f8a0112612d77578586fd5b612d846128b86003613ce5565b808a60608c018d811115612d9657898afd5b895b6003811015612dc057612dab8f84612b8d565b85526020948501949290920191600101612d98565b50829b50612dce8e82612802565b9a5050505050608089013567ffffffffffffffff811115612ded578687fd5b612df98b828c01612818565b965050612e098a60a08b016129b6565b9450612e188a60e08b01612a6a565b9350612e288a6101608b01612902565b92506101c089013591506101e089013590509295985092959890939650565b600080600080600080600080610220898b031215612e63578182fd5b89601f8a0112612e71578182fd5b612e7b6060613c9e565b808a60608c018d811115612e8d578586fd5b855b6003811015612eb8578251612ea381613d96565b85526020948501949290920191600101612e8f565b50829b50612ec68e8261280d565b9a5050505050608089015167ffffffffffffffff811115612ee5578283fd5b612ef18b828c0161286d565b965050612f018a60a08b01612a10565b9450612f108a60e08b01612b1e565b9350612f208a6101008b01612ac4565b9250612f308a6101a08b0161295c565b915061020089015190509295985092959890939650565b600060208284031215612f58578081fd5b81518015158114611afd578182fd5b600060208284031215612f78578081fd5b5035919050565b600060208284031215612f90578081fd5b5051919050565b600080600060608486031215612fab578081fd5b83359250602084013567ffffffffffffffff811115612fc8578182fd5b8401601f81018613612fd8578182fd5b612fe56128b88235613cc5565b81358152602080820191908301845b843581101561308657813585018a603f82011261300f578687fd5b60208101356130206128b882613cc5565b80828252602082019150604084018e6040602086028701011115613042578a8bfd5b8a94505b8385101561306d576130588f82612b77565b83526001949094019360209283019201613046565b5087525050602094850194929092019150600101612ff4565b505080945050505061309b8560408601612b77565b90509250925092565b600080604083850312156130b6578182fd5b823591506020830135612bfd81613d67565b6000806000606084860312156130dc578081fd5b83359250602084013567ffffffffffffffff808211156130fa578283fd5b61310687838801612b29565b9350604086013591508082111561311b578283fd5b5061312886828701612b29565b9150509250925092565b6000826060810183835b600381101561318557838303875281518051808552602061316282828801838601613d26565b98890198601f91909101601f19169490940184019392909201915060010161313c565b509095945050505050565b8060005b60038110156131b757815161ffff16845260209384019390910190600101613194565b50505050565b8060005b60028110156131b757815163ffffffff168452602093840193909101906001016131c1565b8060005b60058110156131b757815160ff168452602093840193909101906001016131ea565b6005811061321657fe5b9052565b60609390931b6bffffffffffffffffffffffff19168352601483019190915260f01b6001600160f01b031916603482015260360190565b6001600160a01b0391909116815260200190565b60006040820160408352808551808352606085019150602092506060838202860101838801855b838110156132e557878303605f19018552815180518085529087019087850190895b818110156132d057835163ffffffff16835292890192918901916001016132ae565b5050958701959350509085019060010161328c565b505080945050505063ffffffff841681840152509392505050565b6000610220828b835b600381101561332b57815160ff16835260209283019290910190600101613309565b5050506001600160a01b038a166060840152608083018190526133508184018a613132565b91505061336060a08301886131bd565b61336d60e083018761320c565b61337b6101008301866131e6565b6133896101a0830185613190565b826102008301529998505050505050505050565b90815260200190565b91825261ffff16602082015260400190565b83815261ffff8316602082015260608101600583106133d357fe5b826040830152949350505050565b92835261ffff91909116602083015260ff16604082015260600190565b6020808252601b908201527f496e76616c69642063656e737573206f726967696e2076616c75650000000000604082015260600190565b602080825260119082015270496e76616c6964206e616d65737061636560781b604082015260600190565b6020808252600e908201526d092dcecc2d8d2c840d8cadccee8d60931b604082015260600190565b602080825260129082015271125b9d985b1a5908189b1bd8dad0dbdd5b9d60721b604082015260600190565b60208082526010908201526f139bc81c5d595cdd1a5bdb90dbdd5b9d60821b604082015260600190565b6020808252600c908201526b155b985d5d1a1bdc9a5e995960a21b604082015260600190565b60208082526011908201527037b7363ca1b7b73a3930b1ba27bbb732b960791b604082015260600190565b6020808252600c908201526b4e6f2063656e73757355726960a01b604082015260600190565b602080825260099082015268139bdd08199bdd5b9960ba1b604082015260600190565b602080825260149082015273151bdad95b881b9bdd081c9959da5cdd195c995960621b604082015260600190565b602080825260129082015271141c9bd8d95cdcc81b9bdd081cd95c9a585b60721b604082015260600190565b60208082526010908201526f416c726561647920696e61637469766560801b604082015260600190565b6020808252600e908201526d496e76616c696420656e7469747960901b604082015260600190565b6020808252600b908201526a4e6f206d6574616461746160a81b604082015260600190565b6020808252601190820152704e6f7420696e7465727275707469626c6560781b604082015260600190565b60208082526013908201527224b73b30b634b210383932b232b1b2b9b9b7b960691b604082015260600190565b60208082526019908201527f556e737570706f727465642063656e737573206f726967696e00000000000000604082015260600190565b602080825260129082015271496e73756666696369656e742066756e647360701b604082015260600190565b602080825260139082015272496e76616c696420737461727420626c6f636b60681b604082015260600190565b6020808252600f908201526e21b0b713ba1031329034ba39b2b63360891b604082015260600190565b6020808252600b908201526a4e6f206d617856616c756560a81b604082015260600190565b602080825260129082015271141c9bd8d95cdcc81d195c9b5a5b985d195960721b604082015260600190565b6020808252818101527f556e696e7465727275707469626c65206e6565647320626c6f636b436f756e74604082015260600190565b602080825260089082015267496e61637469766560c01b604082015260600190565b6020808252600e908201526d139bc810d95b9cdd5cc8149bdbdd60921b604082015260600190565b6020808252600890820152674e6f20766f74657360c01b604082015260600190565b60208082526025908201527f4175746f207374617274206973206e6565646564206f6e2045564d2070726f63604082015264657373657360d81b606082015260800190565b6020808252600d908201526c139bc818d95b9cdd5cd49bdbdd609a1b604082015260600190565b6020808252600e908201526d139bdd08184818dbdb9d1c9858dd60921b604082015260600190565b6020808252602b908201527f44796e616d69632063656e737573206e6f7420616c6c6f776564206f6e20455660408201526a4d2070726f63657373657360a81b606082015260800190565b60208082526017908201527f43616e63656c6564206f7220616c726561647920736574000000000000000000604082015260600190565b6020808252600e908201526d416c72656164792061637469766560901b604082015260600190565b6020808252601d908201527f4e6f7420666f756e643a20547279206f6e207072656465636573736f72000000604082015260600190565b60208082526010908201526f526561642d6f6e6c792063656e73757360801b604082015260600190565b60208082526021908201527f4175746f207374617274207265717569726573206120737461727420626c6f636040820152606b60f81b606082015260800190565b602080825260119082015270105b1c9958591e481858dd1a5d985d1959607a1b604082015260600190565b602080825260159082015274496e76616c696420746f6b656e206164647265737360581b604082015260600190565b6020808252600d908201526c4e6f2043656e7375732055524960981b604082015260600190565b60208082526011908201527050726f63657373206e6f7420726561647960781b604082015260600190565b6020808252600b908201526a26bab9ba103234b33332b960a91b604082015260600190565b6020808252600890820152676f766572666c6f7760c01b604082015260600190565b60208082526010908201526f125b9d985b1a59081b585e10dbdd5b9d60821b604082015260600190565b6020808252600d908201526c2737ba1037b33316b1b430b4b760991b604082015260600190565b6020808252602a908201527f496e7465727275707469626c65206e6f7420616c6c6f776564206f6e2045564d6040820152692070726f63657373657360b01b606082015260800190565b6020808252600e908201526d4d7573742062652061637469766560901b604082015260600190565b6020808252600a90820152694e6f74206f7261636c6560b01b604082015260600190565b602080825260139082015272496e76616c69642073746174757320636f646560681b604082015260600190565b60208082526019908201527f416c7265616479206861732061207072656465636573736f7200000000000000604082015260600190565b61ffff9290921682526001600160a01b0316602082015260400190565b9182526001600160a01b0316602082015260400190565b60405181810167ffffffffffffffff81118282101715613cbd57600080fd5b604052919050565b600067ffffffffffffffff821115613cdb578081fd5b5060209081020190565b600067ffffffffffffffff821115613cfb578081fd5b5060200290565b600067ffffffffffffffff821115613d18578081fd5b50601f01601f191660200190565b60005b83811015613d41578181015183820152602001613d29565b838111156131b75750506000910152565b6001600160a01b0381168114611aac57600080fd5b60058110611aac57600080fd5b61ffff81168114611aac57600080fd5b63ffffffff81168114611aac57600080fd5b60ff81168114611aac57600080fdfea2646970667358221220b1f53a00c44934c51085892f65c9d11df77cad663674f1163861dd5c54bfde5064736f6c634300060c0033"

// DeployProcesses deploys a new Ethereum contract, binding an instance of Processes to it.
func DeployProcesses(auth *bind.TransactOpts, backend bind.ContractBackend, predecessor common.Address, namespace common.Address, tokenStorageProof common.Address) (common.Address, *types.Transaction, *Processes, error) {
	parsed, err := abi.JSON(strings.NewReader(ProcessesABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ProcessesBin), backend, predecessor, namespace, tokenStorageProof)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Processes{ProcessesCaller: ProcessesCaller{contract: contract}, ProcessesTransactor: ProcessesTransactor{contract: contract}, ProcessesFilterer: ProcessesFilterer{contract: contract}}, nil
}

// Processes is an auto generated Go binding around an Ethereum contract.
type Processes struct {
	ProcessesCaller     // Read-only binding to the contract
	ProcessesTransactor // Write-only binding to the contract
	ProcessesFilterer   // Log filterer for contract events
}

// ProcessesCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProcessesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProcessesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProcessesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProcessesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProcessesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProcessesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProcessesSession struct {
	Contract     *Processes        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProcessesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProcessesCallerSession struct {
	Contract *ProcessesCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ProcessesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProcessesTransactorSession struct {
	Contract     *ProcessesTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ProcessesRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProcessesRaw struct {
	Contract *Processes // Generic contract binding to access the raw methods on
}

// ProcessesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProcessesCallerRaw struct {
	Contract *ProcessesCaller // Generic read-only contract binding to access the raw methods on
}

// ProcessesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProcessesTransactorRaw struct {
	Contract *ProcessesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProcesses creates a new instance of Processes, bound to a specific deployed contract.
func NewProcesses(address common.Address, backend bind.ContractBackend) (*Processes, error) {
	contract, err := bindProcesses(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Processes{ProcessesCaller: ProcessesCaller{contract: contract}, ProcessesTransactor: ProcessesTransactor{contract: contract}, ProcessesFilterer: ProcessesFilterer{contract: contract}}, nil
}

// NewProcessesCaller creates a new read-only instance of Processes, bound to a specific deployed contract.
func NewProcessesCaller(address common.Address, caller bind.ContractCaller) (*ProcessesCaller, error) {
	contract, err := bindProcesses(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProcessesCaller{contract: contract}, nil
}

// NewProcessesTransactor creates a new write-only instance of Processes, bound to a specific deployed contract.
func NewProcessesTransactor(address common.Address, transactor bind.ContractTransactor) (*ProcessesTransactor, error) {
	contract, err := bindProcesses(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProcessesTransactor{contract: contract}, nil
}

// NewProcessesFilterer creates a new log filterer instance of Processes, bound to a specific deployed contract.
func NewProcessesFilterer(address common.Address, filterer bind.ContractFilterer) (*ProcessesFilterer, error) {
	contract, err := bindProcesses(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProcessesFilterer{contract: contract}, nil
}

// bindProcesses binds a generic wrapper to an already deployed contract.
func bindProcesses(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProcessesABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Processes *ProcessesRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Processes.Contract.ProcessesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Processes *ProcessesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Processes.Contract.ProcessesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Processes *ProcessesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Processes.Contract.ProcessesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Processes *ProcessesCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Processes.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Processes *ProcessesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Processes.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Processes *ProcessesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Processes.Contract.contract.Transact(opts, method, params...)
}

// ActivationBlock is a free data retrieval call binding the contract method 0x80faa3d2.
//
// Solidity: function activationBlock() view returns(uint256)
func (_Processes *ProcessesCaller) ActivationBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "activationBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ActivationBlock is a free data retrieval call binding the contract method 0x80faa3d2.
//
// Solidity: function activationBlock() view returns(uint256)
func (_Processes *ProcessesSession) ActivationBlock() (*big.Int, error) {
	return _Processes.Contract.ActivationBlock(&_Processes.CallOpts)
}

// ActivationBlock is a free data retrieval call binding the contract method 0x80faa3d2.
//
// Solidity: function activationBlock() view returns(uint256)
func (_Processes *ProcessesCallerSession) ActivationBlock() (*big.Int, error) {
	return _Processes.Contract.ActivationBlock(&_Processes.CallOpts)
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 processId) view returns(uint8[3] mode_envelopeType_censusOrigin, address entityAddress, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8 status, uint8[5] questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[3] maxTotalCost_costExponent_namespace, uint256 evmBlockHeight)
func (_Processes *ProcessesCaller) Get(opts *bind.CallOpts, processId [32]byte) (struct {
	ModeEnvelopeTypeCensusOrigin                                [3]uint8
	EntityAddress                                               common.Address
	MetadataCensusRootCensusUri                                 [3]string
	StartBlockBlockCount                                        [2]uint32
	Status                                                      uint8
	QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites [5]uint8
	MaxTotalCostCostExponentNamespace                           [3]uint16
	EvmBlockHeight                                              *big.Int
}, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "get", processId)

	outstruct := new(struct {
		ModeEnvelopeTypeCensusOrigin                                [3]uint8
		EntityAddress                                               common.Address
		MetadataCensusRootCensusUri                                 [3]string
		StartBlockBlockCount                                        [2]uint32
		Status                                                      uint8
		QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites [5]uint8
		MaxTotalCostCostExponentNamespace                           [3]uint16
		EvmBlockHeight                                              *big.Int
	})

	outstruct.ModeEnvelopeTypeCensusOrigin = out[0].([3]uint8)
	outstruct.EntityAddress = out[1].(common.Address)
	outstruct.MetadataCensusRootCensusUri = out[2].([3]string)
	outstruct.StartBlockBlockCount = out[3].([2]uint32)
	outstruct.Status = out[4].(uint8)
	outstruct.QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites = out[5].([5]uint8)
	outstruct.MaxTotalCostCostExponentNamespace = out[6].([3]uint16)
	outstruct.EvmBlockHeight = out[7].(*big.Int)

	return *outstruct, err

}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 processId) view returns(uint8[3] mode_envelopeType_censusOrigin, address entityAddress, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8 status, uint8[5] questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[3] maxTotalCost_costExponent_namespace, uint256 evmBlockHeight)
func (_Processes *ProcessesSession) Get(processId [32]byte) (struct {
	ModeEnvelopeTypeCensusOrigin                                [3]uint8
	EntityAddress                                               common.Address
	MetadataCensusRootCensusUri                                 [3]string
	StartBlockBlockCount                                        [2]uint32
	Status                                                      uint8
	QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites [5]uint8
	MaxTotalCostCostExponentNamespace                           [3]uint16
	EvmBlockHeight                                              *big.Int
}, error) {
	return _Processes.Contract.Get(&_Processes.CallOpts, processId)
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 processId) view returns(uint8[3] mode_envelopeType_censusOrigin, address entityAddress, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8 status, uint8[5] questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[3] maxTotalCost_costExponent_namespace, uint256 evmBlockHeight)
func (_Processes *ProcessesCallerSession) Get(processId [32]byte) (struct {
	ModeEnvelopeTypeCensusOrigin                                [3]uint8
	EntityAddress                                               common.Address
	MetadataCensusRootCensusUri                                 [3]string
	StartBlockBlockCount                                        [2]uint32
	Status                                                      uint8
	QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites [5]uint8
	MaxTotalCostCostExponentNamespace                           [3]uint16
	EvmBlockHeight                                              *big.Int
}, error) {
	return _Processes.Contract.Get(&_Processes.CallOpts, processId)
}

// GetCreationInstance is a free data retrieval call binding the contract method 0x43327872.
//
// Solidity: function getCreationInstance(bytes32 processId) view returns(address)
func (_Processes *ProcessesCaller) GetCreationInstance(opts *bind.CallOpts, processId [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getCreationInstance", processId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetCreationInstance is a free data retrieval call binding the contract method 0x43327872.
//
// Solidity: function getCreationInstance(bytes32 processId) view returns(address)
func (_Processes *ProcessesSession) GetCreationInstance(processId [32]byte) (common.Address, error) {
	return _Processes.Contract.GetCreationInstance(&_Processes.CallOpts, processId)
}

// GetCreationInstance is a free data retrieval call binding the contract method 0x43327872.
//
// Solidity: function getCreationInstance(bytes32 processId) view returns(address)
func (_Processes *ProcessesCallerSession) GetCreationInstance(processId [32]byte) (common.Address, error) {
	return _Processes.Contract.GetCreationInstance(&_Processes.CallOpts, processId)
}

// GetEntityProcessCount is a free data retrieval call binding the contract method 0xf2bcb15e.
//
// Solidity: function getEntityProcessCount(address entityAddress) view returns(uint256)
func (_Processes *ProcessesCaller) GetEntityProcessCount(opts *bind.CallOpts, entityAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getEntityProcessCount", entityAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEntityProcessCount is a free data retrieval call binding the contract method 0xf2bcb15e.
//
// Solidity: function getEntityProcessCount(address entityAddress) view returns(uint256)
func (_Processes *ProcessesSession) GetEntityProcessCount(entityAddress common.Address) (*big.Int, error) {
	return _Processes.Contract.GetEntityProcessCount(&_Processes.CallOpts, entityAddress)
}

// GetEntityProcessCount is a free data retrieval call binding the contract method 0xf2bcb15e.
//
// Solidity: function getEntityProcessCount(address entityAddress) view returns(uint256)
func (_Processes *ProcessesCallerSession) GetEntityProcessCount(entityAddress common.Address) (*big.Int, error) {
	return _Processes.Contract.GetEntityProcessCount(&_Processes.CallOpts, entityAddress)
}

// GetNextProcessId is a free data retrieval call binding the contract method 0x1f496623.
//
// Solidity: function getNextProcessId(address entityAddress, uint16 namespace) view returns(bytes32)
func (_Processes *ProcessesCaller) GetNextProcessId(opts *bind.CallOpts, entityAddress common.Address, namespace uint16) ([32]byte, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getNextProcessId", entityAddress, namespace)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetNextProcessId is a free data retrieval call binding the contract method 0x1f496623.
//
// Solidity: function getNextProcessId(address entityAddress, uint16 namespace) view returns(bytes32)
func (_Processes *ProcessesSession) GetNextProcessId(entityAddress common.Address, namespace uint16) ([32]byte, error) {
	return _Processes.Contract.GetNextProcessId(&_Processes.CallOpts, entityAddress, namespace)
}

// GetNextProcessId is a free data retrieval call binding the contract method 0x1f496623.
//
// Solidity: function getNextProcessId(address entityAddress, uint16 namespace) view returns(bytes32)
func (_Processes *ProcessesCallerSession) GetNextProcessId(entityAddress common.Address, namespace uint16) ([32]byte, error) {
	return _Processes.Contract.GetNextProcessId(&_Processes.CallOpts, entityAddress, namespace)
}

// GetParamsSignature is a free data retrieval call binding the contract method 0x317daac5.
//
// Solidity: function getParamsSignature(bytes32 processId) view returns(bytes32)
func (_Processes *ProcessesCaller) GetParamsSignature(opts *bind.CallOpts, processId [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getParamsSignature", processId)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetParamsSignature is a free data retrieval call binding the contract method 0x317daac5.
//
// Solidity: function getParamsSignature(bytes32 processId) view returns(bytes32)
func (_Processes *ProcessesSession) GetParamsSignature(processId [32]byte) ([32]byte, error) {
	return _Processes.Contract.GetParamsSignature(&_Processes.CallOpts, processId)
}

// GetParamsSignature is a free data retrieval call binding the contract method 0x317daac5.
//
// Solidity: function getParamsSignature(bytes32 processId) view returns(bytes32)
func (_Processes *ProcessesCallerSession) GetParamsSignature(processId [32]byte) ([32]byte, error) {
	return _Processes.Contract.GetParamsSignature(&_Processes.CallOpts, processId)
}

// GetProcessId is a free data retrieval call binding the contract method 0x305097bb.
//
// Solidity: function getProcessId(address entityAddress, uint256 processCountIndex, uint16 namespace) pure returns(bytes32)
func (_Processes *ProcessesCaller) GetProcessId(opts *bind.CallOpts, entityAddress common.Address, processCountIndex *big.Int, namespace uint16) ([32]byte, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getProcessId", entityAddress, processCountIndex, namespace)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetProcessId is a free data retrieval call binding the contract method 0x305097bb.
//
// Solidity: function getProcessId(address entityAddress, uint256 processCountIndex, uint16 namespace) pure returns(bytes32)
func (_Processes *ProcessesSession) GetProcessId(entityAddress common.Address, processCountIndex *big.Int, namespace uint16) ([32]byte, error) {
	return _Processes.Contract.GetProcessId(&_Processes.CallOpts, entityAddress, processCountIndex, namespace)
}

// GetProcessId is a free data retrieval call binding the contract method 0x305097bb.
//
// Solidity: function getProcessId(address entityAddress, uint256 processCountIndex, uint16 namespace) pure returns(bytes32)
func (_Processes *ProcessesCallerSession) GetProcessId(entityAddress common.Address, processCountIndex *big.Int, namespace uint16) ([32]byte, error) {
	return _Processes.Contract.GetProcessId(&_Processes.CallOpts, entityAddress, processCountIndex, namespace)
}

// GetResults is a free data retrieval call binding the contract method 0x46475c4c.
//
// Solidity: function getResults(bytes32 processId) view returns(uint32[][] tally, uint32 height)
func (_Processes *ProcessesCaller) GetResults(opts *bind.CallOpts, processId [32]byte) (struct {
	Tally  [][]uint32
	Height uint32
}, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getResults", processId)

	outstruct := new(struct {
		Tally  [][]uint32
		Height uint32
	})

	outstruct.Tally = out[0].([][]uint32)
	outstruct.Height = out[1].(uint32)

	return *outstruct, err

}

// GetResults is a free data retrieval call binding the contract method 0x46475c4c.
//
// Solidity: function getResults(bytes32 processId) view returns(uint32[][] tally, uint32 height)
func (_Processes *ProcessesSession) GetResults(processId [32]byte) (struct {
	Tally  [][]uint32
	Height uint32
}, error) {
	return _Processes.Contract.GetResults(&_Processes.CallOpts, processId)
}

// GetResults is a free data retrieval call binding the contract method 0x46475c4c.
//
// Solidity: function getResults(bytes32 processId) view returns(uint32[][] tally, uint32 height)
func (_Processes *ProcessesCallerSession) GetResults(processId [32]byte) (struct {
	Tally  [][]uint32
	Height uint32
}, error) {
	return _Processes.Contract.GetResults(&_Processes.CallOpts, processId)
}

// NamespaceAddress is a free data retrieval call binding the contract method 0x34a2cdbc.
//
// Solidity: function namespaceAddress() view returns(address)
func (_Processes *ProcessesCaller) NamespaceAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "namespaceAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NamespaceAddress is a free data retrieval call binding the contract method 0x34a2cdbc.
//
// Solidity: function namespaceAddress() view returns(address)
func (_Processes *ProcessesSession) NamespaceAddress() (common.Address, error) {
	return _Processes.Contract.NamespaceAddress(&_Processes.CallOpts)
}

// NamespaceAddress is a free data retrieval call binding the contract method 0x34a2cdbc.
//
// Solidity: function namespaceAddress() view returns(address)
func (_Processes *ProcessesCallerSession) NamespaceAddress() (common.Address, error) {
	return _Processes.Contract.NamespaceAddress(&_Processes.CallOpts)
}

// PredecessorAddress is a free data retrieval call binding the contract method 0x08ffce24.
//
// Solidity: function predecessorAddress() view returns(address)
func (_Processes *ProcessesCaller) PredecessorAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "predecessorAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PredecessorAddress is a free data retrieval call binding the contract method 0x08ffce24.
//
// Solidity: function predecessorAddress() view returns(address)
func (_Processes *ProcessesSession) PredecessorAddress() (common.Address, error) {
	return _Processes.Contract.PredecessorAddress(&_Processes.CallOpts)
}

// PredecessorAddress is a free data retrieval call binding the contract method 0x08ffce24.
//
// Solidity: function predecessorAddress() view returns(address)
func (_Processes *ProcessesCallerSession) PredecessorAddress() (common.Address, error) {
	return _Processes.Contract.PredecessorAddress(&_Processes.CallOpts)
}

// SuccessorAddress is a free data retrieval call binding the contract method 0x1d88c05b.
//
// Solidity: function successorAddress() view returns(address)
func (_Processes *ProcessesCaller) SuccessorAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "successorAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SuccessorAddress is a free data retrieval call binding the contract method 0x1d88c05b.
//
// Solidity: function successorAddress() view returns(address)
func (_Processes *ProcessesSession) SuccessorAddress() (common.Address, error) {
	return _Processes.Contract.SuccessorAddress(&_Processes.CallOpts)
}

// SuccessorAddress is a free data retrieval call binding the contract method 0x1d88c05b.
//
// Solidity: function successorAddress() view returns(address)
func (_Processes *ProcessesCallerSession) SuccessorAddress() (common.Address, error) {
	return _Processes.Contract.SuccessorAddress(&_Processes.CallOpts)
}

// TokenStorageProofAddress is a free data retrieval call binding the contract method 0xc876091f.
//
// Solidity: function tokenStorageProofAddress() view returns(address)
func (_Processes *ProcessesCaller) TokenStorageProofAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "tokenStorageProofAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenStorageProofAddress is a free data retrieval call binding the contract method 0xc876091f.
//
// Solidity: function tokenStorageProofAddress() view returns(address)
func (_Processes *ProcessesSession) TokenStorageProofAddress() (common.Address, error) {
	return _Processes.Contract.TokenStorageProofAddress(&_Processes.CallOpts)
}

// TokenStorageProofAddress is a free data retrieval call binding the contract method 0xc876091f.
//
// Solidity: function tokenStorageProofAddress() view returns(address)
func (_Processes *ProcessesCallerSession) TokenStorageProofAddress() (common.Address, error) {
	return _Processes.Contract.TokenStorageProofAddress(&_Processes.CallOpts)
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_Processes *ProcessesTransactor) Activate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "activate")
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_Processes *ProcessesSession) Activate() (*types.Transaction, error) {
	return _Processes.Contract.Activate(&_Processes.TransactOpts)
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_Processes *ProcessesTransactorSession) Activate() (*types.Transaction, error) {
	return _Processes.Contract.Activate(&_Processes.TransactOpts)
}

// ActivateSuccessor is a paid mutator transaction binding the contract method 0x81c0de75.
//
// Solidity: function activateSuccessor(address successor) returns()
func (_Processes *ProcessesTransactor) ActivateSuccessor(opts *bind.TransactOpts, successor common.Address) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "activateSuccessor", successor)
}

// ActivateSuccessor is a paid mutator transaction binding the contract method 0x81c0de75.
//
// Solidity: function activateSuccessor(address successor) returns()
func (_Processes *ProcessesSession) ActivateSuccessor(successor common.Address) (*types.Transaction, error) {
	return _Processes.Contract.ActivateSuccessor(&_Processes.TransactOpts, successor)
}

// ActivateSuccessor is a paid mutator transaction binding the contract method 0x81c0de75.
//
// Solidity: function activateSuccessor(address successor) returns()
func (_Processes *ProcessesTransactorSession) ActivateSuccessor(successor common.Address) (*types.Transaction, error) {
	return _Processes.Contract.ActivateSuccessor(&_Processes.TransactOpts, successor)
}

// IncrementQuestionIndex is a paid mutator transaction binding the contract method 0x74da4adb.
//
// Solidity: function incrementQuestionIndex(bytes32 processId) returns()
func (_Processes *ProcessesTransactor) IncrementQuestionIndex(opts *bind.TransactOpts, processId [32]byte) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "incrementQuestionIndex", processId)
}

// IncrementQuestionIndex is a paid mutator transaction binding the contract method 0x74da4adb.
//
// Solidity: function incrementQuestionIndex(bytes32 processId) returns()
func (_Processes *ProcessesSession) IncrementQuestionIndex(processId [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.IncrementQuestionIndex(&_Processes.TransactOpts, processId)
}

// IncrementQuestionIndex is a paid mutator transaction binding the contract method 0x74da4adb.
//
// Solidity: function incrementQuestionIndex(bytes32 processId) returns()
func (_Processes *ProcessesTransactorSession) IncrementQuestionIndex(processId [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.IncrementQuestionIndex(&_Processes.TransactOpts, processId)
}

// NewProcess is a paid mutator transaction binding the contract method 0x81bc8d90.
//
// Solidity: function newProcess(uint8[3] mode_envelopeType_censusOrigin, address tokenContractAddress, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8[4] questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[3] maxTotalCost_costExponent_namespace, uint256 evmBlockHeight, bytes32 paramsSignature) returns()
func (_Processes *ProcessesTransactor) NewProcess(opts *bind.TransactOpts, mode_envelopeType_censusOrigin [3]uint8, tokenContractAddress common.Address, metadata_censusRoot_censusUri [3]string, startBlock_blockCount [2]uint32, questionCount_maxCount_maxValue_maxVoteOverwrites [4]uint8, maxTotalCost_costExponent_namespace [3]uint16, evmBlockHeight *big.Int, paramsSignature [32]byte) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "newProcess", mode_envelopeType_censusOrigin, tokenContractAddress, metadata_censusRoot_censusUri, startBlock_blockCount, questionCount_maxCount_maxValue_maxVoteOverwrites, maxTotalCost_costExponent_namespace, evmBlockHeight, paramsSignature)
}

// NewProcess is a paid mutator transaction binding the contract method 0x81bc8d90.
//
// Solidity: function newProcess(uint8[3] mode_envelopeType_censusOrigin, address tokenContractAddress, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8[4] questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[3] maxTotalCost_costExponent_namespace, uint256 evmBlockHeight, bytes32 paramsSignature) returns()
func (_Processes *ProcessesSession) NewProcess(mode_envelopeType_censusOrigin [3]uint8, tokenContractAddress common.Address, metadata_censusRoot_censusUri [3]string, startBlock_blockCount [2]uint32, questionCount_maxCount_maxValue_maxVoteOverwrites [4]uint8, maxTotalCost_costExponent_namespace [3]uint16, evmBlockHeight *big.Int, paramsSignature [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.NewProcess(&_Processes.TransactOpts, mode_envelopeType_censusOrigin, tokenContractAddress, metadata_censusRoot_censusUri, startBlock_blockCount, questionCount_maxCount_maxValue_maxVoteOverwrites, maxTotalCost_costExponent_namespace, evmBlockHeight, paramsSignature)
}

// NewProcess is a paid mutator transaction binding the contract method 0x81bc8d90.
//
// Solidity: function newProcess(uint8[3] mode_envelopeType_censusOrigin, address tokenContractAddress, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8[4] questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[3] maxTotalCost_costExponent_namespace, uint256 evmBlockHeight, bytes32 paramsSignature) returns()
func (_Processes *ProcessesTransactorSession) NewProcess(mode_envelopeType_censusOrigin [3]uint8, tokenContractAddress common.Address, metadata_censusRoot_censusUri [3]string, startBlock_blockCount [2]uint32, questionCount_maxCount_maxValue_maxVoteOverwrites [4]uint8, maxTotalCost_costExponent_namespace [3]uint16, evmBlockHeight *big.Int, paramsSignature [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.NewProcess(&_Processes.TransactOpts, mode_envelopeType_censusOrigin, tokenContractAddress, metadata_censusRoot_censusUri, startBlock_blockCount, questionCount_maxCount_maxValue_maxVoteOverwrites, maxTotalCost_costExponent_namespace, evmBlockHeight, paramsSignature)
}

// SetCensus is a paid mutator transaction binding the contract method 0x1795010d.
//
// Solidity: function setCensus(bytes32 processId, string censusRoot, string censusUri) returns()
func (_Processes *ProcessesTransactor) SetCensus(opts *bind.TransactOpts, processId [32]byte, censusRoot string, censusUri string) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "setCensus", processId, censusRoot, censusUri)
}

// SetCensus is a paid mutator transaction binding the contract method 0x1795010d.
//
// Solidity: function setCensus(bytes32 processId, string censusRoot, string censusUri) returns()
func (_Processes *ProcessesSession) SetCensus(processId [32]byte, censusRoot string, censusUri string) (*types.Transaction, error) {
	return _Processes.Contract.SetCensus(&_Processes.TransactOpts, processId, censusRoot, censusUri)
}

// SetCensus is a paid mutator transaction binding the contract method 0x1795010d.
//
// Solidity: function setCensus(bytes32 processId, string censusRoot, string censusUri) returns()
func (_Processes *ProcessesTransactorSession) SetCensus(processId [32]byte, censusRoot string, censusUri string) (*types.Transaction, error) {
	return _Processes.Contract.SetCensus(&_Processes.TransactOpts, processId, censusRoot, censusUri)
}

// SetNamespaceAddress is a paid mutator transaction binding the contract method 0x77882df4.
//
// Solidity: function setNamespaceAddress(address namespace) returns()
func (_Processes *ProcessesTransactor) SetNamespaceAddress(opts *bind.TransactOpts, namespace common.Address) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "setNamespaceAddress", namespace)
}

// SetNamespaceAddress is a paid mutator transaction binding the contract method 0x77882df4.
//
// Solidity: function setNamespaceAddress(address namespace) returns()
func (_Processes *ProcessesSession) SetNamespaceAddress(namespace common.Address) (*types.Transaction, error) {
	return _Processes.Contract.SetNamespaceAddress(&_Processes.TransactOpts, namespace)
}

// SetNamespaceAddress is a paid mutator transaction binding the contract method 0x77882df4.
//
// Solidity: function setNamespaceAddress(address namespace) returns()
func (_Processes *ProcessesTransactorSession) SetNamespaceAddress(namespace common.Address) (*types.Transaction, error) {
	return _Processes.Contract.SetNamespaceAddress(&_Processes.TransactOpts, namespace)
}

// SetResults is a paid mutator transaction binding the contract method 0xff5956ed.
//
// Solidity: function setResults(bytes32 processId, uint32[][] tally, uint32 height) returns()
func (_Processes *ProcessesTransactor) SetResults(opts *bind.TransactOpts, processId [32]byte, tally [][]uint32, height uint32) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "setResults", processId, tally, height)
}

// SetResults is a paid mutator transaction binding the contract method 0xff5956ed.
//
// Solidity: function setResults(bytes32 processId, uint32[][] tally, uint32 height) returns()
func (_Processes *ProcessesSession) SetResults(processId [32]byte, tally [][]uint32, height uint32) (*types.Transaction, error) {
	return _Processes.Contract.SetResults(&_Processes.TransactOpts, processId, tally, height)
}

// SetResults is a paid mutator transaction binding the contract method 0xff5956ed.
//
// Solidity: function setResults(bytes32 processId, uint32[][] tally, uint32 height) returns()
func (_Processes *ProcessesTransactorSession) SetResults(processId [32]byte, tally [][]uint32, height uint32) (*types.Transaction, error) {
	return _Processes.Contract.SetResults(&_Processes.TransactOpts, processId, tally, height)
}

// SetStatus is a paid mutator transaction binding the contract method 0x8de654ba.
//
// Solidity: function setStatus(bytes32 processId, uint8 newStatus) returns()
func (_Processes *ProcessesTransactor) SetStatus(opts *bind.TransactOpts, processId [32]byte, newStatus uint8) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "setStatus", processId, newStatus)
}

// SetStatus is a paid mutator transaction binding the contract method 0x8de654ba.
//
// Solidity: function setStatus(bytes32 processId, uint8 newStatus) returns()
func (_Processes *ProcessesSession) SetStatus(processId [32]byte, newStatus uint8) (*types.Transaction, error) {
	return _Processes.Contract.SetStatus(&_Processes.TransactOpts, processId, newStatus)
}

// SetStatus is a paid mutator transaction binding the contract method 0x8de654ba.
//
// Solidity: function setStatus(bytes32 processId, uint8 newStatus) returns()
func (_Processes *ProcessesTransactorSession) SetStatus(processId [32]byte, newStatus uint8) (*types.Transaction, error) {
	return _Processes.Contract.SetStatus(&_Processes.TransactOpts, processId, newStatus)
}

// ProcessesActivatedIterator is returned from FilterActivated and is used to iterate over the raw logs and unpacked data for Activated events raised by the Processes contract.
type ProcessesActivatedIterator struct {
	Event *ProcessesActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesActivated represents a Activated event raised by the Processes contract.
type ProcessesActivated struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterActivated is a free log retrieval operation binding the contract event 0x3ec796be1be7d03bff3a62b9fa594a60e947c1809bced06d929f145308ae57ce.
//
// Solidity: event Activated(uint256 blockNumber)
func (_Processes *ProcessesFilterer) FilterActivated(opts *bind.FilterOpts) (*ProcessesActivatedIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "Activated")
	if err != nil {
		return nil, err
	}
	return &ProcessesActivatedIterator{contract: _Processes.contract, event: "Activated", logs: logs, sub: sub}, nil
}

// WatchActivated is a free log subscription operation binding the contract event 0x3ec796be1be7d03bff3a62b9fa594a60e947c1809bced06d929f145308ae57ce.
//
// Solidity: event Activated(uint256 blockNumber)
func (_Processes *ProcessesFilterer) WatchActivated(opts *bind.WatchOpts, sink chan<- *ProcessesActivated) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "Activated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesActivated)
				if err := _Processes.contract.UnpackLog(event, "Activated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseActivated is a log parse operation binding the contract event 0x3ec796be1be7d03bff3a62b9fa594a60e947c1809bced06d929f145308ae57ce.
//
// Solidity: event Activated(uint256 blockNumber)
func (_Processes *ProcessesFilterer) ParseActivated(log types.Log) (*ProcessesActivated, error) {
	event := new(ProcessesActivated)
	if err := _Processes.contract.UnpackLog(event, "Activated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesActivatedSuccessorIterator is returned from FilterActivatedSuccessor and is used to iterate over the raw logs and unpacked data for ActivatedSuccessor events raised by the Processes contract.
type ProcessesActivatedSuccessorIterator struct {
	Event *ProcessesActivatedSuccessor // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesActivatedSuccessorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesActivatedSuccessor)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesActivatedSuccessor)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesActivatedSuccessorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesActivatedSuccessorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesActivatedSuccessor represents a ActivatedSuccessor event raised by the Processes contract.
type ProcessesActivatedSuccessor struct {
	BlockNumber *big.Int
	Successor   common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterActivatedSuccessor is a free log retrieval operation binding the contract event 0x1f8bdb9825a71b7560200e2279fd4b503ac6814e369318e761928502882ee11a.
//
// Solidity: event ActivatedSuccessor(uint256 blockNumber, address successor)
func (_Processes *ProcessesFilterer) FilterActivatedSuccessor(opts *bind.FilterOpts) (*ProcessesActivatedSuccessorIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "ActivatedSuccessor")
	if err != nil {
		return nil, err
	}
	return &ProcessesActivatedSuccessorIterator{contract: _Processes.contract, event: "ActivatedSuccessor", logs: logs, sub: sub}, nil
}

// WatchActivatedSuccessor is a free log subscription operation binding the contract event 0x1f8bdb9825a71b7560200e2279fd4b503ac6814e369318e761928502882ee11a.
//
// Solidity: event ActivatedSuccessor(uint256 blockNumber, address successor)
func (_Processes *ProcessesFilterer) WatchActivatedSuccessor(opts *bind.WatchOpts, sink chan<- *ProcessesActivatedSuccessor) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "ActivatedSuccessor")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesActivatedSuccessor)
				if err := _Processes.contract.UnpackLog(event, "ActivatedSuccessor", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseActivatedSuccessor is a log parse operation binding the contract event 0x1f8bdb9825a71b7560200e2279fd4b503ac6814e369318e761928502882ee11a.
//
// Solidity: event ActivatedSuccessor(uint256 blockNumber, address successor)
func (_Processes *ProcessesFilterer) ParseActivatedSuccessor(log types.Log) (*ProcessesActivatedSuccessor, error) {
	event := new(ProcessesActivatedSuccessor)
	if err := _Processes.contract.UnpackLog(event, "ActivatedSuccessor", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesCensusUpdatedIterator is returned from FilterCensusUpdated and is used to iterate over the raw logs and unpacked data for CensusUpdated events raised by the Processes contract.
type ProcessesCensusUpdatedIterator struct {
	Event *ProcessesCensusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesCensusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesCensusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesCensusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesCensusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesCensusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesCensusUpdated represents a CensusUpdated event raised by the Processes contract.
type ProcessesCensusUpdated struct {
	ProcessId [32]byte
	Namespace uint16
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCensusUpdated is a free log retrieval operation binding the contract event 0xe54b983ab80f8982da0bb83c59ca327de698b5d0780451eba9706b4ffe069211.
//
// Solidity: event CensusUpdated(bytes32 processId, uint16 namespace)
func (_Processes *ProcessesFilterer) FilterCensusUpdated(opts *bind.FilterOpts) (*ProcessesCensusUpdatedIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "CensusUpdated")
	if err != nil {
		return nil, err
	}
	return &ProcessesCensusUpdatedIterator{contract: _Processes.contract, event: "CensusUpdated", logs: logs, sub: sub}, nil
}

// WatchCensusUpdated is a free log subscription operation binding the contract event 0xe54b983ab80f8982da0bb83c59ca327de698b5d0780451eba9706b4ffe069211.
//
// Solidity: event CensusUpdated(bytes32 processId, uint16 namespace)
func (_Processes *ProcessesFilterer) WatchCensusUpdated(opts *bind.WatchOpts, sink chan<- *ProcessesCensusUpdated) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "CensusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesCensusUpdated)
				if err := _Processes.contract.UnpackLog(event, "CensusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCensusUpdated is a log parse operation binding the contract event 0xe54b983ab80f8982da0bb83c59ca327de698b5d0780451eba9706b4ffe069211.
//
// Solidity: event CensusUpdated(bytes32 processId, uint16 namespace)
func (_Processes *ProcessesFilterer) ParseCensusUpdated(log types.Log) (*ProcessesCensusUpdated, error) {
	event := new(ProcessesCensusUpdated)
	if err := _Processes.contract.UnpackLog(event, "CensusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesNamespaceAddressUpdatedIterator is returned from FilterNamespaceAddressUpdated and is used to iterate over the raw logs and unpacked data for NamespaceAddressUpdated events raised by the Processes contract.
type ProcessesNamespaceAddressUpdatedIterator struct {
	Event *ProcessesNamespaceAddressUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesNamespaceAddressUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesNamespaceAddressUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesNamespaceAddressUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesNamespaceAddressUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesNamespaceAddressUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesNamespaceAddressUpdated represents a NamespaceAddressUpdated event raised by the Processes contract.
type ProcessesNamespaceAddressUpdated struct {
	NamespaceAddr common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterNamespaceAddressUpdated is a free log retrieval operation binding the contract event 0x215ba443e028811c105c1bb484176ce9d9eec24ea7fb85c67a6bff78a04302b3.
//
// Solidity: event NamespaceAddressUpdated(address namespaceAddr)
func (_Processes *ProcessesFilterer) FilterNamespaceAddressUpdated(opts *bind.FilterOpts) (*ProcessesNamespaceAddressUpdatedIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "NamespaceAddressUpdated")
	if err != nil {
		return nil, err
	}
	return &ProcessesNamespaceAddressUpdatedIterator{contract: _Processes.contract, event: "NamespaceAddressUpdated", logs: logs, sub: sub}, nil
}

// WatchNamespaceAddressUpdated is a free log subscription operation binding the contract event 0x215ba443e028811c105c1bb484176ce9d9eec24ea7fb85c67a6bff78a04302b3.
//
// Solidity: event NamespaceAddressUpdated(address namespaceAddr)
func (_Processes *ProcessesFilterer) WatchNamespaceAddressUpdated(opts *bind.WatchOpts, sink chan<- *ProcessesNamespaceAddressUpdated) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "NamespaceAddressUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesNamespaceAddressUpdated)
				if err := _Processes.contract.UnpackLog(event, "NamespaceAddressUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNamespaceAddressUpdated is a log parse operation binding the contract event 0x215ba443e028811c105c1bb484176ce9d9eec24ea7fb85c67a6bff78a04302b3.
//
// Solidity: event NamespaceAddressUpdated(address namespaceAddr)
func (_Processes *ProcessesFilterer) ParseNamespaceAddressUpdated(log types.Log) (*ProcessesNamespaceAddressUpdated, error) {
	event := new(ProcessesNamespaceAddressUpdated)
	if err := _Processes.contract.UnpackLog(event, "NamespaceAddressUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesNewProcessIterator is returned from FilterNewProcess and is used to iterate over the raw logs and unpacked data for NewProcess events raised by the Processes contract.
type ProcessesNewProcessIterator struct {
	Event *ProcessesNewProcess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesNewProcessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesNewProcess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesNewProcess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesNewProcessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesNewProcessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesNewProcess represents a NewProcess event raised by the Processes contract.
type ProcessesNewProcess struct {
	ProcessId [32]byte
	Namespace uint16
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewProcess is a free log retrieval operation binding the contract event 0x2399440b5a42cbc7ba215c9c176f7cd16b511a8727c1f277635f3fce4649156e.
//
// Solidity: event NewProcess(bytes32 processId, uint16 namespace)
func (_Processes *ProcessesFilterer) FilterNewProcess(opts *bind.FilterOpts) (*ProcessesNewProcessIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "NewProcess")
	if err != nil {
		return nil, err
	}
	return &ProcessesNewProcessIterator{contract: _Processes.contract, event: "NewProcess", logs: logs, sub: sub}, nil
}

// WatchNewProcess is a free log subscription operation binding the contract event 0x2399440b5a42cbc7ba215c9c176f7cd16b511a8727c1f277635f3fce4649156e.
//
// Solidity: event NewProcess(bytes32 processId, uint16 namespace)
func (_Processes *ProcessesFilterer) WatchNewProcess(opts *bind.WatchOpts, sink chan<- *ProcessesNewProcess) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "NewProcess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesNewProcess)
				if err := _Processes.contract.UnpackLog(event, "NewProcess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewProcess is a log parse operation binding the contract event 0x2399440b5a42cbc7ba215c9c176f7cd16b511a8727c1f277635f3fce4649156e.
//
// Solidity: event NewProcess(bytes32 processId, uint16 namespace)
func (_Processes *ProcessesFilterer) ParseNewProcess(log types.Log) (*ProcessesNewProcess, error) {
	event := new(ProcessesNewProcess)
	if err := _Processes.contract.UnpackLog(event, "NewProcess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesQuestionIndexUpdatedIterator is returned from FilterQuestionIndexUpdated and is used to iterate over the raw logs and unpacked data for QuestionIndexUpdated events raised by the Processes contract.
type ProcessesQuestionIndexUpdatedIterator struct {
	Event *ProcessesQuestionIndexUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesQuestionIndexUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesQuestionIndexUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesQuestionIndexUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesQuestionIndexUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesQuestionIndexUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesQuestionIndexUpdated represents a QuestionIndexUpdated event raised by the Processes contract.
type ProcessesQuestionIndexUpdated struct {
	ProcessId [32]byte
	Namespace uint16
	NewIndex  uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterQuestionIndexUpdated is a free log retrieval operation binding the contract event 0x2e4d6a3a868975a1e47c2ddc05451ebdececff07e59871dbc6cbaf9364aa06c6.
//
// Solidity: event QuestionIndexUpdated(bytes32 processId, uint16 namespace, uint8 newIndex)
func (_Processes *ProcessesFilterer) FilterQuestionIndexUpdated(opts *bind.FilterOpts) (*ProcessesQuestionIndexUpdatedIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "QuestionIndexUpdated")
	if err != nil {
		return nil, err
	}
	return &ProcessesQuestionIndexUpdatedIterator{contract: _Processes.contract, event: "QuestionIndexUpdated", logs: logs, sub: sub}, nil
}

// WatchQuestionIndexUpdated is a free log subscription operation binding the contract event 0x2e4d6a3a868975a1e47c2ddc05451ebdececff07e59871dbc6cbaf9364aa06c6.
//
// Solidity: event QuestionIndexUpdated(bytes32 processId, uint16 namespace, uint8 newIndex)
func (_Processes *ProcessesFilterer) WatchQuestionIndexUpdated(opts *bind.WatchOpts, sink chan<- *ProcessesQuestionIndexUpdated) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "QuestionIndexUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesQuestionIndexUpdated)
				if err := _Processes.contract.UnpackLog(event, "QuestionIndexUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseQuestionIndexUpdated is a log parse operation binding the contract event 0x2e4d6a3a868975a1e47c2ddc05451ebdececff07e59871dbc6cbaf9364aa06c6.
//
// Solidity: event QuestionIndexUpdated(bytes32 processId, uint16 namespace, uint8 newIndex)
func (_Processes *ProcessesFilterer) ParseQuestionIndexUpdated(log types.Log) (*ProcessesQuestionIndexUpdated, error) {
	event := new(ProcessesQuestionIndexUpdated)
	if err := _Processes.contract.UnpackLog(event, "QuestionIndexUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesResultsAvailableIterator is returned from FilterResultsAvailable and is used to iterate over the raw logs and unpacked data for ResultsAvailable events raised by the Processes contract.
type ProcessesResultsAvailableIterator struct {
	Event *ProcessesResultsAvailable // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesResultsAvailableIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesResultsAvailable)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesResultsAvailable)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesResultsAvailableIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesResultsAvailableIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesResultsAvailable represents a ResultsAvailable event raised by the Processes contract.
type ProcessesResultsAvailable struct {
	ProcessId [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterResultsAvailable is a free log retrieval operation binding the contract event 0x5aff397e0d9bfad4e73dfd9c2da1d146ce7fe8cfd1a795dbf6b95b417236fa4c.
//
// Solidity: event ResultsAvailable(bytes32 processId)
func (_Processes *ProcessesFilterer) FilterResultsAvailable(opts *bind.FilterOpts) (*ProcessesResultsAvailableIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "ResultsAvailable")
	if err != nil {
		return nil, err
	}
	return &ProcessesResultsAvailableIterator{contract: _Processes.contract, event: "ResultsAvailable", logs: logs, sub: sub}, nil
}

// WatchResultsAvailable is a free log subscription operation binding the contract event 0x5aff397e0d9bfad4e73dfd9c2da1d146ce7fe8cfd1a795dbf6b95b417236fa4c.
//
// Solidity: event ResultsAvailable(bytes32 processId)
func (_Processes *ProcessesFilterer) WatchResultsAvailable(opts *bind.WatchOpts, sink chan<- *ProcessesResultsAvailable) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "ResultsAvailable")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesResultsAvailable)
				if err := _Processes.contract.UnpackLog(event, "ResultsAvailable", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseResultsAvailable is a log parse operation binding the contract event 0x5aff397e0d9bfad4e73dfd9c2da1d146ce7fe8cfd1a795dbf6b95b417236fa4c.
//
// Solidity: event ResultsAvailable(bytes32 processId)
func (_Processes *ProcessesFilterer) ParseResultsAvailable(log types.Log) (*ProcessesResultsAvailable, error) {
	event := new(ProcessesResultsAvailable)
	if err := _Processes.contract.UnpackLog(event, "ResultsAvailable", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesStatusUpdatedIterator is returned from FilterStatusUpdated and is used to iterate over the raw logs and unpacked data for StatusUpdated events raised by the Processes contract.
type ProcessesStatusUpdatedIterator struct {
	Event *ProcessesStatusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesStatusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesStatusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesStatusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesStatusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesStatusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesStatusUpdated represents a StatusUpdated event raised by the Processes contract.
type ProcessesStatusUpdated struct {
	ProcessId [32]byte
	Namespace uint16
	Status    uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStatusUpdated is a free log retrieval operation binding the contract event 0xe64955704069c81c54f3fcca4da180a400f40da1bac10b68a9b42c753aa7a7f8.
//
// Solidity: event StatusUpdated(bytes32 processId, uint16 namespace, uint8 status)
func (_Processes *ProcessesFilterer) FilterStatusUpdated(opts *bind.FilterOpts) (*ProcessesStatusUpdatedIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "StatusUpdated")
	if err != nil {
		return nil, err
	}
	return &ProcessesStatusUpdatedIterator{contract: _Processes.contract, event: "StatusUpdated", logs: logs, sub: sub}, nil
}

// WatchStatusUpdated is a free log subscription operation binding the contract event 0xe64955704069c81c54f3fcca4da180a400f40da1bac10b68a9b42c753aa7a7f8.
//
// Solidity: event StatusUpdated(bytes32 processId, uint16 namespace, uint8 status)
func (_Processes *ProcessesFilterer) WatchStatusUpdated(opts *bind.WatchOpts, sink chan<- *ProcessesStatusUpdated) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "StatusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesStatusUpdated)
				if err := _Processes.contract.UnpackLog(event, "StatusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStatusUpdated is a log parse operation binding the contract event 0xe64955704069c81c54f3fcca4da180a400f40da1bac10b68a9b42c753aa7a7f8.
//
// Solidity: event StatusUpdated(bytes32 processId, uint16 namespace, uint8 status)
func (_Processes *ProcessesFilterer) ParseStatusUpdated(log types.Log) (*ProcessesStatusUpdated, error) {
	event := new(ProcessesStatusUpdated)
	if err := _Processes.contract.UnpackLog(event, "StatusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
