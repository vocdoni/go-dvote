// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ProcessesABI is the input ABI used to generate the binding from.
const ProcessesABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"predecessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"namespace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resultsAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenStorageProof\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ethereumChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"procPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Activated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"successor\",\"type\":\"address\"}],\"name\":\"ActivatedSuccessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"namespace\",\"type\":\"uint32\"}],\"name\":\"CensusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"namespace\",\"type\":\"uint32\"}],\"name\":\"NewProcess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"processPrice\",\"type\":\"uint256\"}],\"name\":\"ProcessPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"namespace\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newIndex\",\"type\":\"uint8\"}],\"name\":\"QuestionIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"namespace\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"enumIProcessStore.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"successor\",\"type\":\"address\"}],\"name\":\"activateSuccessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"mode_envelopeType_censusOrigin\",\"type\":\"uint8[3]\"},{\"internalType\":\"address[2]\",\"name\":\"entityAddress_owner\",\"type\":\"address[2]\"},{\"internalType\":\"string[3]\",\"name\":\"metadata_censusRoot_censusUri\",\"type\":\"string[3]\"},{\"internalType\":\"uint32[2]\",\"name\":\"startBlock_blockCount\",\"type\":\"uint32[2]\"},{\"internalType\":\"enumIProcessStore.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8[5]\",\"name\":\"questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites\",\"type\":\"uint8[5]\"},{\"internalType\":\"uint16[2]\",\"name\":\"maxTotalCost_costExponent\",\"type\":\"uint16[2]\"},{\"internalType\":\"uint256\",\"name\":\"sourceBlockHeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getCreationInstance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entityAddress\",\"type\":\"address\"}],\"name\":\"getEntityProcessCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entityAddress\",\"type\":\"address\"}],\"name\":\"getNextProcessId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getParamsSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entityAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"processCountIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"namespaceIdNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"ethereumChainId\",\"type\":\"uint32\"}],\"name\":\"getProcessId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"incrementQuestionIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"namespaceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"namespaceId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"mode_envelopeType_censusOrigin\",\"type\":\"uint8[3]\"},{\"internalType\":\"string[2]\",\"name\":\"metadata_censusRoot\",\"type\":\"string[2]\"},{\"internalType\":\"uint32[2]\",\"name\":\"startBlock_blockCount\",\"type\":\"uint32[2]\"},{\"internalType\":\"uint8[4]\",\"name\":\"questionCount_maxCount_maxValue_maxVoteOverwrites\",\"type\":\"uint8[4]\"},{\"internalType\":\"uint16[2]\",\"name\":\"maxTotalCost_costExponent\",\"type\":\"uint16[2]\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceBlockHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"paramsSignature\",\"type\":\"bytes32\"}],\"name\":\"newProcessEvm\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"mode_envelopeType_censusOrigin\",\"type\":\"uint8[3]\"},{\"internalType\":\"string[3]\",\"name\":\"metadata_censusRoot_censusUri\",\"type\":\"string[3]\"},{\"internalType\":\"uint32[2]\",\"name\":\"startBlock_blockCount\",\"type\":\"uint32[2]\"},{\"internalType\":\"uint8[4]\",\"name\":\"questionCount_maxCount_maxValue_maxVoteOverwrites\",\"type\":\"uint8[4]\"},{\"internalType\":\"uint16[2]\",\"name\":\"maxTotalCost_costExponent\",\"type\":\"uint16[2]\"},{\"internalType\":\"bytes32\",\"name\":\"paramsSignature\",\"type\":\"bytes32\"}],\"name\":\"newProcessStd\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predecessorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resultsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"censusRoot\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"censusUri\",\"type\":\"string\"}],\"name\":\"setCensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setProcessPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"internalType\":\"enumIProcessStore.Status\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"successorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStorageProofAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ProcessesBin is the compiled bytecode used for deploying new contracts.
var ProcessesBin = "0x60806040523480156200001157600080fd5b50604051620044df380380620044df83398101604081905262000034916200037d565b60008054336001600160a01b03199091161790556200005f866200020b602090811b620027a017901c565b62000075856200032160201b620028981760201c565b6200009d5760405162461bcd60e51b815260040162000094906200041e565b60405180910390fd5b620000b3846200032160201b620028981760201c565b620000d25760405162461bcd60e51b81526004016200009490620004ab565b620000e8836200032160201b620028981760201c565b620001075760405162461bcd60e51b8152600401620000949062000528565b846001600160a01b0316631aa3a0086040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200014357600080fd5b505af115801562000158573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017e9190620003f9565b60048054600580546001600160a01b03199081166001600160a01b03998a1617909155600680549091169688169690961790955563ffffffff60201b1990941664010000000063ffffffff9283160217600160401b600160e01b0319166801000000000000000096909516959095029390931763ffffffff19169316929092179091556007555062000596565b6000546001600160a01b03163314620002385760405162461bcd60e51b8152600401620000949062000449565b6001546001600160a01b031615620002645760405162461bcd60e51b815260040162000094906200055f565b60035415620002875760405162461bcd60e51b81526004016200009490620004fd565b6001600160a01b0381161562000319576001600160a01b038116301415620002c35760405162461bcd60e51b81526004016200009490620004d4565b620002d9816200032160201b620028981760201c565b620002f85760405162461bcd60e51b8152600401620000949062000474565b600180546001600160a01b0319166001600160a01b0383161790556200031e565b436003555b50565b6000806001600160a01b0383166200033e57600091505062000345565b5050803b15155b919050565b80516001600160a01b03811681146200036257600080fd5b92915050565b805163ffffffff811681146200036257600080fd5b60008060008060008060c0878903121562000396578182fd5b620003a288886200034a565b9550620003b388602089016200034a565b9450620003c488604089016200034a565b9350620003d588606089016200034a565b9250620003e6886080890162000368565b915060a087015190509295509295509295565b6000602082840312156200040b578081fd5b62000417838362000368565b9392505050565b602080825260119082015270496e76616c6964206e616d65737061636560781b604082015260600190565b60208082526011908201527037b7363ca1b7b73a3930b1ba27bbb732b960791b604082015260600190565b60208082526013908201527f496e76616c6964207072656465636573736f7200000000000000000000000000604082015260600190565b6020808252600f908201526e496e76616c696420726573756c747360881b604082015260600190565b6020808252600f908201526e21b0b713ba1031329034ba39b2b63360891b604082015260600190565b602080825260119082015270105b1c9958591e481858dd1a5d985d1959607a1b604082015260600190565b60208082526019908201527f496e76616c696420746f6b656e53746f7261676550726f6f6600000000000000604082015260600190565b60208082526019908201527f416c7265616479206861732061207072656465636573736f7200000000000000604082015260600190565b613f3980620005a66000396000f3fe60806040526004361061014b5760003560e01c806374da4adb116100b6578063b847be341161006f578063b847be3414610371578063c876091f14610384578063cab7f4f614610399578063f2bcb15e146103b9578063f3fef3a3146103d9578063f630cd63146103f95761014b565b806374da4adb146102a857806380faa3d2146102c857806381c0de75146102dd5780638de654ba146102fd5780638eaa6ac01461031d578063ac17d1f4146103515761014b565b8063317daac511610108578063317daac5146101fc57806334a2cdbc1461021c57806334e088d614610231578063433278721461025357806368141f2c146102735780636ca886f2146102935761014b565b806308ffce24146101505780630f15f4c01461017b5780631795010d146101925780631d88c05b146101b2578063270cd753146101c7578063292554c3146101e9575b600080fd5b34801561015c57600080fd5b5061016561040e565b60405161017291906133dc565b60405180910390f35b34801561018757600080fd5b5061019061041d565b005b34801561019e57600080fd5b506101906101ad3660046131da565b6104ae565b3480156101be57600080fd5b506101656106f7565b3480156101d357600080fd5b506101dc610706565b60405161017291906134cb565b6101906101f7366004612f21565b61070c565b34801561020857600080fd5b506101dc61021736600461317b565b610f00565b34801561022857600080fd5b50610165610fea565b34801561023d57600080fd5b50610246611000565b6040516101729190613ddc565b34801561025f57600080fd5b5061016561026e36600461317b565b611013565b34801561027f57600080fd5b506101dc61028e366004612e6c565b6110e3565b34801561029f57600080fd5b50610165611119565b3480156102b457600080fd5b506101906102c336600461317b565b611128565b3480156102d457600080fd5b506101dc6113c7565b3480156102e957600080fd5b506101906102f8366004612e6c565b6113cd565b34801561030957600080fd5b506101906103183660046131ab565b611541565b34801561032957600080fd5b5061033d61033836600461317b565b611917565b604051610172989796959493929190613409565b34801561035d57600080fd5b506101dc61036c366004612ecf565b611d3a565b61019061037f366004612fcd565b611d74565b34801561039057600080fd5b50610165612561565b3480156103a557600080fd5b506101906103b436600461317b565b612570565b3480156103c557600080fd5b506101dc6103d4366004612e6c565b6125fc565b3480156103e557600080fd5b506101906103f4366004612ea4565b6126a0565b34801561040557600080fd5b50610246612794565b6001546001600160a01b031681565b6001546001600160a01b031633146104505760405162461bcd60e51b8152600401610447906135a6565b60405180910390fd5b600354156104705760405162461bcd60e51b815260040161044790613ae1565b4360038190556040517f3ec796be1be7d03bff3a62b9fa594a60e947c1809bced06d929f145308ae57ce916104a4916134cb565b60405180910390a1565b60006003541180156104c957506002546001600160a01b0316155b6104e55760405162461bcd60e51b815260040161044790613996565b60008251116105065760405162461bcd60e51b8152600401610447906139b8565b60008151116105275760405162461bcd60e51b815260040161044790613c05565b6000838152600960205260409020600101546001600160a01b0316610586576001546001600160a01b031661056e5760405162461bcd60e51b81526004016104479061361d565b60405162461bcd60e51b815260040161044790613b09565b6000838152600960205260409020600101546001600160a01b031633146105bf5760405162461bcd60e51b815260040161044790613744565b60008084815260096020526040902054600160401b900460ff1660048111156105e457fe5b148061061357506003600084815260096020526040902054600160401b900460ff16600481111561061157fe5b145b61062f5760405162461bcd60e51b815260040161044790613935565b60008381526009602052604090205460041661065d5760405162461bcd60e51b815260040161044790613b40565b6000838152600960209081526040909120835161068292600690920191850190612a27565b50600083815260096020908152604090912082516106a892600790920191840190612a27565b506004546040517fb290b721dc95d65b8ca629743f4f2e385523708862c8237aa6601dd9a99c238e916106ea918691600160201b900463ffffffff16906134d4565b60405180910390a1505050565b6002546001600160a01b031681565b60075481565b600060035411801561072757506002546001600160a01b0316155b6107435760405162461bcd60e51b815260040161044790613996565b8261074d816128bb565b8361075781612957565b6007543410156107795760405162461bcd60e51b815260040161044790613820565b600b61078b60608c0160408d0161327c565b60ff16101580156107af5750600f6107a960608c0160408d0161327c565b60ff1611155b6107cb5760405162461bcd60e51b8152600401610447906137e9565b60016107da60208c018c61327c565b1660ff16600014156107fe5760405162461bcd60e51b815260040161044790613a02565b600261080d60208c018c61327c565b1660ff166000146108305760405162461bcd60e51b815260040161044790613cef565b600461083f60208c018c61327c565b1660ff166000146108625760405162461bcd60e51b815260040161044790613a96565b600061087160208a018a613260565b63ffffffff16116108945760405162461bcd60e51b815260040161044790613871565b60006108a660408a0160208b01613260565b63ffffffff16116108c95760405162461bcd60e51b815260040161044790613527565b6001600160a01b03851633148015906108ea57506001600160a01b03851615155b6109065760405162461bcd60e51b815260040161044790613bd6565b60006109128a80613ded565b9050116109315760405162461bcd60e51b81526004016104479061376c565b600061094060208b018b613ded565b90501161095f5760405162461bcd60e51b815260040161044790613a47565b600061096e602089018961327c565b60ff161161098e5760405162461bcd60e51b81526004016104479061357c565b60006109a06040890160208a0161327c565b60ff161180156109c3575060646109bd6040890160208a0161327c565b60ff1611155b6109df5760405162461bcd60e51b815260040161044790613c9e565b60006109f16060890160408a0161327c565b60ff1611610a115760405162461bcd60e51b815260040161044790613910565b610a19612aa5565b610a2660208c018c61327c565b60ff168152610a3b60408c0160208d0161327c565b60ff166020820152610a5360608c0160408d0161327c565b60ff16600f811115610a6157fe5b8160e00190600f811115610a7157fe5b9081600f811115610a7e57fe5b905250610a8e60208b018b613ded565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506102408201526001600160a01b0386166101a0820152336101c0820152610aec60208a018a613260565b63ffffffff16610160820152610b0860408a0160208b01613260565b63ffffffff16610180820152610b1e8a80613ded565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250610220860194909452505050610100820152610b6d602089018961327c565b60ff166060820152610b856040890160208a0161327c565b60ff166080820152610b9d6060890160408a0161327c565b60ff1660a0820152610bb56080890160608a0161327c565b60ff1660c0820152610bca6020880188613244565b61ffff16610120820152610be46040880160208901613244565b61ffff166101408201526101e0810185905261020081018490526000610c09876125fc565b6001600160a01b03881660009081526008602052604090208054600181018083559293509183919083908110610c3b57fe5b6000918252602082200191909155600454610c69908a90859063ffffffff600160201b820481169116611d3a565b60008181526009602090815260409182902087518154928901519389015160608a015160808b015160a08c015160c08d015160ff1990971660ff9586161761ff001916610100988616989098029790971762ff0000191662010000938516939093029290921763ff00000019166301000000918416919091021764ff000000001916600160201b918316919091021765ff0000000000191665010000000000948216949094029390931766ff0000000000001916600160301b93909216929092021780825560e0870151929350869290829060ff60381b1916600160381b83600f811115610d5357fe5b02179055506101008201518154829060ff60401b1916600160401b836004811115610d7a57fe5b0217905550610120820151815461014084015161016085015161018086015161ffff60481b19909316600160481b61ffff958616021761ffff60581b1916600160581b94909216939093021763ffffffff60681b1916600160681b63ffffffff938416021763ffffffff60881b1916600160881b92909116919091021781556101a08201516001820180546001600160a01b03199081166001600160a01b03938416179091556101c084015160028401805490921692169190911790556101e0820151600382015561020082015160048201556102208201518051610e69916005840191602090910190612a27565b506102408201518051610e86916006840191602090910190612a27565b506102608201518051610ea3916007840191602090910190612a27565b509050507f3b1cc0fc696cbe654bd83494847cc7890f2ae0e05a79dfbd6c1892061fbf34048160048054906101000a900463ffffffff16604051610ee89291906134d4565b60405180910390a15050505050505050505050505050565b6000818152600960205260408120600101546001600160a01b0316610fd1576001546001600160a01b0316610f475760405162461bcd60e51b81526004016104479061361d565b60015460405163317daac560e01b81526001600160a01b0390911690819063317daac590610f799086906004016134cb565b60206040518083038186803b158015610f9157600080fd5b505afa158015610fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc99190613193565b915050610fe5565b506000818152600960205260409020600401545b919050565b600454600160401b90046001600160a01b031681565b600454600160201b900463ffffffff1681565b6000818152600960205260408120600101546001600160a01b03166110dc576001546001600160a01b031661105a5760405162461bcd60e51b81526004016104479061361d565b6001546040516321993c3960e11b81526001600160a01b0390911690819063433278729061108c9086906004016134cb565b60206040518083038186803b1580156110a457600080fd5b505afa1580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc99190612e88565b5030919050565b6000806110ef836125fc565b600454909150611112908490839063ffffffff600160201b820481169116611d3a565b9392505050565b6005546001600160a01b031681565b6000818152600960205260409020600101546001600160a01b031661116f576001546001600160a01b031661056e5760405162461bcd60e51b81526004016104479061361d565b600081815260096020526040902054600160381b900460ff16600b81600f81111561119657fe5b101580156111b05750600f81600f8111156111ad57fe5b11155b156111f3576000828152600960205260409020600201546001600160a01b031633146111ee5760405162461bcd60e51b81526004016104479061384c565b61122c565b6000828152600960205260409020600101546001600160a01b0316331461122c5760405162461bcd60e51b815260040161044790613744565b60008083815260096020526040902054600160401b900460ff16600481111561125157fe5b1461126e5760405162461bcd60e51b815260040161044790613c2c565b60008281526009602052604090205461010090046001166112a15760405162461bcd60e51b815260040161044790613696565b6000828152600960205260408120546112c49062010000900460ff1660016129f3565b60008481526009602052604090205490915060ff63010000009091048116908216101561135e5760008381526009602052604090819020805462ff000019166201000060ff85160217905560045490517fc3c879bd28e24bfa8df84d17ef3cae71077c3610e6167d435cc7e669e4a6b97c91611351918691600160201b900463ffffffff16908590613508565b60405180910390a16113c2565b60008381526009602052604090819020805460ff60401b1916600160401b17905560045490517f55ab39d22f8c4c97fce480c015b739838aa5b8a4ad0a528159669842a7087b01916106ea918691600160201b900463ffffffff16906001906134e8565b505050565b60035481565b6000546001600160a01b031633146113f75760405162461bcd60e51b8152600401610447906135cc565b6000600354116114195760405162461bcd60e51b815260040161044790613d39565b6002546001600160a01b0316156114425760405162461bcd60e51b8152600401610447906136ec565b6001600160a01b03811630141561146b5760405162461bcd60e51b81526004016104479061389e565b61147481612898565b6114905760405162461bcd60e51b815260040161044790613a6e565b6000819050806001600160a01b0316630f15f4c06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156114d057600080fd5b505af11580156114e4573d6000803e3d6000fd5b5050600280546001600160a01b0319166001600160a01b03861617905550506040517f1f8bdb9825a71b7560200e2279fd4b503ac6814e369318e761928502882ee11a906115359043908590613dc5565b60405180910390a15050565b6000828152600960205260409020600101546001600160a01b0316611588576001546001600160a01b031661056e5760405162461bcd60e51b81526004016104479061361d565b600082815260096020526040902054600554600160401b90910460ff16906001600160a01b03163314156116ba5760028160048111156115c457fe5b14156115e25760405162461bcd60e51b8152600401610447906139e0565b60048160048111156115f057fe5b141561160e5760405162461bcd60e51b8152600401610447906138eb565b600482600481111561161c57fe5b146116395760405162461bcd60e51b815260040161044790613716565b6000838152600960205260409020805483919060ff60401b1916600160401b83600481111561166457fe5b02179055506004546040517f55ab39d22f8c4c97fce480c015b739838aa5b8a4ad0a528159669842a7087b01916116ac918691600160201b900463ffffffff169086906134e8565b60405180910390a150611913565b6000838152600960205260409020600101546001600160a01b031633146116f35760405162461bcd60e51b815260040161044790613744565b600382600481111561170157fe5b60ff1611156117225760405162461bcd60e51b815260040161044790613d61565b600083815260096020526040902054600160381b900460ff16600181600f81111561174957fe5b14806117605750600281600f81111561175e57fe5b145b806117765750600381600f81111561177457fe5b145b6117925760405162461bcd60e51b815260040161044790613cc8565b60008260048111156117a057fe5b141580156117ba575060038260048111156117b757fe5b14155b156117d75760405162461bcd60e51b815260040161044790613935565b60038260048111156117e557fe5b14156118315760008481526009602052604090205460021661182c57600083600481111561180f57fe5b1461182c5760405162461bcd60e51b815260040161044790613791565b61185f565b60008481526009602052604090205460021661185f5760405162461bcd60e51b815260040161044790613791565b81600481111561186b57fe5b83600481111561187757fe5b14156118955760405162461bcd60e51b815260040161044790613c57565b6000848152600960205260409020805484919060ff60401b1916600160401b8360048111156118c057fe5b02179055506004546040517f55ab39d22f8c4c97fce480c015b739838aa5b8a4ad0a528159669842a7087b0191611908918791600160201b900463ffffffff169087906134e8565b60405180910390a150505b5050565b61191f612b44565b611927612b62565b61192f612b80565b611937612b62565b6000611941612ba7565b611949612b62565b6000888152600960205260408120600101546001600160a01b0316611a2c576001546001600160a01b03166119905760405162461bcd60e51b81526004016104479061361d565b60015460405163023aa9ab60e61b81526001600160a01b03909116908190638eaa6ac0906119c2908d906004016134cb565b60006040518083038186803b1580156119da57600080fd5b505afa1580156119ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a16919081019061305a565b9850985098509850985098509850985050611d2f565b6000898152600960209081526040918290208251606081018452815460ff808216835261010082048116948301949094529193909290830191600160381b900416600f811115611a7857fe5b60ff1690526040805180820182526001848101546001600160a01b039081168352600280870154909116602080850191909152845160058801805461010095811615959095026000190190941692909204601f81018290049091028201608090810190955260608201818152959e50929c50938493909290840182828015611b415780601f10611b1657610100808354040283529160200191611b41565b820191906000526020600020905b815481529060010190602001808311611b2457829003601f168201915b505050918352505060068301805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015611bd55780601f10611baa57610100808354040283529160200191611bd5565b820191906000526020600020905b815481529060010190602001808311611bb857829003601f168201915b505050918352505060078301805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015611c695780601f10611c3e57610100808354040283529160200191611c69565b820191906000526020600020905b815481529060010190602001808311611c4c57829003601f168201915b505050919092525050604080518082018252835463ffffffff600160681b820481168352600160881b820416602080840191909152835160a08101855262010000830460ff908116825263010000008404811682840152600160201b840481168287015265010000000000840481166060830152600160301b840481166080830152855180870190965261ffff600160481b850481168752600160581b85041692860192909252600390960154949b50919950600160401b900416965091945090925090505b919395975091939597565b600084848484604051602001611d539493929190613398565b6040516020818303038152906040528051906020012090505b949350505050565b6000600354118015611d8f57506002546001600160a01b0316155b611dab5760405162461bcd60e51b815260040161044790613996565b600754341015611dcd5760405162461bcd60e51b815260040161044790613820565b6001611ddf606088016040890161327c565b60ff161480611e0057506002611dfb606088016040890161327c565b60ff16145b80611e1d57506003611e18606088016040890161327c565b60ff16145b611e395760405162461bcd60e51b8152600401610447906137e9565b6001611e48602088018861327c565b1660ff16600014611e85576000611e626020860186613260565b63ffffffff1611611e855760405162461bcd60e51b815260040161044790613b6a565b6002611e94602088018861327c565b1660ff1660001415611ed5576000611eb26040860160208701613260565b63ffffffff1611611ed55760405162461bcd60e51b815260040161044790613961565b6000611ee18680613ded565b905011611f005760405162461bcd60e51b81526004016104479061376c565b6000611f0f6020870187613ded565b905011611f2e5760405162461bcd60e51b815260040161044790613a47565b6000611f3d6040870187613ded565b905011611f5c5760405162461bcd60e51b8152600401610447906135f7565b6000611f6b602085018561327c565b60ff1611611f8b5760405162461bcd60e51b81526004016104479061357c565b6000611f9d604085016020860161327c565b60ff16118015611fc057506064611fba604085016020860161327c565b60ff1611155b611fdc5760405162461bcd60e51b815260040161044790613c9e565b6000611fee606085016040860161327c565b60ff161161200e5760405162461bcd60e51b815260040161044790613910565b6000600161201f602089018961327c565b1660ff1660001461203257506000612036565b5060035b61203e612aa5565b61204b602089018961327c565b60ff1681526120606040890160208a0161327c565b60ff1660208201526120786060890160408a0161327c565b60ff16600f81111561208657fe5b8160e00190600f81111561209657fe5b9081600f8111156120a357fe5b905250336101a08201526120ba6020870187613260565b63ffffffff166101608201526120d66040870160208801613260565b63ffffffff166101808201526120ec8780613ded565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506102208201526121336020880188613ded565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505061024082015261217a6040880188613ded565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505061026082015261010081018260048111156121c557fe5b908160048111156121d257fe5b9052506121e2602086018661327c565b60ff1660608201526121fa604086016020870161327c565b60ff166080820152612212606086016040870161327c565b60ff1660a082015261222a608086016060870161327c565b60ff1660c082015261223f6020850185613244565b61ffff166101208201526122596040850160208601613244565b61ffff1661014082015261020081018390526000612276336125fc565b336000908152600860205260409020805460018101808355929350918391908390811061229f57fe5b60009182526020822001919091556004546122cd903390859063ffffffff600160201b820481169116611d3a565b60008181526009602090815260409182902087518154928901519389015160608a015160808b015160a08c015160c08d015160ff1990971660ff9586161761ff001916610100988616989098029790971762ff0000191662010000938516939093029290921763ff00000019166301000000918416919091021764ff000000001916600160201b918316919091021765ff0000000000191665010000000000948216949094029390931766ff0000000000001916600160301b93909216929092021780825560e0870151929350869290829060ff60381b1916600160381b83600f8111156123b757fe5b02179055506101008201518154829060ff60401b1916600160401b8360048111156123de57fe5b0217905550610120820151815461014084015161016085015161018086015161ffff60481b19909316600160481b61ffff958616021761ffff60581b1916600160581b94909216939093021763ffffffff60681b1916600160681b63ffffffff938416021763ffffffff60881b1916600160881b92909116919091021781556101a08201516001820180546001600160a01b03199081166001600160a01b03938416179091556101c084015160028401805490921692169190911790556101e08201516003820155610200820151600482015561022082015180516124cd916005840191602090910190612a27565b5061024082015180516124ea916006840191602090910190612a27565b506102608201518051612507916007840191602090910190612a27565b509050507f3b1cc0fc696cbe654bd83494847cc7890f2ae0e05a79dfbd6c1892061fbf34048160048054906101000a900463ffffffff1660405161254c9291906134d4565b60405180910390a15050505050505050505050565b6006546001600160a01b031681565b6000546001600160a01b0316331461259a5760405162461bcd60e51b8152600401610447906135cc565b6007548114156125bc5760405162461bcd60e51b8152600401610447906138c7565b60078190556040517f340b7835e5cad9e69cc8bf06b0b3c3e729f0fe4fd314932f4e4284d6ffc03a71906125f19083906134cb565b60405180910390a150565b6001600160a01b038116600090815260086020526040812054612663576001546001600160a01b031661263157506000610fe5565b60015460405163795e58af60e11b81526001600160a01b0390911690819063f2bcb15e90610f799086906004016133dc565b6001600160a01b03821660009081526008602052604090208054600019810190811061268b57fe5b60009182526020909120015460010192915050565b6000546001600160a01b031633146126ca5760405162461bcd60e51b8152600401610447906135cc565b806126e75760405162461bcd60e51b81526004016104479061366e565b8047116127065760405162461bcd60e51b8152600401610447906136c2565b6001600160a01b03821661272c5760405162461bcd60e51b815260040161044790613553565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015612762573d6000803e3d6000fd5b507f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436482826040516115359291906133f0565b60045463ffffffff1681565b6000546001600160a01b031633146127ca5760405162461bcd60e51b8152600401610447906135cc565b6001546001600160a01b0316156127f35760405162461bcd60e51b815260040161044790613d8e565b600354156128135760405162461bcd60e51b815260040161044790613bab565b6001600160a01b03811615612890576001600160a01b03811630141561284b5760405162461bcd60e51b81526004016104479061389e565b61285481612898565b6128705760405162461bcd60e51b8152600401610447906137bc565b600180546001600160a01b0319166001600160a01b038316179055612895565b436003555b50565b6000806001600160a01b0383166128b3576000915050610fe5565b50503b151590565b60065460405163c3c5a54760e01b81526001600160a01b039091169063c3c5a547906128eb9084906004016133dc565b60206040518083038186803b15801561290357600080fd5b505afa158015612917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293b919061315b565b6128955760405162461bcd60e51b815260040161044790613640565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906129869033906004016133dc565b60206040518083038186803b15801561299e57600080fd5b505afa1580156129b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d69190613193565b116128955760405162461bcd60e51b815260040161044790613820565b600082820160ff8085169082161015612a1e5760405162461bcd60e51b815260040161044790613c7c565b90505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612a6857805160ff1916838001178555612a95565b82800160010185558215612a95579182015b82811115612a95578251825591602001919060010190612a7a565b50612aa1929150612bc5565b5090565b6040805161028081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290529060e08201908152602001600081526000602082018190526040820181905260608083018290526080830182905260a0830182905260c0830182905260e08301829052610100830191909152610120820181905261014082018190526101609091015290565b60405180606001604052806003906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003905b6060815260200190600190039081612b8f5790505090565b6040518060a001604052806005906020820280368337509192915050565b5b80821115612aa15760008155600101612bc6565b600082601f830112612bea578081fd5b612bf46040613e39565b9050808284604085011115612c0857600080fd5b60005b6002811015612c34578151612c1f81613eb0565b83526020928301929190910190600101612c0b565b50505092915050565b8060408101831015612a2157600080fd5b8060608101831015612a2157600080fd5b6000601f8381840112612c70578182fd5b612c7a6060613e39565b9150818360005b6003811015612cea57815186018785820112612c9c57600080fd5b8051612caf612caa82613e60565b613e39565b81815260208a81848601011115612cc557600080fd5b612cd483828401838701613e84565b9086529485019493909301925050600101612c81565b5050505092915050565b600082601f830112612d04578081fd5b612d0e6040613e39565b9050808284604085011115612d2257600080fd5b60005b6002811015612c34578151612d3981613ed2565b83526020928301929190910190600101612d25565b600082601f830112612d5e578081fd5b612d686040613e39565b9050808284604085011115612d7c57600080fd5b60005b6002811015612c34578151612d9381613ee2565b83526020928301929190910190600101612d7f565b8060808101831015612a2157600080fd5b600082601f830112612dc9578081fd5b612dd360a0613e39565b905080828460a085011115612de757600080fd5b60005b6005811015612c34578151612dfe81613ef4565b83526020928301929190910190600101612dea565b8051612a2181613ec5565b600082601f830112612e2e578081fd5b8135612e3c612caa82613e60565b9150808252836020828501011115612e5357600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215612e7d578081fd5b8135612a1e81613eb0565b600060208284031215612e99578081fd5b8151612a1e81613eb0565b60008060408385031215612eb6578081fd5b8235612ec181613eb0565b946020939093013593505050565b60008060008060808587031215612ee4578182fd5b8435612eef81613eb0565b9350602085013592506040850135612f0681613ee2565b91506060850135612f1681613ee2565b939692955090935050565b6000806000806000806000806101e0898b031215612f3d578586fd5b612f478a8a612c4e565b9750606089013567ffffffffffffffff811115612f62578687fd5b612f6e8b828c01612c3d565b975050612f7e8a60808b01612c3d565b9550612f8d8a60c08b01612da8565b9450612f9d8a6101408b01612c3d565b9350610180890135612fae81613eb0565b979a96995094979396929592945050506101a0820135916101c0013590565b6000806000806000806101a08789031215612fe6578384fd5b612ff08888612c4e565b9550606087013567ffffffffffffffff81111561300b578485fd5b61301789828a01612c4e565b9550506130278860808901612c3d565b93506130368860c08901612da8565b9250613046886101408901612c3d565b915061018087013590509295509295509295565b600080600080600080600080610220898b031215613076578182fd5b89601f8a0112613084578182fd5b61308e6060613e39565b808a60608c018d8111156130a0578586fd5b855b60038110156130cb5782516130b681613ef4565b855260209485019492909201916001016130a2565b50829b506130d98e82612bda565b9a505050505060a089015167ffffffffffffffff8111156130f8578283fd5b6131048b828c01612c5f565b9650506131148a60c08b01612d4e565b94506131248a6101008b01612e13565b93506131348a6101208b01612db9565b92506131448a6101c08b01612cf4565b915061020089015190509295985092959890939650565b60006020828403121561316c578081fd5b81518015158114612a1e578182fd5b60006020828403121561318c578081fd5b5035919050565b6000602082840312156131a4578081fd5b5051919050565b600080604083850312156131bd578182fd5b8235915060208301356131cf81613ec5565b809150509250929050565b6000806000606084860312156131ee578081fd5b83359250602084013567ffffffffffffffff8082111561320c578283fd5b61321887838801612e1e565b9350604086013591508082111561322d578283fd5b5061323a86828701612e1e565b9150509250925092565b600060208284031215613255578081fd5b8135612a1e81613ed2565b600060208284031215613271578081fd5b8135612a1e81613ee2565b60006020828403121561328d578081fd5b8135612a1e81613ef4565b60ff16815260200190565b6001600160a01b03169052565b6000826060810183835b60038110156133035783830387528151805180855260206132e082828801838601613e84565b98890198601f91909101601f1916949094018401939290920191506001016132ba565b509095945050505050565b8060005b600281101561333557815161ffff16845260209384019390910190600101613312565b50505050565b8060005b600281101561333557815163ffffffff1684526020938401939091019060010161333f565b8060005b600581101561333557815160ff16845260209384019390910190600101613368565b6005811061339457fe5b9052565b60609490941b6bffffffffffffffffffffffff19168452601484019290925260e090811b6001600160e01b0319908116603485015291901b166038820152603c0190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000610220828b835b600381101561343757613426838351613298565b925060209190910190600101613412565b505050606083018a835b6002811015613468576134558383516132a3565b6020928301929190910190600101613441565b5050508060a084015261347d8184018a6132b0565b91505061348d60c083018861333b565b61349b61010083018761338a565b6134a9610120830186613364565b6134b76101c083018561330e565b826102008301529998505050505050505050565b90815260200190565b91825263ffffffff16602082015260400190565b83815263ffffffff8316602082015260608101611d6c604083018461338a565b92835263ffffffff91909116602083015260ff16604082015260600190565b602080825260129082015271125b9d985b1a5908189b1bd8dad0dbdd5b9d60721b604082015260600190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b60208082526010908201526f139bc81c5d595cdd1a5bdb90dbdd5b9d60821b604082015260600190565b6020808252600c908201526b155b985d5d1a1bdc9a5e995960a21b604082015260600190565b60208082526011908201527037b7363ca1b7b73a3930b1ba27bbb732b960791b604082015260600190565b6020808252600c908201526b4e6f2063656e73757355726960a01b604082015260600190565b602080825260099082015268139bdd08199bdd5b9960ba1b604082015260600190565b602080825260149082015273151bdad95b881b9bdd081c9959da5cdd195c995960621b604082015260600190565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b602080825260129082015271141c9bd8d95cdcc81b9bdd081cd95c9a585b60721b604082015260600190565b60208082526010908201526f4e6f7420656e6f7567682066756e647360801b604082015260600190565b60208082526010908201526f416c726561647920696e61637469766560801b604082015260600190565b602080825260149082015273139bdd081c995cdd5b1d1cc818dbdb9d1c9858dd60621b604082015260600190565b6020808252600e908201526d496e76616c696420656e7469747960901b604082015260600190565b6020808252600b908201526a4e6f206d6574616461746160a81b604082015260600190565b6020808252601190820152704e6f7420696e7465727275707469626c6560781b604082015260600190565b60208082526013908201527224b73b30b634b210383932b232b1b2b9b9b7b960691b604082015260600190565b60208082526019908201527f556e737570706f727465642063656e737573206f726967696e00000000000000604082015260600190565b602080825260129082015271496e73756666696369656e742066756e647360701b604082015260600190565b6020808252600b908201526a2737ba1031b932b0ba37b960a91b604082015260600190565b602080825260139082015272496e76616c696420737461727420626c6f636b60681b604082015260600190565b6020808252600f908201526e21b0b713ba1031329034ba39b2b63360891b604082015260600190565b6020808252600a908201526953616d6520707269636560b01b604082015260600190565b6020808252600b908201526a105b1c9958591e481cd95d60aa1b604082015260600190565b6020808252600b908201526a4e6f206d617856616c756560a81b604082015260600190565b602080825260129082015271141c9bd8d95cdcc81d195c9b5a5b985d195960721b604082015260600190565b6020808252818101527f556e696e7465727275707469626c65206e6565647320626c6f636b436f756e74604082015260600190565b602080825260089082015267496e61637469766560c01b604082015260600190565b6020808252600e908201526d139bc810d95b9cdd5cc8149bdbdd60921b604082015260600190565b60208082526008908201526710d85b98d95b195960c21b604082015260600190565b60208082526025908201527f4175746f207374617274206973206e6565646564206f6e2045564d2070726f63604082015264657373657360d81b606082015260800190565b6020808252600d908201526c139bc818d95b9cdd5cd49bdbdd609a1b604082015260600190565b6020808252600e908201526d139bdd08184818dbdb9d1c9858dd60921b604082015260600190565b6020808252602b908201527f44796e616d69632063656e737573206e6f7420616c6c6f776564206f6e20455660408201526a4d2070726f63657373657360a81b606082015260800190565b6020808252600e908201526d416c72656164792061637469766560901b604082015260600190565b6020808252601d908201527f4e6f7420666f756e643a20547279206f6e207072656465636573736f72000000604082015260600190565b60208082526010908201526f526561642d6f6e6c792063656e73757360801b604082015260600190565b60208082526021908201527f4175746f207374617274207265717569726573206120737461727420626c6f636040820152606b60f81b606082015260800190565b602080825260119082015270105b1c9958591e481858dd1a5d985d1959607a1b604082015260600190565b602080825260159082015274496e76616c696420746f6b656e206164647265737360581b604082015260600190565b6020808252600d908201526c4e6f2043656e7375732055524960981b604082015260600190565b60208082526011908201527050726f63657373206e6f7420726561647960781b604082015260600190565b6020808252600b908201526a26bab9ba103234b33332b960a91b604082015260600190565b6020808252600890820152676f766572666c6f7760c01b604082015260600190565b60208082526010908201526f125b9d985b1a59081b585e10dbdd5b9d60821b604082015260600190565b6020808252600d908201526c2737ba1037b33316b1b430b4b760991b604082015260600190565b6020808252602a908201527f496e7465727275707469626c65206e6f7420616c6c6f776564206f6e2045564d6040820152692070726f63657373657360b01b606082015260800190565b6020808252600e908201526d4d7573742062652061637469766560901b604082015260600190565b602080825260139082015272496e76616c69642073746174757320636f646560681b604082015260600190565b60208082526019908201527f416c7265616479206861732061207072656465636573736f7200000000000000604082015260600190565b9182526001600160a01b0316602082015260400190565b63ffffffff91909116815260200190565b6000808335601e19843603018112613e03578283fd5b83018035915067ffffffffffffffff821115613e1d578283fd5b602001915036819003821315613e3257600080fd5b9250929050565b60405181810167ffffffffffffffff81118282101715613e5857600080fd5b604052919050565b600067ffffffffffffffff821115613e76578081fd5b50601f01601f191660200190565b60005b83811015613e9f578181015183820152602001613e87565b838111156133355750506000910152565b6001600160a01b038116811461289557600080fd5b6005811061289557600080fd5b61ffff8116811461289557600080fd5b63ffffffff8116811461289557600080fd5b60ff8116811461289557600080fdfea264697066735822122025a24716255ff31b18cc31defb6ca788ff7f727ed21c08332c5f000fb0b16dd464736f6c634300060c0033"

// DeployProcesses deploys a new Ethereum contract, binding an instance of Processes to it.
func DeployProcesses(auth *bind.TransactOpts, backend bind.ContractBackend, predecessor common.Address, namespace common.Address, resultsAddr common.Address, tokenStorageProof common.Address, ethereumChainId uint32, procPrice *big.Int) (common.Address, *types.Transaction, *Processes, error) {
	parsed, err := abi.JSON(strings.NewReader(ProcessesABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ProcessesBin), backend, predecessor, namespace, resultsAddr, tokenStorageProof, ethereumChainId, procPrice)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Processes{ProcessesCaller: ProcessesCaller{contract: contract}, ProcessesTransactor: ProcessesTransactor{contract: contract}, ProcessesFilterer: ProcessesFilterer{contract: contract}}, nil
}

// Processes is an auto generated Go binding around an Ethereum contract.
type Processes struct {
	ProcessesCaller     // Read-only binding to the contract
	ProcessesTransactor // Write-only binding to the contract
	ProcessesFilterer   // Log filterer for contract events
}

// ProcessesCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProcessesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProcessesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProcessesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProcessesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProcessesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProcessesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProcessesSession struct {
	Contract     *Processes        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProcessesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProcessesCallerSession struct {
	Contract *ProcessesCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ProcessesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProcessesTransactorSession struct {
	Contract     *ProcessesTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ProcessesRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProcessesRaw struct {
	Contract *Processes // Generic contract binding to access the raw methods on
}

// ProcessesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProcessesCallerRaw struct {
	Contract *ProcessesCaller // Generic read-only contract binding to access the raw methods on
}

// ProcessesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProcessesTransactorRaw struct {
	Contract *ProcessesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProcesses creates a new instance of Processes, bound to a specific deployed contract.
func NewProcesses(address common.Address, backend bind.ContractBackend) (*Processes, error) {
	contract, err := bindProcesses(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Processes{ProcessesCaller: ProcessesCaller{contract: contract}, ProcessesTransactor: ProcessesTransactor{contract: contract}, ProcessesFilterer: ProcessesFilterer{contract: contract}}, nil
}

// NewProcessesCaller creates a new read-only instance of Processes, bound to a specific deployed contract.
func NewProcessesCaller(address common.Address, caller bind.ContractCaller) (*ProcessesCaller, error) {
	contract, err := bindProcesses(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProcessesCaller{contract: contract}, nil
}

// NewProcessesTransactor creates a new write-only instance of Processes, bound to a specific deployed contract.
func NewProcessesTransactor(address common.Address, transactor bind.ContractTransactor) (*ProcessesTransactor, error) {
	contract, err := bindProcesses(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProcessesTransactor{contract: contract}, nil
}

// NewProcessesFilterer creates a new log filterer instance of Processes, bound to a specific deployed contract.
func NewProcessesFilterer(address common.Address, filterer bind.ContractFilterer) (*ProcessesFilterer, error) {
	contract, err := bindProcesses(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProcessesFilterer{contract: contract}, nil
}

// bindProcesses binds a generic wrapper to an already deployed contract.
func bindProcesses(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProcessesABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Processes *ProcessesRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Processes.Contract.ProcessesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Processes *ProcessesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Processes.Contract.ProcessesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Processes *ProcessesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Processes.Contract.ProcessesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Processes *ProcessesCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Processes.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Processes *ProcessesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Processes.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Processes *ProcessesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Processes.Contract.contract.Transact(opts, method, params...)
}

// ActivationBlock is a free data retrieval call binding the contract method 0x80faa3d2.
//
// Solidity: function activationBlock() view returns(uint256)
func (_Processes *ProcessesCaller) ActivationBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "activationBlock")
	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err
}

// ActivationBlock is a free data retrieval call binding the contract method 0x80faa3d2.
//
// Solidity: function activationBlock() view returns(uint256)
func (_Processes *ProcessesSession) ActivationBlock() (*big.Int, error) {
	return _Processes.Contract.ActivationBlock(&_Processes.CallOpts)
}

// ActivationBlock is a free data retrieval call binding the contract method 0x80faa3d2.
//
// Solidity: function activationBlock() view returns(uint256)
func (_Processes *ProcessesCallerSession) ActivationBlock() (*big.Int, error) {
	return _Processes.Contract.ActivationBlock(&_Processes.CallOpts)
}

// EthChainId is a free data retrieval call binding the contract method 0xf630cd63.
//
// Solidity: function ethChainId() view returns(uint32)
func (_Processes *ProcessesCaller) EthChainId(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "ethChainId")
	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err
}

// EthChainId is a free data retrieval call binding the contract method 0xf630cd63.
//
// Solidity: function ethChainId() view returns(uint32)
func (_Processes *ProcessesSession) EthChainId() (uint32, error) {
	return _Processes.Contract.EthChainId(&_Processes.CallOpts)
}

// EthChainId is a free data retrieval call binding the contract method 0xf630cd63.
//
// Solidity: function ethChainId() view returns(uint32)
func (_Processes *ProcessesCallerSession) EthChainId() (uint32, error) {
	return _Processes.Contract.EthChainId(&_Processes.CallOpts)
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 processId) view returns(uint8[3] mode_envelopeType_censusOrigin, address[2] entityAddress_owner, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8 status, uint8[5] questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[2] maxTotalCost_costExponent, uint256 sourceBlockHeight)
func (_Processes *ProcessesCaller) Get(opts *bind.CallOpts, processId [32]byte) (struct {
	ModeEnvelopeTypeCensusOrigin                                [3]uint8
	EntityAddressOwner                                          [2]common.Address
	MetadataCensusRootCensusUri                                 [3]string
	StartBlockBlockCount                                        [2]uint32
	Status                                                      uint8
	QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites [5]uint8
	MaxTotalCostCostExponent                                    [2]uint16
	SourceBlockHeight                                           *big.Int
}, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "get", processId)

	outstruct := new(struct {
		ModeEnvelopeTypeCensusOrigin                                [3]uint8
		EntityAddressOwner                                          [2]common.Address
		MetadataCensusRootCensusUri                                 [3]string
		StartBlockBlockCount                                        [2]uint32
		Status                                                      uint8
		QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites [5]uint8
		MaxTotalCostCostExponent                                    [2]uint16
		SourceBlockHeight                                           *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ModeEnvelopeTypeCensusOrigin = *abi.ConvertType(out[0], new([3]uint8)).(*[3]uint8)
	outstruct.EntityAddressOwner = *abi.ConvertType(out[1], new([2]common.Address)).(*[2]common.Address)
	outstruct.MetadataCensusRootCensusUri = *abi.ConvertType(out[2], new([3]string)).(*[3]string)
	outstruct.StartBlockBlockCount = *abi.ConvertType(out[3], new([2]uint32)).(*[2]uint32)
	outstruct.Status = *abi.ConvertType(out[4], new(uint8)).(*uint8)
	outstruct.QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites = *abi.ConvertType(out[5], new([5]uint8)).(*[5]uint8)
	outstruct.MaxTotalCostCostExponent = *abi.ConvertType(out[6], new([2]uint16)).(*[2]uint16)
	outstruct.SourceBlockHeight = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)

	return *outstruct, err
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 processId) view returns(uint8[3] mode_envelopeType_censusOrigin, address[2] entityAddress_owner, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8 status, uint8[5] questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[2] maxTotalCost_costExponent, uint256 sourceBlockHeight)
func (_Processes *ProcessesSession) Get(processId [32]byte) (struct {
	ModeEnvelopeTypeCensusOrigin                                [3]uint8
	EntityAddressOwner                                          [2]common.Address
	MetadataCensusRootCensusUri                                 [3]string
	StartBlockBlockCount                                        [2]uint32
	Status                                                      uint8
	QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites [5]uint8
	MaxTotalCostCostExponent                                    [2]uint16
	SourceBlockHeight                                           *big.Int
}, error) {
	return _Processes.Contract.Get(&_Processes.CallOpts, processId)
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 processId) view returns(uint8[3] mode_envelopeType_censusOrigin, address[2] entityAddress_owner, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8 status, uint8[5] questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[2] maxTotalCost_costExponent, uint256 sourceBlockHeight)
func (_Processes *ProcessesCallerSession) Get(processId [32]byte) (struct {
	ModeEnvelopeTypeCensusOrigin                                [3]uint8
	EntityAddressOwner                                          [2]common.Address
	MetadataCensusRootCensusUri                                 [3]string
	StartBlockBlockCount                                        [2]uint32
	Status                                                      uint8
	QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites [5]uint8
	MaxTotalCostCostExponent                                    [2]uint16
	SourceBlockHeight                                           *big.Int
}, error) {
	return _Processes.Contract.Get(&_Processes.CallOpts, processId)
}

// GetCreationInstance is a free data retrieval call binding the contract method 0x43327872.
//
// Solidity: function getCreationInstance(bytes32 processId) view returns(address)
func (_Processes *ProcessesCaller) GetCreationInstance(opts *bind.CallOpts, processId [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getCreationInstance", processId)
	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err
}

// GetCreationInstance is a free data retrieval call binding the contract method 0x43327872.
//
// Solidity: function getCreationInstance(bytes32 processId) view returns(address)
func (_Processes *ProcessesSession) GetCreationInstance(processId [32]byte) (common.Address, error) {
	return _Processes.Contract.GetCreationInstance(&_Processes.CallOpts, processId)
}

// GetCreationInstance is a free data retrieval call binding the contract method 0x43327872.
//
// Solidity: function getCreationInstance(bytes32 processId) view returns(address)
func (_Processes *ProcessesCallerSession) GetCreationInstance(processId [32]byte) (common.Address, error) {
	return _Processes.Contract.GetCreationInstance(&_Processes.CallOpts, processId)
}

// GetEntityProcessCount is a free data retrieval call binding the contract method 0xf2bcb15e.
//
// Solidity: function getEntityProcessCount(address entityAddress) view returns(uint256)
func (_Processes *ProcessesCaller) GetEntityProcessCount(opts *bind.CallOpts, entityAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getEntityProcessCount", entityAddress)
	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err
}

// GetEntityProcessCount is a free data retrieval call binding the contract method 0xf2bcb15e.
//
// Solidity: function getEntityProcessCount(address entityAddress) view returns(uint256)
func (_Processes *ProcessesSession) GetEntityProcessCount(entityAddress common.Address) (*big.Int, error) {
	return _Processes.Contract.GetEntityProcessCount(&_Processes.CallOpts, entityAddress)
}

// GetEntityProcessCount is a free data retrieval call binding the contract method 0xf2bcb15e.
//
// Solidity: function getEntityProcessCount(address entityAddress) view returns(uint256)
func (_Processes *ProcessesCallerSession) GetEntityProcessCount(entityAddress common.Address) (*big.Int, error) {
	return _Processes.Contract.GetEntityProcessCount(&_Processes.CallOpts, entityAddress)
}

// GetNextProcessId is a free data retrieval call binding the contract method 0x68141f2c.
//
// Solidity: function getNextProcessId(address entityAddress) view returns(bytes32)
func (_Processes *ProcessesCaller) GetNextProcessId(opts *bind.CallOpts, entityAddress common.Address) ([32]byte, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getNextProcessId", entityAddress)
	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err
}

// GetNextProcessId is a free data retrieval call binding the contract method 0x68141f2c.
//
// Solidity: function getNextProcessId(address entityAddress) view returns(bytes32)
func (_Processes *ProcessesSession) GetNextProcessId(entityAddress common.Address) ([32]byte, error) {
	return _Processes.Contract.GetNextProcessId(&_Processes.CallOpts, entityAddress)
}

// GetNextProcessId is a free data retrieval call binding the contract method 0x68141f2c.
//
// Solidity: function getNextProcessId(address entityAddress) view returns(bytes32)
func (_Processes *ProcessesCallerSession) GetNextProcessId(entityAddress common.Address) ([32]byte, error) {
	return _Processes.Contract.GetNextProcessId(&_Processes.CallOpts, entityAddress)
}

// GetParamsSignature is a free data retrieval call binding the contract method 0x317daac5.
//
// Solidity: function getParamsSignature(bytes32 processId) view returns(bytes32)
func (_Processes *ProcessesCaller) GetParamsSignature(opts *bind.CallOpts, processId [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getParamsSignature", processId)
	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err
}

// GetParamsSignature is a free data retrieval call binding the contract method 0x317daac5.
//
// Solidity: function getParamsSignature(bytes32 processId) view returns(bytes32)
func (_Processes *ProcessesSession) GetParamsSignature(processId [32]byte) ([32]byte, error) {
	return _Processes.Contract.GetParamsSignature(&_Processes.CallOpts, processId)
}

// GetParamsSignature is a free data retrieval call binding the contract method 0x317daac5.
//
// Solidity: function getParamsSignature(bytes32 processId) view returns(bytes32)
func (_Processes *ProcessesCallerSession) GetParamsSignature(processId [32]byte) ([32]byte, error) {
	return _Processes.Contract.GetParamsSignature(&_Processes.CallOpts, processId)
}

// GetProcessId is a free data retrieval call binding the contract method 0xac17d1f4.
//
// Solidity: function getProcessId(address entityAddress, uint256 processCountIndex, uint32 namespaceIdNum, uint32 ethereumChainId) pure returns(bytes32)
func (_Processes *ProcessesCaller) GetProcessId(opts *bind.CallOpts, entityAddress common.Address, processCountIndex *big.Int, namespaceIdNum uint32, ethereumChainId uint32) ([32]byte, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getProcessId", entityAddress, processCountIndex, namespaceIdNum, ethereumChainId)
	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err
}

// GetProcessId is a free data retrieval call binding the contract method 0xac17d1f4.
//
// Solidity: function getProcessId(address entityAddress, uint256 processCountIndex, uint32 namespaceIdNum, uint32 ethereumChainId) pure returns(bytes32)
func (_Processes *ProcessesSession) GetProcessId(entityAddress common.Address, processCountIndex *big.Int, namespaceIdNum uint32, ethereumChainId uint32) ([32]byte, error) {
	return _Processes.Contract.GetProcessId(&_Processes.CallOpts, entityAddress, processCountIndex, namespaceIdNum, ethereumChainId)
}

// GetProcessId is a free data retrieval call binding the contract method 0xac17d1f4.
//
// Solidity: function getProcessId(address entityAddress, uint256 processCountIndex, uint32 namespaceIdNum, uint32 ethereumChainId) pure returns(bytes32)
func (_Processes *ProcessesCallerSession) GetProcessId(entityAddress common.Address, processCountIndex *big.Int, namespaceIdNum uint32, ethereumChainId uint32) ([32]byte, error) {
	return _Processes.Contract.GetProcessId(&_Processes.CallOpts, entityAddress, processCountIndex, namespaceIdNum, ethereumChainId)
}

// NamespaceAddress is a free data retrieval call binding the contract method 0x34a2cdbc.
//
// Solidity: function namespaceAddress() view returns(address)
func (_Processes *ProcessesCaller) NamespaceAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "namespaceAddress")
	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err
}

// NamespaceAddress is a free data retrieval call binding the contract method 0x34a2cdbc.
//
// Solidity: function namespaceAddress() view returns(address)
func (_Processes *ProcessesSession) NamespaceAddress() (common.Address, error) {
	return _Processes.Contract.NamespaceAddress(&_Processes.CallOpts)
}

// NamespaceAddress is a free data retrieval call binding the contract method 0x34a2cdbc.
//
// Solidity: function namespaceAddress() view returns(address)
func (_Processes *ProcessesCallerSession) NamespaceAddress() (common.Address, error) {
	return _Processes.Contract.NamespaceAddress(&_Processes.CallOpts)
}

// NamespaceId is a free data retrieval call binding the contract method 0x34e088d6.
//
// Solidity: function namespaceId() view returns(uint32)
func (_Processes *ProcessesCaller) NamespaceId(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "namespaceId")
	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err
}

// NamespaceId is a free data retrieval call binding the contract method 0x34e088d6.
//
// Solidity: function namespaceId() view returns(uint32)
func (_Processes *ProcessesSession) NamespaceId() (uint32, error) {
	return _Processes.Contract.NamespaceId(&_Processes.CallOpts)
}

// NamespaceId is a free data retrieval call binding the contract method 0x34e088d6.
//
// Solidity: function namespaceId() view returns(uint32)
func (_Processes *ProcessesCallerSession) NamespaceId() (uint32, error) {
	return _Processes.Contract.NamespaceId(&_Processes.CallOpts)
}

// PredecessorAddress is a free data retrieval call binding the contract method 0x08ffce24.
//
// Solidity: function predecessorAddress() view returns(address)
func (_Processes *ProcessesCaller) PredecessorAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "predecessorAddress")
	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err
}

// PredecessorAddress is a free data retrieval call binding the contract method 0x08ffce24.
//
// Solidity: function predecessorAddress() view returns(address)
func (_Processes *ProcessesSession) PredecessorAddress() (common.Address, error) {
	return _Processes.Contract.PredecessorAddress(&_Processes.CallOpts)
}

// PredecessorAddress is a free data retrieval call binding the contract method 0x08ffce24.
//
// Solidity: function predecessorAddress() view returns(address)
func (_Processes *ProcessesCallerSession) PredecessorAddress() (common.Address, error) {
	return _Processes.Contract.PredecessorAddress(&_Processes.CallOpts)
}

// ProcessPrice is a free data retrieval call binding the contract method 0x270cd753.
//
// Solidity: function processPrice() view returns(uint256)
func (_Processes *ProcessesCaller) ProcessPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "processPrice")
	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err
}

// ProcessPrice is a free data retrieval call binding the contract method 0x270cd753.
//
// Solidity: function processPrice() view returns(uint256)
func (_Processes *ProcessesSession) ProcessPrice() (*big.Int, error) {
	return _Processes.Contract.ProcessPrice(&_Processes.CallOpts)
}

// ProcessPrice is a free data retrieval call binding the contract method 0x270cd753.
//
// Solidity: function processPrice() view returns(uint256)
func (_Processes *ProcessesCallerSession) ProcessPrice() (*big.Int, error) {
	return _Processes.Contract.ProcessPrice(&_Processes.CallOpts)
}

// ResultsAddress is a free data retrieval call binding the contract method 0x6ca886f2.
//
// Solidity: function resultsAddress() view returns(address)
func (_Processes *ProcessesCaller) ResultsAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "resultsAddress")
	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err
}

// ResultsAddress is a free data retrieval call binding the contract method 0x6ca886f2.
//
// Solidity: function resultsAddress() view returns(address)
func (_Processes *ProcessesSession) ResultsAddress() (common.Address, error) {
	return _Processes.Contract.ResultsAddress(&_Processes.CallOpts)
}

// ResultsAddress is a free data retrieval call binding the contract method 0x6ca886f2.
//
// Solidity: function resultsAddress() view returns(address)
func (_Processes *ProcessesCallerSession) ResultsAddress() (common.Address, error) {
	return _Processes.Contract.ResultsAddress(&_Processes.CallOpts)
}

// SuccessorAddress is a free data retrieval call binding the contract method 0x1d88c05b.
//
// Solidity: function successorAddress() view returns(address)
func (_Processes *ProcessesCaller) SuccessorAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "successorAddress")
	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err
}

// SuccessorAddress is a free data retrieval call binding the contract method 0x1d88c05b.
//
// Solidity: function successorAddress() view returns(address)
func (_Processes *ProcessesSession) SuccessorAddress() (common.Address, error) {
	return _Processes.Contract.SuccessorAddress(&_Processes.CallOpts)
}

// SuccessorAddress is a free data retrieval call binding the contract method 0x1d88c05b.
//
// Solidity: function successorAddress() view returns(address)
func (_Processes *ProcessesCallerSession) SuccessorAddress() (common.Address, error) {
	return _Processes.Contract.SuccessorAddress(&_Processes.CallOpts)
}

// TokenStorageProofAddress is a free data retrieval call binding the contract method 0xc876091f.
//
// Solidity: function tokenStorageProofAddress() view returns(address)
func (_Processes *ProcessesCaller) TokenStorageProofAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "tokenStorageProofAddress")
	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err
}

// TokenStorageProofAddress is a free data retrieval call binding the contract method 0xc876091f.
//
// Solidity: function tokenStorageProofAddress() view returns(address)
func (_Processes *ProcessesSession) TokenStorageProofAddress() (common.Address, error) {
	return _Processes.Contract.TokenStorageProofAddress(&_Processes.CallOpts)
}

// TokenStorageProofAddress is a free data retrieval call binding the contract method 0xc876091f.
//
// Solidity: function tokenStorageProofAddress() view returns(address)
func (_Processes *ProcessesCallerSession) TokenStorageProofAddress() (common.Address, error) {
	return _Processes.Contract.TokenStorageProofAddress(&_Processes.CallOpts)
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_Processes *ProcessesTransactor) Activate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "activate")
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_Processes *ProcessesSession) Activate() (*types.Transaction, error) {
	return _Processes.Contract.Activate(&_Processes.TransactOpts)
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_Processes *ProcessesTransactorSession) Activate() (*types.Transaction, error) {
	return _Processes.Contract.Activate(&_Processes.TransactOpts)
}

// ActivateSuccessor is a paid mutator transaction binding the contract method 0x81c0de75.
//
// Solidity: function activateSuccessor(address successor) returns()
func (_Processes *ProcessesTransactor) ActivateSuccessor(opts *bind.TransactOpts, successor common.Address) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "activateSuccessor", successor)
}

// ActivateSuccessor is a paid mutator transaction binding the contract method 0x81c0de75.
//
// Solidity: function activateSuccessor(address successor) returns()
func (_Processes *ProcessesSession) ActivateSuccessor(successor common.Address) (*types.Transaction, error) {
	return _Processes.Contract.ActivateSuccessor(&_Processes.TransactOpts, successor)
}

// ActivateSuccessor is a paid mutator transaction binding the contract method 0x81c0de75.
//
// Solidity: function activateSuccessor(address successor) returns()
func (_Processes *ProcessesTransactorSession) ActivateSuccessor(successor common.Address) (*types.Transaction, error) {
	return _Processes.Contract.ActivateSuccessor(&_Processes.TransactOpts, successor)
}

// IncrementQuestionIndex is a paid mutator transaction binding the contract method 0x74da4adb.
//
// Solidity: function incrementQuestionIndex(bytes32 processId) returns()
func (_Processes *ProcessesTransactor) IncrementQuestionIndex(opts *bind.TransactOpts, processId [32]byte) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "incrementQuestionIndex", processId)
}

// IncrementQuestionIndex is a paid mutator transaction binding the contract method 0x74da4adb.
//
// Solidity: function incrementQuestionIndex(bytes32 processId) returns()
func (_Processes *ProcessesSession) IncrementQuestionIndex(processId [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.IncrementQuestionIndex(&_Processes.TransactOpts, processId)
}

// IncrementQuestionIndex is a paid mutator transaction binding the contract method 0x74da4adb.
//
// Solidity: function incrementQuestionIndex(bytes32 processId) returns()
func (_Processes *ProcessesTransactorSession) IncrementQuestionIndex(processId [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.IncrementQuestionIndex(&_Processes.TransactOpts, processId)
}

// NewProcessEvm is a paid mutator transaction binding the contract method 0x292554c3.
//
// Solidity: function newProcessEvm(uint8[3] mode_envelopeType_censusOrigin, string[2] metadata_censusRoot, uint32[2] startBlock_blockCount, uint8[4] questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[2] maxTotalCost_costExponent, address tokenContractAddress, uint256 sourceBlockHeight, bytes32 paramsSignature) payable returns()
func (_Processes *ProcessesTransactor) NewProcessEvm(opts *bind.TransactOpts, mode_envelopeType_censusOrigin [3]uint8, metadata_censusRoot [2]string, startBlock_blockCount [2]uint32, questionCount_maxCount_maxValue_maxVoteOverwrites [4]uint8, maxTotalCost_costExponent [2]uint16, tokenContractAddress common.Address, sourceBlockHeight *big.Int, paramsSignature [32]byte) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "newProcessEvm", mode_envelopeType_censusOrigin, metadata_censusRoot, startBlock_blockCount, questionCount_maxCount_maxValue_maxVoteOverwrites, maxTotalCost_costExponent, tokenContractAddress, sourceBlockHeight, paramsSignature)
}

// NewProcessEvm is a paid mutator transaction binding the contract method 0x292554c3.
//
// Solidity: function newProcessEvm(uint8[3] mode_envelopeType_censusOrigin, string[2] metadata_censusRoot, uint32[2] startBlock_blockCount, uint8[4] questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[2] maxTotalCost_costExponent, address tokenContractAddress, uint256 sourceBlockHeight, bytes32 paramsSignature) payable returns()
func (_Processes *ProcessesSession) NewProcessEvm(mode_envelopeType_censusOrigin [3]uint8, metadata_censusRoot [2]string, startBlock_blockCount [2]uint32, questionCount_maxCount_maxValue_maxVoteOverwrites [4]uint8, maxTotalCost_costExponent [2]uint16, tokenContractAddress common.Address, sourceBlockHeight *big.Int, paramsSignature [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.NewProcessEvm(&_Processes.TransactOpts, mode_envelopeType_censusOrigin, metadata_censusRoot, startBlock_blockCount, questionCount_maxCount_maxValue_maxVoteOverwrites, maxTotalCost_costExponent, tokenContractAddress, sourceBlockHeight, paramsSignature)
}

// NewProcessEvm is a paid mutator transaction binding the contract method 0x292554c3.
//
// Solidity: function newProcessEvm(uint8[3] mode_envelopeType_censusOrigin, string[2] metadata_censusRoot, uint32[2] startBlock_blockCount, uint8[4] questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[2] maxTotalCost_costExponent, address tokenContractAddress, uint256 sourceBlockHeight, bytes32 paramsSignature) payable returns()
func (_Processes *ProcessesTransactorSession) NewProcessEvm(mode_envelopeType_censusOrigin [3]uint8, metadata_censusRoot [2]string, startBlock_blockCount [2]uint32, questionCount_maxCount_maxValue_maxVoteOverwrites [4]uint8, maxTotalCost_costExponent [2]uint16, tokenContractAddress common.Address, sourceBlockHeight *big.Int, paramsSignature [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.NewProcessEvm(&_Processes.TransactOpts, mode_envelopeType_censusOrigin, metadata_censusRoot, startBlock_blockCount, questionCount_maxCount_maxValue_maxVoteOverwrites, maxTotalCost_costExponent, tokenContractAddress, sourceBlockHeight, paramsSignature)
}

// NewProcessStd is a paid mutator transaction binding the contract method 0xb847be34.
//
// Solidity: function newProcessStd(uint8[3] mode_envelopeType_censusOrigin, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8[4] questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[2] maxTotalCost_costExponent, bytes32 paramsSignature) payable returns()
func (_Processes *ProcessesTransactor) NewProcessStd(opts *bind.TransactOpts, mode_envelopeType_censusOrigin [3]uint8, metadata_censusRoot_censusUri [3]string, startBlock_blockCount [2]uint32, questionCount_maxCount_maxValue_maxVoteOverwrites [4]uint8, maxTotalCost_costExponent [2]uint16, paramsSignature [32]byte) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "newProcessStd", mode_envelopeType_censusOrigin, metadata_censusRoot_censusUri, startBlock_blockCount, questionCount_maxCount_maxValue_maxVoteOverwrites, maxTotalCost_costExponent, paramsSignature)
}

// NewProcessStd is a paid mutator transaction binding the contract method 0xb847be34.
//
// Solidity: function newProcessStd(uint8[3] mode_envelopeType_censusOrigin, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8[4] questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[2] maxTotalCost_costExponent, bytes32 paramsSignature) payable returns()
func (_Processes *ProcessesSession) NewProcessStd(mode_envelopeType_censusOrigin [3]uint8, metadata_censusRoot_censusUri [3]string, startBlock_blockCount [2]uint32, questionCount_maxCount_maxValue_maxVoteOverwrites [4]uint8, maxTotalCost_costExponent [2]uint16, paramsSignature [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.NewProcessStd(&_Processes.TransactOpts, mode_envelopeType_censusOrigin, metadata_censusRoot_censusUri, startBlock_blockCount, questionCount_maxCount_maxValue_maxVoteOverwrites, maxTotalCost_costExponent, paramsSignature)
}

// NewProcessStd is a paid mutator transaction binding the contract method 0xb847be34.
//
// Solidity: function newProcessStd(uint8[3] mode_envelopeType_censusOrigin, string[3] metadata_censusRoot_censusUri, uint32[2] startBlock_blockCount, uint8[4] questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[2] maxTotalCost_costExponent, bytes32 paramsSignature) payable returns()
func (_Processes *ProcessesTransactorSession) NewProcessStd(mode_envelopeType_censusOrigin [3]uint8, metadata_censusRoot_censusUri [3]string, startBlock_blockCount [2]uint32, questionCount_maxCount_maxValue_maxVoteOverwrites [4]uint8, maxTotalCost_costExponent [2]uint16, paramsSignature [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.NewProcessStd(&_Processes.TransactOpts, mode_envelopeType_censusOrigin, metadata_censusRoot_censusUri, startBlock_blockCount, questionCount_maxCount_maxValue_maxVoteOverwrites, maxTotalCost_costExponent, paramsSignature)
}

// SetCensus is a paid mutator transaction binding the contract method 0x1795010d.
//
// Solidity: function setCensus(bytes32 processId, string censusRoot, string censusUri) returns()
func (_Processes *ProcessesTransactor) SetCensus(opts *bind.TransactOpts, processId [32]byte, censusRoot string, censusUri string) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "setCensus", processId, censusRoot, censusUri)
}

// SetCensus is a paid mutator transaction binding the contract method 0x1795010d.
//
// Solidity: function setCensus(bytes32 processId, string censusRoot, string censusUri) returns()
func (_Processes *ProcessesSession) SetCensus(processId [32]byte, censusRoot string, censusUri string) (*types.Transaction, error) {
	return _Processes.Contract.SetCensus(&_Processes.TransactOpts, processId, censusRoot, censusUri)
}

// SetCensus is a paid mutator transaction binding the contract method 0x1795010d.
//
// Solidity: function setCensus(bytes32 processId, string censusRoot, string censusUri) returns()
func (_Processes *ProcessesTransactorSession) SetCensus(processId [32]byte, censusRoot string, censusUri string) (*types.Transaction, error) {
	return _Processes.Contract.SetCensus(&_Processes.TransactOpts, processId, censusRoot, censusUri)
}

// SetProcessPrice is a paid mutator transaction binding the contract method 0xcab7f4f6.
//
// Solidity: function setProcessPrice(uint256 newPrice) returns()
func (_Processes *ProcessesTransactor) SetProcessPrice(opts *bind.TransactOpts, newPrice *big.Int) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "setProcessPrice", newPrice)
}

// SetProcessPrice is a paid mutator transaction binding the contract method 0xcab7f4f6.
//
// Solidity: function setProcessPrice(uint256 newPrice) returns()
func (_Processes *ProcessesSession) SetProcessPrice(newPrice *big.Int) (*types.Transaction, error) {
	return _Processes.Contract.SetProcessPrice(&_Processes.TransactOpts, newPrice)
}

// SetProcessPrice is a paid mutator transaction binding the contract method 0xcab7f4f6.
//
// Solidity: function setProcessPrice(uint256 newPrice) returns()
func (_Processes *ProcessesTransactorSession) SetProcessPrice(newPrice *big.Int) (*types.Transaction, error) {
	return _Processes.Contract.SetProcessPrice(&_Processes.TransactOpts, newPrice)
}

// SetStatus is a paid mutator transaction binding the contract method 0x8de654ba.
//
// Solidity: function setStatus(bytes32 processId, uint8 newStatus) returns()
func (_Processes *ProcessesTransactor) SetStatus(opts *bind.TransactOpts, processId [32]byte, newStatus uint8) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "setStatus", processId, newStatus)
}

// SetStatus is a paid mutator transaction binding the contract method 0x8de654ba.
//
// Solidity: function setStatus(bytes32 processId, uint8 newStatus) returns()
func (_Processes *ProcessesSession) SetStatus(processId [32]byte, newStatus uint8) (*types.Transaction, error) {
	return _Processes.Contract.SetStatus(&_Processes.TransactOpts, processId, newStatus)
}

// SetStatus is a paid mutator transaction binding the contract method 0x8de654ba.
//
// Solidity: function setStatus(bytes32 processId, uint8 newStatus) returns()
func (_Processes *ProcessesTransactorSession) SetStatus(processId [32]byte, newStatus uint8) (*types.Transaction, error) {
	return _Processes.Contract.SetStatus(&_Processes.TransactOpts, processId, newStatus)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address to, uint256 amount) returns()
func (_Processes *ProcessesTransactor) Withdraw(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "withdraw", to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address to, uint256 amount) returns()
func (_Processes *ProcessesSession) Withdraw(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Processes.Contract.Withdraw(&_Processes.TransactOpts, to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address to, uint256 amount) returns()
func (_Processes *ProcessesTransactorSession) Withdraw(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Processes.Contract.Withdraw(&_Processes.TransactOpts, to, amount)
}

// ProcessesActivatedIterator is returned from FilterActivated and is used to iterate over the raw logs and unpacked data for Activated events raised by the Processes contract.
type ProcessesActivatedIterator struct {
	Event *ProcessesActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesActivated represents a Activated event raised by the Processes contract.
type ProcessesActivated struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterActivated is a free log retrieval operation binding the contract event 0x3ec796be1be7d03bff3a62b9fa594a60e947c1809bced06d929f145308ae57ce.
//
// Solidity: event Activated(uint256 blockNumber)
func (_Processes *ProcessesFilterer) FilterActivated(opts *bind.FilterOpts) (*ProcessesActivatedIterator, error) {
	logs, sub, err := _Processes.contract.FilterLogs(opts, "Activated")
	if err != nil {
		return nil, err
	}
	return &ProcessesActivatedIterator{contract: _Processes.contract, event: "Activated", logs: logs, sub: sub}, nil
}

// WatchActivated is a free log subscription operation binding the contract event 0x3ec796be1be7d03bff3a62b9fa594a60e947c1809bced06d929f145308ae57ce.
//
// Solidity: event Activated(uint256 blockNumber)
func (_Processes *ProcessesFilterer) WatchActivated(opts *bind.WatchOpts, sink chan<- *ProcessesActivated) (event.Subscription, error) {
	logs, sub, err := _Processes.contract.WatchLogs(opts, "Activated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesActivated)
				if err := _Processes.contract.UnpackLog(event, "Activated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseActivated is a log parse operation binding the contract event 0x3ec796be1be7d03bff3a62b9fa594a60e947c1809bced06d929f145308ae57ce.
//
// Solidity: event Activated(uint256 blockNumber)
func (_Processes *ProcessesFilterer) ParseActivated(log types.Log) (*ProcessesActivated, error) {
	event := new(ProcessesActivated)
	if err := _Processes.contract.UnpackLog(event, "Activated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesActivatedSuccessorIterator is returned from FilterActivatedSuccessor and is used to iterate over the raw logs and unpacked data for ActivatedSuccessor events raised by the Processes contract.
type ProcessesActivatedSuccessorIterator struct {
	Event *ProcessesActivatedSuccessor // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesActivatedSuccessorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesActivatedSuccessor)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesActivatedSuccessor)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesActivatedSuccessorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesActivatedSuccessorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesActivatedSuccessor represents a ActivatedSuccessor event raised by the Processes contract.
type ProcessesActivatedSuccessor struct {
	BlockNumber *big.Int
	Successor   common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterActivatedSuccessor is a free log retrieval operation binding the contract event 0x1f8bdb9825a71b7560200e2279fd4b503ac6814e369318e761928502882ee11a.
//
// Solidity: event ActivatedSuccessor(uint256 blockNumber, address successor)
func (_Processes *ProcessesFilterer) FilterActivatedSuccessor(opts *bind.FilterOpts) (*ProcessesActivatedSuccessorIterator, error) {
	logs, sub, err := _Processes.contract.FilterLogs(opts, "ActivatedSuccessor")
	if err != nil {
		return nil, err
	}
	return &ProcessesActivatedSuccessorIterator{contract: _Processes.contract, event: "ActivatedSuccessor", logs: logs, sub: sub}, nil
}

// WatchActivatedSuccessor is a free log subscription operation binding the contract event 0x1f8bdb9825a71b7560200e2279fd4b503ac6814e369318e761928502882ee11a.
//
// Solidity: event ActivatedSuccessor(uint256 blockNumber, address successor)
func (_Processes *ProcessesFilterer) WatchActivatedSuccessor(opts *bind.WatchOpts, sink chan<- *ProcessesActivatedSuccessor) (event.Subscription, error) {
	logs, sub, err := _Processes.contract.WatchLogs(opts, "ActivatedSuccessor")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesActivatedSuccessor)
				if err := _Processes.contract.UnpackLog(event, "ActivatedSuccessor", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseActivatedSuccessor is a log parse operation binding the contract event 0x1f8bdb9825a71b7560200e2279fd4b503ac6814e369318e761928502882ee11a.
//
// Solidity: event ActivatedSuccessor(uint256 blockNumber, address successor)
func (_Processes *ProcessesFilterer) ParseActivatedSuccessor(log types.Log) (*ProcessesActivatedSuccessor, error) {
	event := new(ProcessesActivatedSuccessor)
	if err := _Processes.contract.UnpackLog(event, "ActivatedSuccessor", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesCensusUpdatedIterator is returned from FilterCensusUpdated and is used to iterate over the raw logs and unpacked data for CensusUpdated events raised by the Processes contract.
type ProcessesCensusUpdatedIterator struct {
	Event *ProcessesCensusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesCensusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesCensusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesCensusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesCensusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesCensusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesCensusUpdated represents a CensusUpdated event raised by the Processes contract.
type ProcessesCensusUpdated struct {
	ProcessId [32]byte
	Namespace uint32
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCensusUpdated is a free log retrieval operation binding the contract event 0xb290b721dc95d65b8ca629743f4f2e385523708862c8237aa6601dd9a99c238e.
//
// Solidity: event CensusUpdated(bytes32 processId, uint32 namespace)
func (_Processes *ProcessesFilterer) FilterCensusUpdated(opts *bind.FilterOpts) (*ProcessesCensusUpdatedIterator, error) {
	logs, sub, err := _Processes.contract.FilterLogs(opts, "CensusUpdated")
	if err != nil {
		return nil, err
	}
	return &ProcessesCensusUpdatedIterator{contract: _Processes.contract, event: "CensusUpdated", logs: logs, sub: sub}, nil
}

// WatchCensusUpdated is a free log subscription operation binding the contract event 0xb290b721dc95d65b8ca629743f4f2e385523708862c8237aa6601dd9a99c238e.
//
// Solidity: event CensusUpdated(bytes32 processId, uint32 namespace)
func (_Processes *ProcessesFilterer) WatchCensusUpdated(opts *bind.WatchOpts, sink chan<- *ProcessesCensusUpdated) (event.Subscription, error) {
	logs, sub, err := _Processes.contract.WatchLogs(opts, "CensusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesCensusUpdated)
				if err := _Processes.contract.UnpackLog(event, "CensusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCensusUpdated is a log parse operation binding the contract event 0xb290b721dc95d65b8ca629743f4f2e385523708862c8237aa6601dd9a99c238e.
//
// Solidity: event CensusUpdated(bytes32 processId, uint32 namespace)
func (_Processes *ProcessesFilterer) ParseCensusUpdated(log types.Log) (*ProcessesCensusUpdated, error) {
	event := new(ProcessesCensusUpdated)
	if err := _Processes.contract.UnpackLog(event, "CensusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesNewProcessIterator is returned from FilterNewProcess and is used to iterate over the raw logs and unpacked data for NewProcess events raised by the Processes contract.
type ProcessesNewProcessIterator struct {
	Event *ProcessesNewProcess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesNewProcessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesNewProcess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesNewProcess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesNewProcessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesNewProcessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesNewProcess represents a NewProcess event raised by the Processes contract.
type ProcessesNewProcess struct {
	ProcessId [32]byte
	Namespace uint32
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewProcess is a free log retrieval operation binding the contract event 0x3b1cc0fc696cbe654bd83494847cc7890f2ae0e05a79dfbd6c1892061fbf3404.
//
// Solidity: event NewProcess(bytes32 processId, uint32 namespace)
func (_Processes *ProcessesFilterer) FilterNewProcess(opts *bind.FilterOpts) (*ProcessesNewProcessIterator, error) {
	logs, sub, err := _Processes.contract.FilterLogs(opts, "NewProcess")
	if err != nil {
		return nil, err
	}
	return &ProcessesNewProcessIterator{contract: _Processes.contract, event: "NewProcess", logs: logs, sub: sub}, nil
}

// WatchNewProcess is a free log subscription operation binding the contract event 0x3b1cc0fc696cbe654bd83494847cc7890f2ae0e05a79dfbd6c1892061fbf3404.
//
// Solidity: event NewProcess(bytes32 processId, uint32 namespace)
func (_Processes *ProcessesFilterer) WatchNewProcess(opts *bind.WatchOpts, sink chan<- *ProcessesNewProcess) (event.Subscription, error) {
	logs, sub, err := _Processes.contract.WatchLogs(opts, "NewProcess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesNewProcess)
				if err := _Processes.contract.UnpackLog(event, "NewProcess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewProcess is a log parse operation binding the contract event 0x3b1cc0fc696cbe654bd83494847cc7890f2ae0e05a79dfbd6c1892061fbf3404.
//
// Solidity: event NewProcess(bytes32 processId, uint32 namespace)
func (_Processes *ProcessesFilterer) ParseNewProcess(log types.Log) (*ProcessesNewProcess, error) {
	event := new(ProcessesNewProcess)
	if err := _Processes.contract.UnpackLog(event, "NewProcess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesProcessPriceUpdatedIterator is returned from FilterProcessPriceUpdated and is used to iterate over the raw logs and unpacked data for ProcessPriceUpdated events raised by the Processes contract.
type ProcessesProcessPriceUpdatedIterator struct {
	Event *ProcessesProcessPriceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesProcessPriceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesProcessPriceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesProcessPriceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesProcessPriceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesProcessPriceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesProcessPriceUpdated represents a ProcessPriceUpdated event raised by the Processes contract.
type ProcessesProcessPriceUpdated struct {
	ProcessPrice *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterProcessPriceUpdated is a free log retrieval operation binding the contract event 0x340b7835e5cad9e69cc8bf06b0b3c3e729f0fe4fd314932f4e4284d6ffc03a71.
//
// Solidity: event ProcessPriceUpdated(uint256 processPrice)
func (_Processes *ProcessesFilterer) FilterProcessPriceUpdated(opts *bind.FilterOpts) (*ProcessesProcessPriceUpdatedIterator, error) {
	logs, sub, err := _Processes.contract.FilterLogs(opts, "ProcessPriceUpdated")
	if err != nil {
		return nil, err
	}
	return &ProcessesProcessPriceUpdatedIterator{contract: _Processes.contract, event: "ProcessPriceUpdated", logs: logs, sub: sub}, nil
}

// WatchProcessPriceUpdated is a free log subscription operation binding the contract event 0x340b7835e5cad9e69cc8bf06b0b3c3e729f0fe4fd314932f4e4284d6ffc03a71.
//
// Solidity: event ProcessPriceUpdated(uint256 processPrice)
func (_Processes *ProcessesFilterer) WatchProcessPriceUpdated(opts *bind.WatchOpts, sink chan<- *ProcessesProcessPriceUpdated) (event.Subscription, error) {
	logs, sub, err := _Processes.contract.WatchLogs(opts, "ProcessPriceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesProcessPriceUpdated)
				if err := _Processes.contract.UnpackLog(event, "ProcessPriceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProcessPriceUpdated is a log parse operation binding the contract event 0x340b7835e5cad9e69cc8bf06b0b3c3e729f0fe4fd314932f4e4284d6ffc03a71.
//
// Solidity: event ProcessPriceUpdated(uint256 processPrice)
func (_Processes *ProcessesFilterer) ParseProcessPriceUpdated(log types.Log) (*ProcessesProcessPriceUpdated, error) {
	event := new(ProcessesProcessPriceUpdated)
	if err := _Processes.contract.UnpackLog(event, "ProcessPriceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesQuestionIndexUpdatedIterator is returned from FilterQuestionIndexUpdated and is used to iterate over the raw logs and unpacked data for QuestionIndexUpdated events raised by the Processes contract.
type ProcessesQuestionIndexUpdatedIterator struct {
	Event *ProcessesQuestionIndexUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesQuestionIndexUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesQuestionIndexUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesQuestionIndexUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesQuestionIndexUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesQuestionIndexUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesQuestionIndexUpdated represents a QuestionIndexUpdated event raised by the Processes contract.
type ProcessesQuestionIndexUpdated struct {
	ProcessId [32]byte
	Namespace uint32
	NewIndex  uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterQuestionIndexUpdated is a free log retrieval operation binding the contract event 0xc3c879bd28e24bfa8df84d17ef3cae71077c3610e6167d435cc7e669e4a6b97c.
//
// Solidity: event QuestionIndexUpdated(bytes32 processId, uint32 namespace, uint8 newIndex)
func (_Processes *ProcessesFilterer) FilterQuestionIndexUpdated(opts *bind.FilterOpts) (*ProcessesQuestionIndexUpdatedIterator, error) {
	logs, sub, err := _Processes.contract.FilterLogs(opts, "QuestionIndexUpdated")
	if err != nil {
		return nil, err
	}
	return &ProcessesQuestionIndexUpdatedIterator{contract: _Processes.contract, event: "QuestionIndexUpdated", logs: logs, sub: sub}, nil
}

// WatchQuestionIndexUpdated is a free log subscription operation binding the contract event 0xc3c879bd28e24bfa8df84d17ef3cae71077c3610e6167d435cc7e669e4a6b97c.
//
// Solidity: event QuestionIndexUpdated(bytes32 processId, uint32 namespace, uint8 newIndex)
func (_Processes *ProcessesFilterer) WatchQuestionIndexUpdated(opts *bind.WatchOpts, sink chan<- *ProcessesQuestionIndexUpdated) (event.Subscription, error) {
	logs, sub, err := _Processes.contract.WatchLogs(opts, "QuestionIndexUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesQuestionIndexUpdated)
				if err := _Processes.contract.UnpackLog(event, "QuestionIndexUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseQuestionIndexUpdated is a log parse operation binding the contract event 0xc3c879bd28e24bfa8df84d17ef3cae71077c3610e6167d435cc7e669e4a6b97c.
//
// Solidity: event QuestionIndexUpdated(bytes32 processId, uint32 namespace, uint8 newIndex)
func (_Processes *ProcessesFilterer) ParseQuestionIndexUpdated(log types.Log) (*ProcessesQuestionIndexUpdated, error) {
	event := new(ProcessesQuestionIndexUpdated)
	if err := _Processes.contract.UnpackLog(event, "QuestionIndexUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesStatusUpdatedIterator is returned from FilterStatusUpdated and is used to iterate over the raw logs and unpacked data for StatusUpdated events raised by the Processes contract.
type ProcessesStatusUpdatedIterator struct {
	Event *ProcessesStatusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesStatusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesStatusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesStatusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesStatusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesStatusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesStatusUpdated represents a StatusUpdated event raised by the Processes contract.
type ProcessesStatusUpdated struct {
	ProcessId [32]byte
	Namespace uint32
	Status    uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStatusUpdated is a free log retrieval operation binding the contract event 0x55ab39d22f8c4c97fce480c015b739838aa5b8a4ad0a528159669842a7087b01.
//
// Solidity: event StatusUpdated(bytes32 processId, uint32 namespace, uint8 status)
func (_Processes *ProcessesFilterer) FilterStatusUpdated(opts *bind.FilterOpts) (*ProcessesStatusUpdatedIterator, error) {
	logs, sub, err := _Processes.contract.FilterLogs(opts, "StatusUpdated")
	if err != nil {
		return nil, err
	}
	return &ProcessesStatusUpdatedIterator{contract: _Processes.contract, event: "StatusUpdated", logs: logs, sub: sub}, nil
}

// WatchStatusUpdated is a free log subscription operation binding the contract event 0x55ab39d22f8c4c97fce480c015b739838aa5b8a4ad0a528159669842a7087b01.
//
// Solidity: event StatusUpdated(bytes32 processId, uint32 namespace, uint8 status)
func (_Processes *ProcessesFilterer) WatchStatusUpdated(opts *bind.WatchOpts, sink chan<- *ProcessesStatusUpdated) (event.Subscription, error) {
	logs, sub, err := _Processes.contract.WatchLogs(opts, "StatusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesStatusUpdated)
				if err := _Processes.contract.UnpackLog(event, "StatusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStatusUpdated is a log parse operation binding the contract event 0x55ab39d22f8c4c97fce480c015b739838aa5b8a4ad0a528159669842a7087b01.
//
// Solidity: event StatusUpdated(bytes32 processId, uint32 namespace, uint8 status)
func (_Processes *ProcessesFilterer) ParseStatusUpdated(log types.Log) (*ProcessesStatusUpdated, error) {
	event := new(ProcessesStatusUpdated)
	if err := _Processes.contract.UnpackLog(event, "StatusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Processes contract.
type ProcessesWithdrawIterator struct {
	Event *ProcessesWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesWithdraw represents a Withdraw event raised by the Processes contract.
type ProcessesWithdraw struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address to, uint256 amount)
func (_Processes *ProcessesFilterer) FilterWithdraw(opts *bind.FilterOpts) (*ProcessesWithdrawIterator, error) {
	logs, sub, err := _Processes.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &ProcessesWithdrawIterator{contract: _Processes.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address to, uint256 amount)
func (_Processes *ProcessesFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *ProcessesWithdraw) (event.Subscription, error) {
	logs, sub, err := _Processes.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesWithdraw)
				if err := _Processes.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address to, uint256 amount)
func (_Processes *ProcessesFilterer) ParseWithdraw(log types.Log) (*ProcessesWithdraw, error) {
	event := new(ProcessesWithdraw)
	if err := _Processes.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
